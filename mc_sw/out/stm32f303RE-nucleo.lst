
d:/prg/prj/github/nucleo-f303re-GPS-logger/mc_sw/out/stm32f303RE-nucleo.elf:     file format elf32-littlearm
d:/prg/prj/github/nucleo-f303re-GPS-logger/mc_sw/out/stm32f303RE-nucleo.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001d1

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x00002c2c memsz 0x00002c2c flags rwx
    LOAD off    0x00020800 vaddr 0x20000800 paddr 0x08002c2c align 2**16
         filesz 0x00000000 memsz 0x000019ac flags rw-
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x00010000 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .mstack       00000400  20000000  20000000  00020000  2**0
                  ALLOC
  1 .pstack       00000400  20000400  20000400  00020000  2**0
                  ALLOC
  2 vectors       000001a0  08000000  08000000  00010000  2**7
                  CONTENTS, ALLOC, LOAD, DATA
  3 .text         00002740  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000034c  080028e0  080028e0  000128e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000000  20000800  20000800  00012c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000019ac  20000800  08002c2c  00020800  2**3
                  ALLOC
  7 .ram0_init    00000000  200021ac  200021ac  00012c2c  2**2
                  CONTENTS
  8 .ram0         00000000  200021ac  200021ac  00012c2c  2**2
                  CONTENTS
  9 .ram1_init    00000000  00000000  00000000  00012c2c  2**2
                  CONTENTS
 10 .ram1         00000000  00000000  00000000  00012c2c  2**2
                  CONTENTS
 11 .ram2_init    00000000  00000000  00000000  00012c2c  2**2
                  CONTENTS
 12 .ram2         00000000  00000000  00000000  00012c2c  2**2
                  CONTENTS
 13 .ram3_init    00000000  00000000  00000000  00012c2c  2**2
                  CONTENTS
 14 .ram3         00000000  00000000  00000000  00012c2c  2**2
                  CONTENTS
 15 .ram4_init    00000000  10000000  10000000  00012c2c  2**2
                  CONTENTS
 16 .ram4         00000000  10000000  10000000  00012c2c  2**2
                  CONTENTS
 17 .ram5_init    00000000  00000000  00000000  00012c2c  2**2
                  CONTENTS
 18 .ram5         00000000  00000000  00000000  00012c2c  2**2
                  CONTENTS
 19 .ram6_init    00000000  00000000  00000000  00012c2c  2**2
                  CONTENTS
 20 .ram6         00000000  00000000  00000000  00012c2c  2**2
                  CONTENTS
 21 .ram7_init    00000000  00000000  00000000  00012c2c  2**2
                  CONTENTS
 22 .ram7         00000000  00000000  00000000  00012c2c  2**2
                  CONTENTS
 23 .heap         0000de54  200021ac  200021ac  00020000  2**0
                  ALLOC
 24 .debug_info   00008f0f  00000000  00000000  00012c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_abbrev 0000141b  00000000  00000000  0001bb3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_aranges 00000d98  00000000  00000000  0001cf58  2**3
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_ranges 00000d08  00000000  00000000  0001dcf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_line   000042a4  00000000  00000000  0001e9f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_str    00002b9f  00000000  00000000  00022c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 30 .comment      0000006e  00000000  00000000  0002583b  2**0
                  CONTENTS, READONLY
 31 .ARM.attributes 00000037  00000000  00000000  000258a9  2**0
                  CONTENTS, READONLY
 32 .debug_frame  000029a4  00000000  00000000  000258e0  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20000000 l    d  .mstack	00000000 .mstack
20000400 l    d  .pstack	00000000 .pstack
08000000 l    d  vectors	00000000 vectors
080001a0 l    d  .text	00000000 .text
080028e0 l    d  .rodata	00000000 .rodata
20000800 l    d  .data	00000000 .data
20000800 l    d  .bss	00000000 .bss
200021ac l    d  .ram0_init	00000000 .ram0_init
200021ac l    d  .ram0	00000000 .ram0
00000000 l    d  .ram1_init	00000000 .ram1_init
00000000 l    d  .ram1	00000000 .ram1
00000000 l    d  .ram2_init	00000000 .ram2_init
00000000 l    d  .ram2	00000000 .ram2
00000000 l    d  .ram3_init	00000000 .ram3_init
00000000 l    d  .ram3	00000000 .ram3
10000000 l    d  .ram4_init	00000000 .ram4_init
10000000 l    d  .ram4	00000000 .ram4
00000000 l    d  .ram5_init	00000000 .ram5_init
00000000 l    d  .ram5	00000000 .ram5
00000000 l    d  .ram6_init	00000000 .ram6_init
00000000 l    d  .ram6	00000000 .ram6
00000000 l    d  .ram7_init	00000000 .ram7_init
00000000 l    d  .ram7	00000000 .ram7
200021ac l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 
20000800 l     O .bss	0000002c Led_Data
080028f0 l     O .rodata	00000010 Led_Config
08002040 l     F .text	00000260 heartBeatExec
08001e30 l     F .text	000000bc setLedInactive
08001ef0 l     F .text	000000cc getLedState
08001c90 l     F .text	00000054 Led_MainFunction
08001d70 l     F .text	000000bc setLedActive
08001fc0 l     F .text	00000080 toggleLed
080022a0 l     F .text	00000010 port_lock.lto_priv.79
080022b0 l     F .text	00000010 port_unlock.lto_priv.70
080022c0 l     F .text	00000008 chSysLock.lto_priv.95
080022d0 l     F .text	00000008 chSysUnlock.lto_priv.88
080022e0 l     F .text	0000000c chVTGetSystemTimeX
080022f0 l     F .text	0000001c chVTGetSystemTime
08002310 l     F .text	00000024 chVTIsTimeWithinX
08002340 l     F .text	00000022 chVTIsSystemTimeWithin
2000082c l     O .bss	0000001c OsCfg_TaskPool
08002900 l     O .rodata	000000c4 OsCfg_Config
20000848 l     O .bss	00000348 Task_2ms_Stack
20000b90 l     O .bss	00000348 Task_5ms_Stack
20000ed8 l     O .bss	00000348 Task_10ms_Stack
20001220 l     O .bss	00000348 Task_20ms_Stack
20001568 l     O .bss	00000348 Task_40ms_Stack
200018b0 l     O .bss	00000348 Task_80ms_Stack
20001bf8 l     O .bss	00000348 Task_100ms_Stack
080024e0 l     F .text	00000030 Task_2ms
08002510 l     F .text	00000030 Task_5ms
08002540 l     F .text	00000034 Task_10ms
08002580 l     F .text	00000030 Task_20ms
080025b0 l     F .text	00000030 Task_40ms
080025e0 l     F .text	00000030 Task_80ms
08002610 l     F .text	00000030 Task_100ms
08002660 l     F .text	00000010 port_lock.lto_priv.81
08002670 l     F .text	00000010 port_unlock.lto_priv.72
08002680 l     F .text	00000008 port_lock_from_isr.lto_priv.68
08002690 l     F .text	00000008 port_unlock_from_isr.lto_priv.66
080026a0 l     F .text	00000038 SVC_Handler
20001f40 l     O .bss	00000004 nextmem
20001f44 l     O .bss	00000004 endmem
08002780 l     F .text	00000010 port_lock.lto_priv.87
08002790 l     F .text	00000010 port_unlock.lto_priv.78
080027a0 l     F .text	00000008 port_lock_from_isr.lto_priv.69
080027b0 l     F .text	00000008 port_unlock_from_isr.lto_priv.67
00000000 l    df *ABS*	00000000 d:/prg/prj/github/nucleo-f303re-GPS-logger/mc_sw/obj/chcoreasm_v7m.o
e000ed04 l       *ABS*	00000000 SCB_ICSR
10000000 l       *ABS*	00000000 ICSR_PENDSVSET
00000000 l    df *ABS*	00000000 d:/prg/prj/github/nucleo-f303re-GPS-logger/mc_sw/obj/crt0_v7m.o
08000238 l       .text	00000000 msloop
08000246 l       .text	00000000 psloop
08000256 l       .text	00000000 dloop
0800026a l       .text	00000000 bloop
08000280 l       .text	00000000 initloop
0800028c l       .text	00000000 endinitloop
08000294 l       .text	00000000 finiloop
080002a0 l       .text	00000000 endfiniloop
00000000 l    df *ABS*	00000000 
080002e0 l     F .text	000000ce serve_usart_irq
00000000 l    df *ABS*	00000000 
08000aa0 l     F .text	00000058 hal_lld_backup_domain_init
08000c50 l     F .text	00000042 initgpio
08000f70 l     F .text	00000028 st_lld_init
08000ec0 l     F .text	00000010 port_lock.lto_priv.19
08000ed0 l     F .text	00000010 port_unlock.lto_priv.16
08000ee0 l     F .text	00000008 port_lock_from_isr
08000ef0 l     F .text	00000008 port_unlock_from_isr
08000f00 l     F .text	00000008 chSysLockFromISR
08000f10 l     F .text	00000008 chSysUnlockFromISR
08000f20 l     F .text	00000008 osalSysLockFromISR
08000f30 l     F .text	00000008 osalSysUnlockFromISR
08000f40 l     F .text	00000008 osalOsTimerHandlerI
00000000 l    df *ABS*	00000000 
080010d0 l     F .text	00000048 chThdExitS
08001140 l     F .text	0000000c port_rt_get_counter_value
08001150 l     F .text	0000006e tm_stop
08001200 l     F .text	00000036 chTMObjectInit
08001240 l     F .text	00000016 chTMStartMeasurementX
08001260 l     F .text	00000024 chTMStopMeasurementX
08001420 l     F .text	00000002 osalInit
00000000 l    df *ABS*	00000000 
08001460 l     F .text	00000014 _scheduler_init
080014d0 l     F .text	00000048 chSchReadyAheadI
08001570 l     F .text	00000074 wakeup
08001700 l     F .text	0000003c chSchDoRescheduleAhead
08001780 l     F .text	0000003c NVIC_SetPriorityGrouping
080017c0 l     F .text	0000004c NVIC_SetPriority
08001810 l     F .text	00000048 port_init
08001860 l     F .text	00000010 port_lock.lto_priv.51
08001870 l     F .text	00000010 port_unlock.lto_priv.48
08001880 l     F .text	00000008 port_lock_from_isr
08001890 l     F .text	00000008 port_unlock_from_isr
080018a0 l     F .text	00000012 port_enable
080018c0 l     F .text	00000002 port_wait_for_interrupt
080018d0 l     F .text	00000008 chSysEnable
080018e0 l     F .text	00000008 chSysLockFromISR.lto_priv.57
080018f0 l     F .text	00000008 chSysUnlockFromISR.lto_priv.55
08001900 l     F .text	00000070 chVTDoTickI
080019e0 l     F .text	00000010 port_lock.lto_priv.52
080019f0 l     F .text	00000010 port_unlock.lto_priv.49
08001a00 l     F .text	0000000e list_init
08001a30 l     F .text	00000014 queue_init.lto_priv.46
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
080029c4 g     O .rodata	000000e0 .hidden pal_default_config
08000a90 g     F .text	00000002 .hidden Vector58
08000a90 g     F .text	00000002 .hidden VectorE8
08000a90 g     F .text	00000002 .hidden Vector9C
08000a90 g     F .text	00000002 .hidden VectorAC
080019d0 g     F .text	00000008 .hidden chSysTimerHandlerI
080010b0 g     F .text	00000016 chThdExit
080015f0 g     F .text	00000064 .hidden chSchGoSleepTimeoutS
08000a90 g     F .text	00000002 .hidden DebugMon_Handler
10000000 g       .rodata	00000000 __ram4_start__
08000a90 g     F .text	00000002 .hidden Vector5C
08000a90 g     F .text	00000002 .hidden Vector11C
00000000 g       .ram5	00000000 __ram5_clear__
08000a90 g     F .text	00000002 .hidden HardFault_Handler
08000a20 g     F .text	00000064 .hidden dmaInit
08000a90 g     F .text	00000002 .hidden Vector19C
200021ac g       .ram0_init	00000000 __ram0_init__
08000a90 g     F .text	00000002 .hidden Vector8C
08000f50 g     F .text	00000014 .hidden SysTick_Handler
00000000 g       .ram1	00000000 __ram1_free__
080003d0 g     F .text	00000014 .hidden VectorDC
08002830 g     F .text	00000020 .hidden chSchIsRescRequiredI.lto_priv.62
00000000 g       .rodata	00000000 __ram6_start__
08000a90 g     F .text	00000002 .hidden PendSV_Handler
08000a90 g     F .text	00000002 .hidden Vector168
08000a90 g     F .text	00000002 .hidden NMI_Handler
08000000 g     O vectors	000001a0 _vectors
08002c2c g       .rodata	00000000 __exidx_end
08001520 g     F .text	00000044 .hidden chSchGoSleepS
08000a90 g     F .text	00000002 .hidden Vector110
08001a10 g     F .text	0000001a .hidden list_notempty.lto_priv.38
08001a90 g     F .text	00000016 .hidden chThdStartI.lto_priv.40
200021ac g       .ram0	00000000 __ram0_free__
200021b0 g       .heap	00000000 __heap_base__
080007f0 g     F .text	00000064 .hidden Vector120
08002abc g     O .rodata	00000080 .hidden ram_areas.lto_priv.29
08000a90 g     F .text	00000002 .hidden VectorC8
08001660 g     F .text	00000050 .hidden chSchWakeupS
08002c2c g       *ABS*	00000000 __ram3_init_text__
080016b0 g     F .text	00000012 .hidden chSchRescheduleS
08000a90 g     F .text	00000002 .hidden Vector94
00000000 g       *ABS*	00000000 __ram5_end__
08001b80 g     F .text	0000010c .hidden Led_Init
00000000 g       .ram5	00000000 __ram5_noinit__
00000000 g       *ABS*	00000000 __ram5_size__
08000a90 g     F .text	00000002 .hidden VectorA8
080028b0 g     F .text	00000016 memcpy
08001ab0 g     F .text	00000014 .hidden chThdSleepS.lto_priv.35
08000a90 g     F .text	00000002 .hidden VectorB4
08001480 g     F .text	00000048 .hidden chSchReadyI
080001a0 g       vectors	00000000 __fini_array_end
20000800 g       .pstack	00000000 __main_thread_stack_end__
08001290 g     F .text	00000024 .hidden _vt_init
08001a80 g     F .text	00000008 .hidden chSysUnlock.lto_priv.25
08002c2c g       .rodata	00000000 __rodata_end__
080005c0 g     F .text	00000064 .hidden Vector74
08001430 g     F .text	00000024 .hidden halInit
080027c0 g     F .text	00000014 .hidden queue_init.lto_priv.44
08000a90 g     F .text	00000002 .hidden Vector160
08000a90 g     F .text	00000002 .hidden UsageFault_Handler
080011c0 g     F .text	00000034 .hidden _tm_init
08000a90 g     F .text	00000002 .hidden VectorEC
20000800 g       .bss	00000000 _bss_start
080003f0 g     F .text	00000070 .hidden uart_lld_init
20001fb0 g     O .bss	00000158 .hidden ch_idle_thread_wa
20010000 g       .heap	00000000 __heap_end__
00000000 g       *ABS*	00000000 __ram1_size__
08000a90 g     F .text	00000002 .hidden Vector40
08000a90 g     F .text	00000002 .hidden VectorF8
08000a90 g     F .text	00000002 .hidden Vector108
08000a90 g     F .text	00000002 .hidden VectorBC
08000a90 g     F .text	00000002 .hidden Vector190
08000a90 g     F .text	00000002 .hidden Vector150
00000000 g       .ram1	00000000 __ram1_clear__
08000860 g     F .text	00000064 .hidden Vector124
08000b00 g     F .text	00000070 .hidden hal_lld_init
00000000 g       .ram7	00000000 __ram7_free__
00004000 g       *ABS*	00000000 __ram4_size__
00000000 g       *ABS*	00000000 __ram1_end__
10004000 g       *ABS*	00000000 __ram4_end__
08001a70 g     F .text	00000008 .hidden chSysLock.lto_priv.27
08002c2c g       .rodata	00000000 __exidx_start
08002c2c g       *ABS*	00000000 __ram0_init_text__
08002aa4 g     O .rodata	00000018 .hidden idle_descriptor.5849.lto_priv.53
08002c2c g       *ABS*	00000000 __ram1_init_text__
08000a90 g     F .text	00000002 .hidden Vector148
08000a90 g     F .text	00000002 .hidden Vector188
00010000 g       *ABS*	00000000 __ram0_size__
08002c2c g       *ABS*	00000000 __ram5_init_text__
08000a90 g     F .text	00000002 .hidden Vector198
08000a90 g     F .text	00000002 .hidden Vector118
08000a90 g     F .text	00000002 .hidden Vector64
200021ac g       .bss	00000000 _bss_end
08000d40 g     F .text	00000166 .hidden _pal_lld_setgroupmode
080001d0 g     F .text	00000000 Reset_Handler
08000eb0 g     F .text	00000008 .hidden stInit
08000a90 g     F .text	00000002 .hidden VectorCC
08000a90 g     F .text	00000002 .hidden Vector54
08000a90 g     F .text	00000002 .hidden Vector98
10000000 g       .ram4	00000000 __ram4_clear__
00000000 g       .ram5	00000000 __ram5_free__
080003b0 g     F .text	00000014 .hidden VectorD8
08002c2c g       *ABS*	00000000 __ram6_init_text__
08000a90 g     F .text	00000002 .hidden Vector138
08000a90 g     F .text	00000002 .hidden Vector24
00000000 g       .ram3	00000000 __ram3_clear__
080013a0 g     F .text	00000002 __default_exit
00000000 g       *ABS*	00000000 __ram6_end__
00000000 g       .ram6_init	00000000 __ram6_init__
08001740 g     F .text	0000003c chSchDoReschedule
08001980 g     F .text	0000004c .hidden chSysInit
00000000 g       .ram7_init	00000000 __ram7_init__
08000a90 g     F .text	00000002 .hidden Vector178
00000000 g       .ram6	00000000 __ram6_free__
08001120 g     F .text	0000001a .hidden chThdSleep
08002b3c g     O .rodata	000000f0 .hidden _stm32_dma_streams
08000780 g     F .text	00000064 .hidden Vector84
00000000 g       .ram2	00000000 __ram2_noinit__
08001040 g     F .text	00000020 .hidden chThdCreateSuspended
00000000 g       .ram6	00000000 __ram6_noinit__
08000b70 g     F .text	000000dc .hidden stm32_clock_init
10000000 g       .ram4_init	00000000 __ram4_init__
08000ca0 g     F .text	00000098 .hidden _pal_lld_init
00000000 g       .ram7	00000000 __ram7_clear__
08000a90 g     F .text	00000002 .hidden VectorD0
08002760 g     F .text	00000020 .hidden _core_init
20000800 g       .data	00000000 _data_start
00000000 g       *ABS*	00000000 __ram7_size__
08002850 g     F .text	00000008 .hidden chSysLockFromISR.lto_priv.56
08000a90 g     F .text	00000002 .hidden Vector140
08000a90 g     F .text	00000002 .hidden VectorE4
08000a90 g     F .text	00000002 .hidden VectorC0
08000a90 g     F .text	00000002 .hidden Vector158
080009b0 g     F .text	00000064 .hidden Vector130
08000fa0 g     F .text	00000008 .hidden uartInit
080001a0 g     F .text	00000000 _port_switch
08001380 g     F .text	00000002 __core_init
10000000 g       .ram4	00000000 __ram4_noinit__
08001390 g     F .text	00000002 __late_init
080026e0 g     F .text	00000078 .hidden _port_irq_epilogue
08000a90 g     F .text	00000002 .hidden Vector134
00000000 g       .rodata	00000000 __ram7_start__
00000000 g       .ram6	00000000 __ram6_clear__
08000a90 g     F .text	00000002 .hidden VectorF0
08000940 g     F .text	00000064 .hidden Vector12C
20000800 g       .data	00000000 _data_end
08000a90 g     F .text	00000002 .hidden Vector13C
08002370 g     F .text	000000dc .hidden Os_Init
00000000 g       *ABS*	00000000 __ram3_size__
08000a90 g     F .text	00000002 .hidden Vector100
08000a90 g     F .text	00000002 .hidden VectorE0
08000a90 g     F .text	00000002 .hidden VectorF4
080001a0 g       vectors	00000000 __fini_array_start
00000000 g       .ram2	00000000 __ram2_clear__
00000000 g       *ABS*	00000000 __ram3_end__
00000000 g       *ABS*	00000000 __ram2_size__
00000000 g       .rodata	00000000 __ram1_start__
080028e0 g       .rodata	00000000 __rodata_base__
080028d0 g     F .text	00000010 memset
08000a90 g     F .text	00000002 .hidden MemManage_Handler
08000460 g     F .text	0000004c main
080004e0 g     F .text	00000064 .hidden Vector6C
00000000 g       *ABS*	00000000 __ram6_size__
08000a90 g     F .text	00000002 .hidden VectorA0
08002c2c g       *ABS*	00000000 __ram2_init_text__
080027e0 g     F .text	00000022 .hidden queue_fifo_remove.lto_priv.41
00000000 g       .ram3	00000000 __ram3_free__
080001a0 g       vectors	00000000 __init_array_end
20002128 g     O .bss	00000020 .hidden UARTD3
08000a90 g     F .text	00000002 .hidden VectorC4
080006a0 g     F .text	00000064 .hidden Vector7C
08000a90 g     F .text	00000002 .hidden Vector180
08002c2c g       *ABS*	00000000 __ram4_init_text__
00000000 g       .ram1	00000000 __ram1_noinit__
08000a90 g     F .text	00000002 .hidden VectorB0
08000a90 g     F .text	00000002 .hidden Vector90
08000fd0 g     F .text	0000006a .hidden translate_errors.lto_priv.4
08000a90 g     F .text	00000002 .hidden Vector114
080001b8 g     F .text	00000000 _port_thread_start
08000a90 g     F .text	00000002 .hidden Vector164
08000a90 g     F .text	00000002 .hidden Vector60
08000a90 g     F .text	00000002 .hidden Vector1C
08000a90 g     F .text	00000002 .hidden Vector17C
08000a90 g     F .text	00000002 .hidden Vector48
00000000 g       .ram2_init	00000000 __ram2_init__
00000000 g       *ABS*	00000000 __ram2_end__
20000400 g       .pstack	00000000 __process_stack_base__
08000a90 g     F .text	00000002 .hidden Vector16C
200021ac g       .ram0	00000000 __ram0_clear__
08000550 g     F .text	00000064 .hidden Vector70
08000a90 g     F .text	00000002 .hidden VectorD4
08002450 g     F .text	00000088 .hidden Os_StartTasks
080004b0 g     F .text	00000024 .hidden nvicSetSystemHandlerPriority
08001340 g     F .text	00000040 .hidden chVTDoResetI
00000000 g       .ram3	00000000 __ram3_noinit__
08001b20 g     F .text	00000054 .hidden chThdCreateSuspendedI
08002870 g     F .text	00000018 .hidden chVTIsArmedI.lto_priv.63
08001090 g     F .text	00000020 .hidden chThdStart
200021ac g       .ram0	00000000 __ram0_noinit__
080013b0 g     F .text	00000064 __init_ram_areas
08000a90 g     F .text	00000002 .hidden Vector4C
08000fb0 g     F .text	00000020 .hidden uartObjectInit
00000000 g       .rodata	00000000 __ram2_start__
08000a90 g     F .text	00000002 .hidden Vector144
08000710 g     F .text	00000064 .hidden Vector80
080001c8 g     F .text	00000000 _port_switch_from_isr
08000a90 g     F .text	00000002 .hidden Vector15C
00000000 g       *ABS*	00000000 __ram7_end__
08000a90 g     F .text	00000002 .hidden Vector68
08001970 g     F .text	0000000c .hidden _idle_thread.lto_priv.111
20000400 g       .mstack	00000000 __main_stack_end__
08000630 g     F .text	00000064 .hidden Vector78
00000000 g       .ram5_init	00000000 __ram5_init__
08001a50 g     F .text	0000001a .hidden list_remove.lto_priv.39
20002148 g     O .bss	00000060 .hidden _stm32_dma_isr_redir
08000a90 g     F .text	00000002 .hidden _unhandled_exception
08000a90 g     F .text	00000002 .hidden Vector170
08002860 g     F .text	00000008 .hidden chSysUnlockFromISR.lto_priv.54
08000a90 g     F .text	00000002 .hidden Vector88
08001060 g     F .text	00000028 .hidden chThdCreate
20000400 g       .pstack	00000000 __main_thread_stack_base__
200021a8 g     O .bss	00000004 .hidden dma_streams_mask.lto_priv.0
080012c0 g     F .text	0000007c .hidden chVTDoSetI
08002c2c g       *ABS*	00000000 __ram7_init_text__
00000000 g       .ram3_init	00000000 __ram3_init__
08000a90 g     F .text	00000002 .hidden Vector104
08000a90 g     F .text	00000002 .hidden Vector184
08000a90 g     F .text	00000002 .hidden Vector10C
20000000 g       .rodata	00000000 __ram0_start__
080001cc g       .text	00000000 _port_exit_from_isr
00000000 g       .ram1_init	00000000 __ram1_init__
080001a0 g       vectors	00000000 __init_array_start
080016d0 g     F .text	0000002c .hidden chSchIsPreemptionRequired
08002c2c g       *ABS*	00000000 _textdata_start
08000a90 g     F .text	00000002 .hidden Vector14C
00000000 g       .rodata	00000000 __ram5_start__
08000a90 g     F .text	00000002 .hidden BusFault_Handler
08001ad0 g     F .text	0000004c .hidden _thread_init
08000a90 g     F .text	00000002 .hidden Vector50
20001f48 g     O .bss	00000064 .hidden ch
08001cf0 g     F .text	00000080 .hidden Led_HeartBeat
00000000 g       .ram2	00000000 __ram2_free__
08000a90 g     F .text	00000002 .hidden Vector194
08000a90 g     F .text	00000002 .hidden Vector154
10000000 g       .ram4	00000000 __ram4_free__
20010000 g       *ABS*	00000000 __ram0_end__
20000000 g       .mstack	00000000 __main_stack_base__
08000a90 g     F .text	00000002 .hidden Vector44
08000a90 g     F .text	00000002 .hidden Vector28
08002650 g     F .text	00000002 .hidden boardInit
08000a90 g     F .text	00000002 .hidden VectorB8
00000400 g       *ABS*	00000000 __main_stack_size__
08000a90 g     F .text	00000002 .hidden VectorFC
00000000 g       .ram7	00000000 __ram7_noinit__
20000800 g       .pstack	00000000 __process_stack_end__
08002890 g     F .text	00000012 .hidden chSemFastSignalI.lto_priv.65
08000a90 g     F .text	00000002 .hidden Vector34
08002640 g     F .text	00000008 __early_init
080008d0 g     F .text	00000064 .hidden Vector128
00000000 g       .rodata	00000000 __ram3_start__
08000a90 g     F .text	00000002 .hidden VectorA4
00000400 g       *ABS*	00000000 __process_stack_size__
08002810 g     F .text	00000020 .hidden queue_dequeue.lto_priv.64
08000a90 g     F .text	00000002 .hidden Vector20
08000a90 g     F .text	00000002 .hidden Vector18C
20002108 g     O .bss	00000020 .hidden UARTD2
08000a90 g     F .text	00000002 .hidden Vector174



Disassembly of section .text:

080001a0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80001a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
 80001a4:	ed2d 8a10 	vpush	{s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80001a8:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80001ac:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80001ae:	469d      	mov	sp, r3
#else
                ldr     sp, [r0, #CONTEXT_OFFSET]
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
 80001b0:	ecbd 8a10 	vpop	{s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80001b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080001b8 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80001b8:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80001ba:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80001be:	4628      	mov	r0, r5
                blx     r4
 80001c0:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 80001c2:	2000      	movs	r0, #0
                bl      chThdExit
 80001c4:	f000 ff74 	bl	80010b0 <chThdExit>

080001c8 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 80001c8:	f001 faba 	bl	8001740 <chSchDoReschedule>

080001cc <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80001cc:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80001ce:	e7fe      	b.n	80001ce <_port_exit_from_isr+0x2>

080001d0 <Reset_Handler>:
                .align  2
                .thumb_func
                .global Reset_Handler
Reset_Handler:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001d0:	b672      	cpsid	i

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001d2:	4834      	ldr	r0, [pc, #208]	; (80002a4 <endfiniloop+0x4>)
                msr     PSP, r0
 80001d4:	f380 8809 	msr	PSP, r0

#if CRT0_INIT_FPU == TRUE
                /* FPU FPCCR initialization.*/
                movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 80001d8:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_FPCCR_INIT >> 16
 80001dc:	f2cc 0000 	movt	r0, #49152	; 0xc000
                movw    r1, #SCB_FPCCR & 0xFFFF
 80001e0:	f64e 7134 	movw	r1, #61236	; 0xef34
                movt    r1, #SCB_FPCCR >> 16
 80001e4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001e8:	6008      	str	r0, [r1, #0]
                dsb
 80001ea:	f3bf 8f4f 	dsb	sy
                isb
 80001ee:	f3bf 8f6f 	isb	sy

                /* CPACR initialization.*/
                movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 80001f2:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_CPACR_INIT >> 16
 80001f6:	f2c0 00f0 	movt	r0, #240	; 0xf0
                movw    r1, #SCB_CPACR & 0xFFFF
 80001fa:	f64e 5188 	movw	r1, #60808	; 0xed88
                movt    r1, #SCB_CPACR >> 16
 80001fe:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000202:	6008      	str	r0, [r1, #0]
                dsb
 8000204:	f3bf 8f4f 	dsb	sy
                isb
 8000208:	f3bf 8f6f 	isb	sy

                /* FPU FPSCR initially cleared.*/
                mov     r0, #0
 800020c:	f04f 0000 	mov.w	r0, #0
                vmsr    FPSCR, r0
 8000210:	eee1 0a10 	vmsr	fpscr, r0

                /* FPU FPDSCR initially cleared.*/
                movw    r1, #SCB_FPDSCR & 0xFFFF
 8000214:	f64e 713c 	movw	r1, #61244	; 0xef3c
                movt    r1, #SCB_FPDSCR >> 16
 8000218:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 800021c:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA
 800021e:	2006      	movs	r0, #6
#else
                movs    r0, #CRT0_CONTROL_INIT
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 8000220:	f380 8814 	msr	CONTROL, r0
                isb
 8000224:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000228:	f001 f8aa 	bl	8001380 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 800022c:	f002 fa08 	bl	8002640 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 8000230:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000234:	491c      	ldr	r1, [pc, #112]	; (80002a8 <endfiniloop+0x8>)
                ldr     r2, =__main_stack_end__
 8000236:	4a1d      	ldr	r2, [pc, #116]	; (80002ac <endfiniloop+0xc>)

08000238 <msloop>:
msloop:
                cmp     r1, r2
 8000238:	4291      	cmp	r1, r2
                itt     lo
 800023a:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800023c:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 8000240:	e7fa      	bcc.n	8000238 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 8000242:	491b      	ldr	r1, [pc, #108]	; (80002b0 <endfiniloop+0x10>)
                ldr     r2, =__process_stack_end__
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <endfiniloop+0x4>)

08000246 <psloop>:
psloop:
                cmp     r1, r2
 8000246:	4291      	cmp	r1, r2
                itt     lo
 8000248:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800024a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800024e:	e7fa      	bcc.n	8000246 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 8000250:	4918      	ldr	r1, [pc, #96]	; (80002b4 <endfiniloop+0x14>)
                ldr     r2, =_data_start
 8000252:	4a19      	ldr	r2, [pc, #100]	; (80002b8 <endfiniloop+0x18>)
                ldr     r3, =_data_end
 8000254:	4b19      	ldr	r3, [pc, #100]	; (80002bc <endfiniloop+0x1c>)

08000256 <dloop>:
dloop:
                cmp     r2, r3
 8000256:	429a      	cmp	r2, r3
                ittt    lo
 8000258:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 800025a:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800025e:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 8000262:	e7f8      	bcc.n	8000256 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000264:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000266:	4916      	ldr	r1, [pc, #88]	; (80002c0 <endfiniloop+0x20>)
                ldr     r2, =_bss_end
 8000268:	4a16      	ldr	r2, [pc, #88]	; (80002c4 <endfiniloop+0x24>)

0800026a <bloop>:
bloop:
                cmp     r1, r2
 800026a:	4291      	cmp	r1, r2
                itt     lo
 800026c:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800026e:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 8000272:	e7fa      	bcc.n	800026a <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000274:	f001 f89c 	bl	80013b0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000278:	f001 f88a 	bl	8001390 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 800027c:	4c12      	ldr	r4, [pc, #72]	; (80002c8 <endfiniloop+0x28>)
                ldr     r5, =__init_array_end
 800027e:	4d13      	ldr	r5, [pc, #76]	; (80002cc <endfiniloop+0x2c>)

08000280 <initloop>:
initloop:
                cmp     r4, r5
 8000280:	42ac      	cmp	r4, r5
                bge     endinitloop
 8000282:	da03      	bge.n	800028c <endinitloop>
                ldr     r1, [r4], #4
 8000284:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000288:	4788      	blx	r1
                b       initloop
 800028a:	e7f9      	b.n	8000280 <initloop>

0800028c <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 800028c:	f000 f8e8 	bl	8000460 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 8000290:	4c0f      	ldr	r4, [pc, #60]	; (80002d0 <endfiniloop+0x30>)
                ldr     r5, =__fini_array_end
 8000292:	4d10      	ldr	r5, [pc, #64]	; (80002d4 <endfiniloop+0x34>)

08000294 <finiloop>:
finiloop:
                cmp     r4, r5
 8000294:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000296:	da03      	bge.n	80002a0 <endfiniloop>
                ldr     r1, [r4], #4
 8000298:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 800029c:	4788      	blx	r1
                b       finiloop
 800029e:	e7f9      	b.n	8000294 <finiloop>

080002a0 <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80002a0:	f001 b87e 	b.w	80013a0 <__default_exit>
Reset_Handler:
                /* Interrupts are globally masked initially.*/
                cpsid   i

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80002a4:	20000800 	.word	0x20000800
#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 80002a8:	20000000 	.word	0x20000000
                ldr     r2, =__main_stack_end__
 80002ac:	20000400 	.word	0x20000400
                blo     msloop

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 80002b0:	20000400 	.word	0x20000400
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 80002b4:	08002c2c 	.word	0x08002c2c
                ldr     r2, =_data_start
 80002b8:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 80002bc:	20000800 	.word	0x20000800

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
                ldr     r1, =_bss_start
 80002c0:	20000800 	.word	0x20000800
                ldr     r2, =_bss_end
 80002c4:	200021ac 	.word	0x200021ac
                /* Late initialization..*/
                bl      __late_init

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 80002c8:	080001a0 	.word	0x080001a0
                ldr     r5, =__init_array_end
 80002cc:	080001a0 	.word	0x080001a0
                /* Main program invocation, r0 contains the returned value.*/
                bl      main

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 80002d0:	080001a0 	.word	0x080001a0
                ldr     r5, =__fini_array_end
 80002d4:	080001a0 	.word	0x080001a0
	...

080002e0 <serve_usart_irq>:
/**
 * @brief   USART common service routine.
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void serve_usart_irq(UARTDriver *uartp) {
 80002e0:	b510      	push	{r4, lr}
 80002e2:	b086      	sub	sp, #24
 80002e4:	9001      	str	r0, [sp, #4]
  uint32_t isr;
  USART_TypeDef *u = uartp->usart;
 80002e6:	9b01      	ldr	r3, [sp, #4]
 80002e8:	689b      	ldr	r3, [r3, #8]
 80002ea:	9305      	str	r3, [sp, #20]
  uint32_t cr1 = u->CR1;
 80002ec:	9b05      	ldr	r3, [sp, #20]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	9304      	str	r3, [sp, #16]
  
  /* Reading and clearing status.*/
  isr = u->ISR;
 80002f2:	9b05      	ldr	r3, [sp, #20]
 80002f4:	69db      	ldr	r3, [r3, #28]
 80002f6:	9303      	str	r3, [sp, #12]
  u->ICR = isr;
 80002f8:	9b05      	ldr	r3, [sp, #20]
 80002fa:	9a03      	ldr	r2, [sp, #12]
 80002fc:	621a      	str	r2, [r3, #32]

  if (isr & (USART_ISR_LBDF | USART_ISR_ORE | USART_ISR_NE |
 80002fe:	9a03      	ldr	r2, [sp, #12]
 8000300:	f240 130f 	movw	r3, #271	; 0x10f
 8000304:	4013      	ands	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	d00e      	beq.n	8000328 <serve_usart_irq+0x48>
             USART_ISR_FE   | USART_ISR_PE)) {
    _uart_rx_error_isr_code(uartp, translate_errors(isr));
 800030a:	9b01      	ldr	r3, [sp, #4]
 800030c:	685b      	ldr	r3, [r3, #4]
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d009      	beq.n	8000328 <serve_usart_irq+0x48>
 8000314:	9b01      	ldr	r3, [sp, #4]
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	699c      	ldr	r4, [r3, #24]
 800031a:	9803      	ldr	r0, [sp, #12]
 800031c:	f000 fe58 	bl	8000fd0 <translate_errors.lto_priv.4>
 8000320:	4603      	mov	r3, r0
 8000322:	4619      	mov	r1, r3
 8000324:	9801      	ldr	r0, [sp, #4]
 8000326:	47a0      	blx	r4
  }

  if ((isr & USART_ISR_TC) && (cr1 & USART_CR1_TCIE)) {
 8000328:	9b03      	ldr	r3, [sp, #12]
 800032a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800032e:	2b00      	cmp	r3, #0
 8000330:	d013      	beq.n	800035a <serve_usart_irq+0x7a>
 8000332:	9b04      	ldr	r3, [sp, #16]
 8000334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000338:	2b00      	cmp	r3, #0
 800033a:	d00e      	beq.n	800035a <serve_usart_irq+0x7a>
    /* TC interrupt disabled.*/
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800033c:	9b04      	ldr	r3, [sp, #16]
 800033e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000342:	9b05      	ldr	r3, [sp, #20]
 8000344:	601a      	str	r2, [r3, #0]

    /* End of transmission, a callback is generated.*/
    _uart_tx2_isr_code(uartp);
 8000346:	9b01      	ldr	r3, [sp, #4]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	685b      	ldr	r3, [r3, #4]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d004      	beq.n	800035a <serve_usart_irq+0x7a>
 8000350:	9b01      	ldr	r3, [sp, #4]
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	9801      	ldr	r0, [sp, #4]
 8000358:	4798      	blx	r3
  }

  if ((cr1 & USART_CR1_CMIE) && (isr & USART_ISR_CMF)) {
 800035a:	9b04      	ldr	r3, [sp, #16]
 800035c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000360:	2b00      	cmp	r3, #0
 8000362:	d00e      	beq.n	8000382 <serve_usart_irq+0xa2>
 8000364:	9b03      	ldr	r3, [sp, #12]
 8000366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800036a:	2b00      	cmp	r3, #0
 800036c:	d009      	beq.n	8000382 <serve_usart_irq+0xa2>
	if (uartp->config->rxmatch_cb != NULL) {
 800036e:	9b01      	ldr	r3, [sp, #4]
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	691b      	ldr	r3, [r3, #16]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d004      	beq.n	8000382 <serve_usart_irq+0xa2>
	  uartp->config->rxmatch_cb(uartp);
 8000378:	9b01      	ldr	r3, [sp, #4]
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	691b      	ldr	r3, [r3, #16]
 800037e:	9801      	ldr	r0, [sp, #4]
 8000380:	4798      	blx	r3
	}
  }

  if ((cr1 & USART_CR1_IDLEIE) && (isr & USART_ISR_IDLE)) {
 8000382:	9b04      	ldr	r3, [sp, #16]
 8000384:	f003 0310 	and.w	r3, r3, #16
 8000388:	2b00      	cmp	r3, #0
 800038a:	d00e      	beq.n	80003aa <serve_usart_irq+0xca>
 800038c:	9b03      	ldr	r3, [sp, #12]
 800038e:	f003 0310 	and.w	r3, r3, #16
 8000392:	2b00      	cmp	r3, #0
 8000394:	d009      	beq.n	80003aa <serve_usart_irq+0xca>
	/* Receiver in active state, a callback is generated, if enabled, after
	   a completed transfer.*/
	if (uartp->config->rxidle_cb != NULL) {
 8000396:	9b01      	ldr	r3, [sp, #4]
 8000398:	685b      	ldr	r3, [r3, #4]
 800039a:	68db      	ldr	r3, [r3, #12]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d004      	beq.n	80003aa <serve_usart_irq+0xca>
	  uartp->config->rxidle_cb(uartp);
 80003a0:	9b01      	ldr	r3, [sp, #4]
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	68db      	ldr	r3, [r3, #12]
 80003a6:	9801      	ldr	r0, [sp, #4]
 80003a8:	4798      	blx	r3
	}
  }
}
 80003aa:	b006      	add	sp, #24
 80003ac:	bd10      	pop	{r4, pc}
 80003ae:	bf00      	nop

080003b0 <VectorD8>:
/**
 * @brief   USART2 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80003b0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD2);
 80003b2:	4803      	ldr	r0, [pc, #12]	; (80003c0 <VectorD8+0x10>)
 80003b4:	f7ff ff94 	bl	80002e0 <serve_usart_irq>

  OSAL_IRQ_EPILOGUE();
 80003b8:	f002 f992 	bl	80026e0 <_port_irq_epilogue>
}
 80003bc:	bd08      	pop	{r3, pc}
 80003be:	bf00      	nop
 80003c0:	20002108 	.word	0x20002108
	...

080003d0 <VectorDC>:
/**
 * @brief   USART3 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 80003d0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD3);
 80003d2:	4803      	ldr	r0, [pc, #12]	; (80003e0 <VectorDC+0x10>)
 80003d4:	f7ff ff84 	bl	80002e0 <serve_usart_irq>

  OSAL_IRQ_EPILOGUE();
 80003d8:	f002 f982 	bl	80026e0 <_port_irq_epilogue>
}
 80003dc:	bd08      	pop	{r3, pc}
 80003de:	bf00      	nop
 80003e0:	20002128 	.word	0x20002128
	...

080003f0 <uart_lld_init>:
/**
 * @brief   Low level UART driver initialization.
 *
 * @notapi
 */
void uart_lld_init(void) {
 80003f0:	b508      	push	{r3, lr}
  UARTD1.dmarx   = STM32_DMA_STREAM(STM32_UART_USART1_RX_DMA_STREAM);
  UARTD1.dmatx   = STM32_DMA_STREAM(STM32_UART_USART1_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART2
  uartObjectInit(&UARTD2);
 80003f2:	4812      	ldr	r0, [pc, #72]	; (800043c <uart_lld_init+0x4c>)
 80003f4:	f000 fddc 	bl	8000fb0 <uartObjectInit>
  UARTD2.usart   = USART2;
 80003f8:	4b10      	ldr	r3, [pc, #64]	; (800043c <uart_lld_init+0x4c>)
 80003fa:	4a11      	ldr	r2, [pc, #68]	; (8000440 <uart_lld_init+0x50>)
 80003fc:	609a      	str	r2, [r3, #8]
  UARTD2.clock   = STM32_USART2CLK;
 80003fe:	4b0f      	ldr	r3, [pc, #60]	; (800043c <uart_lld_init+0x4c>)
 8000400:	4a10      	ldr	r2, [pc, #64]	; (8000444 <uart_lld_init+0x54>)
 8000402:	60da      	str	r2, [r3, #12]
  UARTD2.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8000404:	4b0d      	ldr	r3, [pc, #52]	; (800043c <uart_lld_init+0x4c>)
 8000406:	2208      	movs	r2, #8
 8000408:	611a      	str	r2, [r3, #16]
  UARTD2.dmarx   = STM32_DMA_STREAM(STM32_UART_USART2_RX_DMA_STREAM);
 800040a:	4b0c      	ldr	r3, [pc, #48]	; (800043c <uart_lld_init+0x4c>)
 800040c:	4a0e      	ldr	r2, [pc, #56]	; (8000448 <uart_lld_init+0x58>)
 800040e:	615a      	str	r2, [r3, #20]
  UARTD2.dmatx   = STM32_DMA_STREAM(STM32_UART_USART2_TX_DMA_STREAM);
 8000410:	4b0a      	ldr	r3, [pc, #40]	; (800043c <uart_lld_init+0x4c>)
 8000412:	4a0e      	ldr	r2, [pc, #56]	; (800044c <uart_lld_init+0x5c>)
 8000414:	619a      	str	r2, [r3, #24]
#endif

#if STM32_UART_USE_USART3
  uartObjectInit(&UARTD3);
 8000416:	480e      	ldr	r0, [pc, #56]	; (8000450 <uart_lld_init+0x60>)
 8000418:	f000 fdca 	bl	8000fb0 <uartObjectInit>
  UARTD3.usart   = USART3;
 800041c:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <uart_lld_init+0x60>)
 800041e:	4a0d      	ldr	r2, [pc, #52]	; (8000454 <uart_lld_init+0x64>)
 8000420:	609a      	str	r2, [r3, #8]
  UARTD3.clock   = STM32_USART3CLK;
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <uart_lld_init+0x60>)
 8000424:	4a07      	ldr	r2, [pc, #28]	; (8000444 <uart_lld_init+0x54>)
 8000426:	60da      	str	r2, [r3, #12]
  UARTD3.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8000428:	4b09      	ldr	r3, [pc, #36]	; (8000450 <uart_lld_init+0x60>)
 800042a:	2208      	movs	r2, #8
 800042c:	611a      	str	r2, [r3, #16]
  UARTD3.dmarx   = STM32_DMA_STREAM(STM32_UART_USART3_RX_DMA_STREAM);
 800042e:	4b08      	ldr	r3, [pc, #32]	; (8000450 <uart_lld_init+0x60>)
 8000430:	4a09      	ldr	r2, [pc, #36]	; (8000458 <uart_lld_init+0x68>)
 8000432:	615a      	str	r2, [r3, #20]
  UARTD3.dmatx   = STM32_DMA_STREAM(STM32_UART_USART3_TX_DMA_STREAM);
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <uart_lld_init+0x60>)
 8000436:	4a09      	ldr	r2, [pc, #36]	; (800045c <uart_lld_init+0x6c>)
 8000438:	619a      	str	r2, [r3, #24]
  UARTD8.clock   = STM32_UART8CLK;
  UARTD8.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD8.dmarx   = STM32_DMA_STREAM(STM32_UART_UART8_RX_DMA_STREAM);
  UARTD8.dmatx   = STM32_DMA_STREAM(STM32_UART_UART8_TX_DMA_STREAM);
#endif
}
 800043a:	bd08      	pop	{r3, pc}
 800043c:	20002108 	.word	0x20002108
 8000440:	40004400 	.word	0x40004400
 8000444:	0112a880 	.word	0x0112a880
 8000448:	08002ba0 	.word	0x08002ba0
 800044c:	08002bb4 	.word	0x08002bb4
 8000450:	20002128 	.word	0x20002128
 8000454:	40004800 	.word	0x40004800
 8000458:	08002b64 	.word	0x08002b64
 800045c:	08002b50 	.word	0x08002b50

08000460 <main>:
#include "Led.h"

/*
 * Application entry point.
 */
void main(void) {
 8000460:	b508      	push	{r3, lr}
  /*
   * System initializations.
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   */
  halInit();
 8000462:	f000 ffe5 	bl	8001430 <halInit>

  /*
     * Activates the serial driver 2 using the driver default configuration.
     */
  palSetPadMode(GPIOC, 10, PAL_MODE_ALTERNATE(7));	/* USART3_TX */
 8000466:	f240 3282 	movw	r2, #898	; 0x382
 800046a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800046e:	480e      	ldr	r0, [pc, #56]	; (80004a8 <main+0x48>)
 8000470:	f000 fc66 	bl	8000d40 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOC, 11, PAL_MODE_ALTERNATE(7));	/* USART3_RX */
 8000474:	f240 3282 	movw	r2, #898	; 0x382
 8000478:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800047c:	480a      	ldr	r0, [pc, #40]	; (80004a8 <main+0x48>)
 800047e:	f000 fc5f 	bl	8000d40 <_pal_lld_setgroupmode>

  Led_Init(10u);
 8000482:	200a      	movs	r0, #10
 8000484:	f001 fb7c 	bl	8001b80 <Led_Init>
  Led_HeartBeat(LED_ID_USER0, 100u, 2u, 500u);
 8000488:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800048c:	2202      	movs	r2, #2
 800048e:	2164      	movs	r1, #100	; 0x64
 8000490:	2000      	movs	r0, #0
 8000492:	f001 fc2d 	bl	8001cf0 <Led_HeartBeat>

  /*
   * Creates the threads.
   */
  Os_Init();
 8000496:	f001 ff6b 	bl	8002370 <Os_Init>
  Os_StartTasks();
 800049a:	f001 ffd9 	bl	8002450 <Os_StartTasks>

  chThdExit(0);
 800049e:	2000      	movs	r0, #0
 80004a0:	f000 fe06 	bl	80010b0 <chThdExit>
}
 80004a4:	bd08      	pop	{r3, pc}
 80004a6:	bf00      	nop
 80004a8:	48000800 	.word	0x48000800
 80004ac:	00000000 	.word	0x00000000

080004b0 <nvicSetSystemHandlerPriority>:
 * @brief   Changes the priority of a system handler.
 *
 * @param[in] handler   the system handler number
 * @param[in] prio      the system handler priority
 */
void nvicSetSystemHandlerPriority(uint32_t handler, uint32_t prio) {
 80004b0:	b082      	sub	sp, #8
 80004b2:	9001      	str	r0, [sp, #4]
 80004b4:	9100      	str	r1, [sp, #0]
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
#else
  SCB->SHP[handler] = NVIC_PRIORITY_MASK(prio);
 80004b6:	4a06      	ldr	r2, [pc, #24]	; (80004d0 <nvicSetSystemHandlerPriority+0x20>)
 80004b8:	9b00      	ldr	r3, [sp, #0]
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	011b      	lsls	r3, r3, #4
 80004be:	b2d9      	uxtb	r1, r3
 80004c0:	9b01      	ldr	r3, [sp, #4]
 80004c2:	4413      	add	r3, r2
 80004c4:	3318      	adds	r3, #24
 80004c6:	460a      	mov	r2, r1
 80004c8:	701a      	strb	r2, [r3, #0]
#endif
}
 80004ca:	b002      	add	sp, #8
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	e000ed00 	.word	0xe000ed00
	...

080004e0 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 80004e0:	b500      	push	{lr}
 80004e2:	b083      	sub	sp, #12

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);
 80004e4:	2300      	movs	r3, #0
 80004e6:	9301      	str	r3, [sp, #4]
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <Vector6C+0x5c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	40d3      	lsrs	r3, r2
 80004f0:	f003 030f 	and.w	r3, r3, #15
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	9b00      	ldr	r3, [sp, #0]
 80004f8:	f003 030f 	and.w	r3, r3, #15
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d017      	beq.n	8000530 <Vector6C+0x50>
 8000500:	4a0e      	ldr	r2, [pc, #56]	; (800053c <Vector6C+0x5c>)
 8000502:	2300      	movs	r3, #0
 8000504:	4619      	mov	r1, r3
 8000506:	9b00      	ldr	r3, [sp, #0]
 8000508:	408b      	lsls	r3, r1
 800050a:	6053      	str	r3, [r2, #4]
 800050c:	4a0c      	ldr	r2, [pc, #48]	; (8000540 <Vector6C+0x60>)
 800050e:	9b01      	ldr	r3, [sp, #4]
 8000510:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d00b      	beq.n	8000530 <Vector6C+0x50>
 8000518:	4a09      	ldr	r2, [pc, #36]	; (8000540 <Vector6C+0x60>)
 800051a:	9b01      	ldr	r3, [sp, #4]
 800051c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000520:	4907      	ldr	r1, [pc, #28]	; (8000540 <Vector6C+0x60>)
 8000522:	9b01      	ldr	r3, [sp, #4]
 8000524:	00db      	lsls	r3, r3, #3
 8000526:	440b      	add	r3, r1
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	9900      	ldr	r1, [sp, #0]
 800052c:	4618      	mov	r0, r3
 800052e:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8000530:	f002 f8d6 	bl	80026e0 <_port_irq_epilogue>
}
 8000534:	b003      	add	sp, #12
 8000536:	f85d fb04 	ldr.w	pc, [sp], #4
 800053a:	bf00      	nop
 800053c:	40020000 	.word	0x40020000
 8000540:	20002148 	.word	0x20002148
	...

08000550 <Vector70>:
/**
 * @brief   DMA1 stream 2 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8000550:	b500      	push	{lr}
 8000552:	b083      	sub	sp, #12

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8000554:	2301      	movs	r3, #1
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	4b14      	ldr	r3, [pc, #80]	; (80005ac <Vector70+0x5c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2204      	movs	r2, #4
 800055e:	40d3      	lsrs	r3, r2
 8000560:	f003 030f 	and.w	r3, r3, #15
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	9b00      	ldr	r3, [sp, #0]
 8000568:	f003 030f 	and.w	r3, r3, #15
 800056c:	2b00      	cmp	r3, #0
 800056e:	d017      	beq.n	80005a0 <Vector70+0x50>
 8000570:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <Vector70+0x5c>)
 8000572:	2304      	movs	r3, #4
 8000574:	4619      	mov	r1, r3
 8000576:	9b00      	ldr	r3, [sp, #0]
 8000578:	408b      	lsls	r3, r1
 800057a:	6053      	str	r3, [r2, #4]
 800057c:	4a0c      	ldr	r2, [pc, #48]	; (80005b0 <Vector70+0x60>)
 800057e:	9b01      	ldr	r3, [sp, #4]
 8000580:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d00b      	beq.n	80005a0 <Vector70+0x50>
 8000588:	4a09      	ldr	r2, [pc, #36]	; (80005b0 <Vector70+0x60>)
 800058a:	9b01      	ldr	r3, [sp, #4]
 800058c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000590:	4907      	ldr	r1, [pc, #28]	; (80005b0 <Vector70+0x60>)
 8000592:	9b01      	ldr	r3, [sp, #4]
 8000594:	00db      	lsls	r3, r3, #3
 8000596:	440b      	add	r3, r1
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	9900      	ldr	r1, [sp, #0]
 800059c:	4618      	mov	r0, r3
 800059e:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80005a0:	f002 f89e 	bl	80026e0 <_port_irq_epilogue>
}
 80005a4:	b003      	add	sp, #12
 80005a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80005aa:	bf00      	nop
 80005ac:	40020000 	.word	0x40020000
 80005b0:	20002148 	.word	0x20002148
	...

080005c0 <Vector74>:
/**
 * @brief   DMA1 stream 3 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 80005c0:	b500      	push	{lr}
 80005c2:	b083      	sub	sp, #12

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 80005c4:	2302      	movs	r3, #2
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	4b14      	ldr	r3, [pc, #80]	; (800061c <Vector74+0x5c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2208      	movs	r2, #8
 80005ce:	40d3      	lsrs	r3, r2
 80005d0:	f003 030f 	and.w	r3, r3, #15
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	9b00      	ldr	r3, [sp, #0]
 80005d8:	f003 030f 	and.w	r3, r3, #15
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d017      	beq.n	8000610 <Vector74+0x50>
 80005e0:	4a0e      	ldr	r2, [pc, #56]	; (800061c <Vector74+0x5c>)
 80005e2:	2308      	movs	r3, #8
 80005e4:	4619      	mov	r1, r3
 80005e6:	9b00      	ldr	r3, [sp, #0]
 80005e8:	408b      	lsls	r3, r1
 80005ea:	6053      	str	r3, [r2, #4]
 80005ec:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <Vector74+0x60>)
 80005ee:	9b01      	ldr	r3, [sp, #4]
 80005f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d00b      	beq.n	8000610 <Vector74+0x50>
 80005f8:	4a09      	ldr	r2, [pc, #36]	; (8000620 <Vector74+0x60>)
 80005fa:	9b01      	ldr	r3, [sp, #4]
 80005fc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000600:	4907      	ldr	r1, [pc, #28]	; (8000620 <Vector74+0x60>)
 8000602:	9b01      	ldr	r3, [sp, #4]
 8000604:	00db      	lsls	r3, r3, #3
 8000606:	440b      	add	r3, r1
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	9900      	ldr	r1, [sp, #0]
 800060c:	4618      	mov	r0, r3
 800060e:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8000610:	f002 f866 	bl	80026e0 <_port_irq_epilogue>
}
 8000614:	b003      	add	sp, #12
 8000616:	f85d fb04 	ldr.w	pc, [sp], #4
 800061a:	bf00      	nop
 800061c:	40020000 	.word	0x40020000
 8000620:	20002148 	.word	0x20002148
	...

08000630 <Vector78>:
/**
 * @brief   DMA1 stream 4 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8000630:	b500      	push	{lr}
 8000632:	b083      	sub	sp, #12

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8000634:	2303      	movs	r3, #3
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <Vector78+0x5c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	220c      	movs	r2, #12
 800063e:	40d3      	lsrs	r3, r2
 8000640:	f003 030f 	and.w	r3, r3, #15
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	9b00      	ldr	r3, [sp, #0]
 8000648:	f003 030f 	and.w	r3, r3, #15
 800064c:	2b00      	cmp	r3, #0
 800064e:	d017      	beq.n	8000680 <Vector78+0x50>
 8000650:	4a0e      	ldr	r2, [pc, #56]	; (800068c <Vector78+0x5c>)
 8000652:	230c      	movs	r3, #12
 8000654:	4619      	mov	r1, r3
 8000656:	9b00      	ldr	r3, [sp, #0]
 8000658:	408b      	lsls	r3, r1
 800065a:	6053      	str	r3, [r2, #4]
 800065c:	4a0c      	ldr	r2, [pc, #48]	; (8000690 <Vector78+0x60>)
 800065e:	9b01      	ldr	r3, [sp, #4]
 8000660:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d00b      	beq.n	8000680 <Vector78+0x50>
 8000668:	4a09      	ldr	r2, [pc, #36]	; (8000690 <Vector78+0x60>)
 800066a:	9b01      	ldr	r3, [sp, #4]
 800066c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000670:	4907      	ldr	r1, [pc, #28]	; (8000690 <Vector78+0x60>)
 8000672:	9b01      	ldr	r3, [sp, #4]
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	440b      	add	r3, r1
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	9900      	ldr	r1, [sp, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8000680:	f002 f82e 	bl	80026e0 <_port_irq_epilogue>
}
 8000684:	b003      	add	sp, #12
 8000686:	f85d fb04 	ldr.w	pc, [sp], #4
 800068a:	bf00      	nop
 800068c:	40020000 	.word	0x40020000
 8000690:	20002148 	.word	0x20002148
	...

080006a0 <Vector7C>:
/**
 * @brief   DMA1 stream 5 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 80006a0:	b500      	push	{lr}
 80006a2:	b083      	sub	sp, #12

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 80006a4:	2304      	movs	r3, #4
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <Vector7C+0x5c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2210      	movs	r2, #16
 80006ae:	40d3      	lsrs	r3, r2
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	9b00      	ldr	r3, [sp, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d017      	beq.n	80006f0 <Vector7C+0x50>
 80006c0:	4a0e      	ldr	r2, [pc, #56]	; (80006fc <Vector7C+0x5c>)
 80006c2:	2310      	movs	r3, #16
 80006c4:	4619      	mov	r1, r3
 80006c6:	9b00      	ldr	r3, [sp, #0]
 80006c8:	408b      	lsls	r3, r1
 80006ca:	6053      	str	r3, [r2, #4]
 80006cc:	4a0c      	ldr	r2, [pc, #48]	; (8000700 <Vector7C+0x60>)
 80006ce:	9b01      	ldr	r3, [sp, #4]
 80006d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d00b      	beq.n	80006f0 <Vector7C+0x50>
 80006d8:	4a09      	ldr	r2, [pc, #36]	; (8000700 <Vector7C+0x60>)
 80006da:	9b01      	ldr	r3, [sp, #4]
 80006dc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80006e0:	4907      	ldr	r1, [pc, #28]	; (8000700 <Vector7C+0x60>)
 80006e2:	9b01      	ldr	r3, [sp, #4]
 80006e4:	00db      	lsls	r3, r3, #3
 80006e6:	440b      	add	r3, r1
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	9900      	ldr	r1, [sp, #0]
 80006ec:	4618      	mov	r0, r3
 80006ee:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80006f0:	f001 fff6 	bl	80026e0 <_port_irq_epilogue>
}
 80006f4:	b003      	add	sp, #12
 80006f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80006fa:	bf00      	nop
 80006fc:	40020000 	.word	0x40020000
 8000700:	20002148 	.word	0x20002148
	...

08000710 <Vector80>:
/**
 * @brief   DMA1 stream 6 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8000710:	b500      	push	{lr}
 8000712:	b083      	sub	sp, #12

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8000714:	2305      	movs	r3, #5
 8000716:	9301      	str	r3, [sp, #4]
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <Vector80+0x5c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2214      	movs	r2, #20
 800071e:	40d3      	lsrs	r3, r2
 8000720:	f003 030f 	and.w	r3, r3, #15
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	9b00      	ldr	r3, [sp, #0]
 8000728:	f003 030f 	and.w	r3, r3, #15
 800072c:	2b00      	cmp	r3, #0
 800072e:	d017      	beq.n	8000760 <Vector80+0x50>
 8000730:	4a0e      	ldr	r2, [pc, #56]	; (800076c <Vector80+0x5c>)
 8000732:	2314      	movs	r3, #20
 8000734:	4619      	mov	r1, r3
 8000736:	9b00      	ldr	r3, [sp, #0]
 8000738:	408b      	lsls	r3, r1
 800073a:	6053      	str	r3, [r2, #4]
 800073c:	4a0c      	ldr	r2, [pc, #48]	; (8000770 <Vector80+0x60>)
 800073e:	9b01      	ldr	r3, [sp, #4]
 8000740:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d00b      	beq.n	8000760 <Vector80+0x50>
 8000748:	4a09      	ldr	r2, [pc, #36]	; (8000770 <Vector80+0x60>)
 800074a:	9b01      	ldr	r3, [sp, #4]
 800074c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000750:	4907      	ldr	r1, [pc, #28]	; (8000770 <Vector80+0x60>)
 8000752:	9b01      	ldr	r3, [sp, #4]
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	440b      	add	r3, r1
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	9900      	ldr	r1, [sp, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8000760:	f001 ffbe 	bl	80026e0 <_port_irq_epilogue>
}
 8000764:	b003      	add	sp, #12
 8000766:	f85d fb04 	ldr.w	pc, [sp], #4
 800076a:	bf00      	nop
 800076c:	40020000 	.word	0x40020000
 8000770:	20002148 	.word	0x20002148
	...

08000780 <Vector84>:
/**
 * @brief   DMA1 stream 7 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8000780:	b500      	push	{lr}
 8000782:	b083      	sub	sp, #12

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8000784:	2306      	movs	r3, #6
 8000786:	9301      	str	r3, [sp, #4]
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <Vector84+0x5c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2218      	movs	r2, #24
 800078e:	40d3      	lsrs	r3, r2
 8000790:	f003 030f 	and.w	r3, r3, #15
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	9b00      	ldr	r3, [sp, #0]
 8000798:	f003 030f 	and.w	r3, r3, #15
 800079c:	2b00      	cmp	r3, #0
 800079e:	d017      	beq.n	80007d0 <Vector84+0x50>
 80007a0:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <Vector84+0x5c>)
 80007a2:	2318      	movs	r3, #24
 80007a4:	4619      	mov	r1, r3
 80007a6:	9b00      	ldr	r3, [sp, #0]
 80007a8:	408b      	lsls	r3, r1
 80007aa:	6053      	str	r3, [r2, #4]
 80007ac:	4a0c      	ldr	r2, [pc, #48]	; (80007e0 <Vector84+0x60>)
 80007ae:	9b01      	ldr	r3, [sp, #4]
 80007b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d00b      	beq.n	80007d0 <Vector84+0x50>
 80007b8:	4a09      	ldr	r2, [pc, #36]	; (80007e0 <Vector84+0x60>)
 80007ba:	9b01      	ldr	r3, [sp, #4]
 80007bc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80007c0:	4907      	ldr	r1, [pc, #28]	; (80007e0 <Vector84+0x60>)
 80007c2:	9b01      	ldr	r3, [sp, #4]
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	440b      	add	r3, r1
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	9900      	ldr	r1, [sp, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80007d0:	f001 ff86 	bl	80026e0 <_port_irq_epilogue>
}
 80007d4:	b003      	add	sp, #12
 80007d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80007da:	bf00      	nop
 80007dc:	40020000 	.word	0x40020000
 80007e0:	20002148 	.word	0x20002148
	...

080007f0 <Vector120>:
/**
 * @brief   DMA2 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 80007f0:	b500      	push	{lr}
 80007f2:	b083      	sub	sp, #12

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM1);
 80007f4:	2307      	movs	r3, #7
 80007f6:	9301      	str	r3, [sp, #4]
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <Vector120+0x5c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2200      	movs	r2, #0
 80007fe:	40d3      	lsrs	r3, r2
 8000800:	f003 030f 	and.w	r3, r3, #15
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	9b00      	ldr	r3, [sp, #0]
 8000808:	f003 030f 	and.w	r3, r3, #15
 800080c:	2b00      	cmp	r3, #0
 800080e:	d017      	beq.n	8000840 <Vector120+0x50>
 8000810:	4a0e      	ldr	r2, [pc, #56]	; (800084c <Vector120+0x5c>)
 8000812:	2300      	movs	r3, #0
 8000814:	4619      	mov	r1, r3
 8000816:	9b00      	ldr	r3, [sp, #0]
 8000818:	408b      	lsls	r3, r1
 800081a:	6053      	str	r3, [r2, #4]
 800081c:	4a0c      	ldr	r2, [pc, #48]	; (8000850 <Vector120+0x60>)
 800081e:	9b01      	ldr	r3, [sp, #4]
 8000820:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d00b      	beq.n	8000840 <Vector120+0x50>
 8000828:	4a09      	ldr	r2, [pc, #36]	; (8000850 <Vector120+0x60>)
 800082a:	9b01      	ldr	r3, [sp, #4]
 800082c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000830:	4907      	ldr	r1, [pc, #28]	; (8000850 <Vector120+0x60>)
 8000832:	9b01      	ldr	r3, [sp, #4]
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	440b      	add	r3, r1
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	9900      	ldr	r1, [sp, #0]
 800083c:	4618      	mov	r0, r3
 800083e:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8000840:	f001 ff4e 	bl	80026e0 <_port_irq_epilogue>
}
 8000844:	b003      	add	sp, #12
 8000846:	f85d fb04 	ldr.w	pc, [sp], #4
 800084a:	bf00      	nop
 800084c:	40020400 	.word	0x40020400
 8000850:	20002148 	.word	0x20002148
	...

08000860 <Vector124>:
/**
 * @brief   DMA2 stream 2 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8000860:	b500      	push	{lr}
 8000862:	b083      	sub	sp, #12

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM2);
 8000864:	2308      	movs	r3, #8
 8000866:	9301      	str	r3, [sp, #4]
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <Vector124+0x5c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2204      	movs	r2, #4
 800086e:	40d3      	lsrs	r3, r2
 8000870:	f003 030f 	and.w	r3, r3, #15
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	9b00      	ldr	r3, [sp, #0]
 8000878:	f003 030f 	and.w	r3, r3, #15
 800087c:	2b00      	cmp	r3, #0
 800087e:	d017      	beq.n	80008b0 <Vector124+0x50>
 8000880:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <Vector124+0x5c>)
 8000882:	2304      	movs	r3, #4
 8000884:	4619      	mov	r1, r3
 8000886:	9b00      	ldr	r3, [sp, #0]
 8000888:	408b      	lsls	r3, r1
 800088a:	6053      	str	r3, [r2, #4]
 800088c:	4a0c      	ldr	r2, [pc, #48]	; (80008c0 <Vector124+0x60>)
 800088e:	9b01      	ldr	r3, [sp, #4]
 8000890:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d00b      	beq.n	80008b0 <Vector124+0x50>
 8000898:	4a09      	ldr	r2, [pc, #36]	; (80008c0 <Vector124+0x60>)
 800089a:	9b01      	ldr	r3, [sp, #4]
 800089c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80008a0:	4907      	ldr	r1, [pc, #28]	; (80008c0 <Vector124+0x60>)
 80008a2:	9b01      	ldr	r3, [sp, #4]
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	440b      	add	r3, r1
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	9900      	ldr	r1, [sp, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80008b0:	f001 ff16 	bl	80026e0 <_port_irq_epilogue>
}
 80008b4:	b003      	add	sp, #12
 80008b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80008ba:	bf00      	nop
 80008bc:	40020400 	.word	0x40020400
 80008c0:	20002148 	.word	0x20002148
	...

080008d0 <Vector128>:
/**
 * @brief   DMA2 stream 3 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 80008d0:	b500      	push	{lr}
 80008d2:	b083      	sub	sp, #12

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM3);
 80008d4:	2309      	movs	r3, #9
 80008d6:	9301      	str	r3, [sp, #4]
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <Vector128+0x5c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2208      	movs	r2, #8
 80008de:	40d3      	lsrs	r3, r2
 80008e0:	f003 030f 	and.w	r3, r3, #15
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	9b00      	ldr	r3, [sp, #0]
 80008e8:	f003 030f 	and.w	r3, r3, #15
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d017      	beq.n	8000920 <Vector128+0x50>
 80008f0:	4a0e      	ldr	r2, [pc, #56]	; (800092c <Vector128+0x5c>)
 80008f2:	2308      	movs	r3, #8
 80008f4:	4619      	mov	r1, r3
 80008f6:	9b00      	ldr	r3, [sp, #0]
 80008f8:	408b      	lsls	r3, r1
 80008fa:	6053      	str	r3, [r2, #4]
 80008fc:	4a0c      	ldr	r2, [pc, #48]	; (8000930 <Vector128+0x60>)
 80008fe:	9b01      	ldr	r3, [sp, #4]
 8000900:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d00b      	beq.n	8000920 <Vector128+0x50>
 8000908:	4a09      	ldr	r2, [pc, #36]	; (8000930 <Vector128+0x60>)
 800090a:	9b01      	ldr	r3, [sp, #4]
 800090c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000910:	4907      	ldr	r1, [pc, #28]	; (8000930 <Vector128+0x60>)
 8000912:	9b01      	ldr	r3, [sp, #4]
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	440b      	add	r3, r1
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	9900      	ldr	r1, [sp, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8000920:	f001 fede 	bl	80026e0 <_port_irq_epilogue>
}
 8000924:	b003      	add	sp, #12
 8000926:	f85d fb04 	ldr.w	pc, [sp], #4
 800092a:	bf00      	nop
 800092c:	40020400 	.word	0x40020400
 8000930:	20002148 	.word	0x20002148
	...

08000940 <Vector12C>:
/**
 * @brief   DMA2 stream 4 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8000940:	b500      	push	{lr}
 8000942:	b083      	sub	sp, #12

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM4);
 8000944:	230a      	movs	r3, #10
 8000946:	9301      	str	r3, [sp, #4]
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <Vector12C+0x5c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	220c      	movs	r2, #12
 800094e:	40d3      	lsrs	r3, r2
 8000950:	f003 030f 	and.w	r3, r3, #15
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	9b00      	ldr	r3, [sp, #0]
 8000958:	f003 030f 	and.w	r3, r3, #15
 800095c:	2b00      	cmp	r3, #0
 800095e:	d017      	beq.n	8000990 <Vector12C+0x50>
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <Vector12C+0x5c>)
 8000962:	230c      	movs	r3, #12
 8000964:	4619      	mov	r1, r3
 8000966:	9b00      	ldr	r3, [sp, #0]
 8000968:	408b      	lsls	r3, r1
 800096a:	6053      	str	r3, [r2, #4]
 800096c:	4a0c      	ldr	r2, [pc, #48]	; (80009a0 <Vector12C+0x60>)
 800096e:	9b01      	ldr	r3, [sp, #4]
 8000970:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d00b      	beq.n	8000990 <Vector12C+0x50>
 8000978:	4a09      	ldr	r2, [pc, #36]	; (80009a0 <Vector12C+0x60>)
 800097a:	9b01      	ldr	r3, [sp, #4]
 800097c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000980:	4907      	ldr	r1, [pc, #28]	; (80009a0 <Vector12C+0x60>)
 8000982:	9b01      	ldr	r3, [sp, #4]
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	440b      	add	r3, r1
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	9900      	ldr	r1, [sp, #0]
 800098c:	4618      	mov	r0, r3
 800098e:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8000990:	f001 fea6 	bl	80026e0 <_port_irq_epilogue>
}
 8000994:	b003      	add	sp, #12
 8000996:	f85d fb04 	ldr.w	pc, [sp], #4
 800099a:	bf00      	nop
 800099c:	40020400 	.word	0x40020400
 80009a0:	20002148 	.word	0x20002148
	...

080009b0 <Vector130>:
/**
 * @brief   DMA2 stream 5 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 80009b0:	b500      	push	{lr}
 80009b2:	b083      	sub	sp, #12

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM5);
 80009b4:	230b      	movs	r3, #11
 80009b6:	9301      	str	r3, [sp, #4]
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <Vector130+0x5c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2210      	movs	r2, #16
 80009be:	40d3      	lsrs	r3, r2
 80009c0:	f003 030f 	and.w	r3, r3, #15
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	9b00      	ldr	r3, [sp, #0]
 80009c8:	f003 030f 	and.w	r3, r3, #15
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d017      	beq.n	8000a00 <Vector130+0x50>
 80009d0:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <Vector130+0x5c>)
 80009d2:	2310      	movs	r3, #16
 80009d4:	4619      	mov	r1, r3
 80009d6:	9b00      	ldr	r3, [sp, #0]
 80009d8:	408b      	lsls	r3, r1
 80009da:	6053      	str	r3, [r2, #4]
 80009dc:	4a0c      	ldr	r2, [pc, #48]	; (8000a10 <Vector130+0x60>)
 80009de:	9b01      	ldr	r3, [sp, #4]
 80009e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d00b      	beq.n	8000a00 <Vector130+0x50>
 80009e8:	4a09      	ldr	r2, [pc, #36]	; (8000a10 <Vector130+0x60>)
 80009ea:	9b01      	ldr	r3, [sp, #4]
 80009ec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80009f0:	4907      	ldr	r1, [pc, #28]	; (8000a10 <Vector130+0x60>)
 80009f2:	9b01      	ldr	r3, [sp, #4]
 80009f4:	00db      	lsls	r3, r3, #3
 80009f6:	440b      	add	r3, r1
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	9900      	ldr	r1, [sp, #0]
 80009fc:	4618      	mov	r0, r3
 80009fe:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8000a00:	f001 fe6e 	bl	80026e0 <_port_irq_epilogue>
}
 8000a04:	b003      	add	sp, #12
 8000a06:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a0a:	bf00      	nop
 8000a0c:	40020400 	.word	0x40020400
 8000a10:	20002148 	.word	0x20002148
	...

08000a20 <dmaInit>:
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 8000a20:	b082      	sub	sp, #8
  int i;

  dma_streams_mask = 0U;
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <dmaInit+0x50>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8000a28:	2300      	movs	r3, #0
 8000a2a:	9301      	str	r3, [sp, #4]
 8000a2c:	e012      	b.n	8000a54 <dmaInit+0x34>
    _stm32_dma_streams[i].channel->CCR = 0U;
 8000a2e:	4911      	ldr	r1, [pc, #68]	; (8000a74 <dmaInit+0x54>)
 8000a30:	9a01      	ldr	r2, [sp, #4]
 8000a32:	4613      	mov	r3, r2
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	4413      	add	r3, r2
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
    _stm32_dma_isr_redir[i].dma_func = NULL;
 8000a44:	4a0c      	ldr	r2, [pc, #48]	; (8000a78 <dmaInit+0x58>)
 8000a46:	9b01      	ldr	r3, [sp, #4]
 8000a48:	2100      	movs	r1, #0
 8000a4a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8000a4e:	9b01      	ldr	r3, [sp, #4]
 8000a50:	3301      	adds	r3, #1
 8000a52:	9301      	str	r3, [sp, #4]
 8000a54:	9b01      	ldr	r3, [sp, #4]
 8000a56:	2b0b      	cmp	r3, #11
 8000a58:	dde9      	ble.n	8000a2e <dmaInit+0xe>
    _stm32_dma_streams[i].channel->CCR = 0U;
    _stm32_dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFFU;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <dmaInit+0x5c>)
 8000a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a60:	605a      	str	r2, [r3, #4]
#if STM32_DMA2_NUM_CHANNELS > 0
  DMA2->IFCR = 0xFFFFFFFFU;
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <dmaInit+0x60>)
 8000a64:	f04f 32ff 	mov.w	r2, #4294967295
 8000a68:	605a      	str	r2, [r3, #4]
#endif
}
 8000a6a:	b002      	add	sp, #8
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	200021a8 	.word	0x200021a8
 8000a74:	08002b3c 	.word	0x08002b3c
 8000a78:	20002148 	.word	0x20002148
 8000a7c:	40020000 	.word	0x40020000
 8000a80:	40020400 	.word	0x40020400
	...

08000a90 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8000a90:	e7fe      	b.n	8000a90 <BusFault_Handler>
 8000a92:	bf00      	nop
	...

08000aa0 <hal_lld_backup_domain_init>:
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000aa0:	4a13      	ldr	r2, [pc, #76]	; (8000af0 <hal_lld_backup_domain_init+0x50>)
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <hal_lld_backup_domain_init+0x50>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aaa:	6013      	str	r3, [r2, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL){
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <hal_lld_backup_domain_init+0x54>)
 8000aae:	6a1b      	ldr	r3, [r3, #32]
 8000ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ab8:	d006      	beq.n	8000ac8 <hal_lld_backup_domain_init+0x28>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <hal_lld_backup_domain_init+0x54>)
 8000abc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ac0:	621a      	str	r2, [r3, #32]
    RCC->BDCR = 0;
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <hal_lld_backup_domain_init+0x54>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
#endif

#if STM32_RTCSEL != STM32_RTCSEL_NOCLOCK
  /* If the backup domain hasn't been initialized yet then proceed with
     initialization.*/
  if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <hal_lld_backup_domain_init+0x54>)
 8000aca:	6a1b      	ldr	r3, [r3, #32]
 8000acc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d10b      	bne.n	8000aec <hal_lld_backup_domain_init+0x4c>
    /* Selects clock source.*/
    RCC->BDCR |= STM32_RTCSEL;
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <hal_lld_backup_domain_init+0x54>)
 8000ad6:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <hal_lld_backup_domain_init+0x54>)
 8000ad8:	6a1b      	ldr	r3, [r3, #32]
 8000ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ade:	6213      	str	r3, [r2, #32]

    /* RTC clock enabled.*/
    RCC->BDCR |= RCC_BDCR_RTCEN;
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <hal_lld_backup_domain_init+0x54>)
 8000ae2:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <hal_lld_backup_domain_init+0x54>)
 8000ae4:	6a1b      	ldr	r3, [r3, #32]
 8000ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aea:	6213      	str	r3, [r2, #32]
  }
#endif /* STM32_RTCSEL != STM32_RTCSEL_NOCLOCK */
}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40007000 	.word	0x40007000
 8000af4:	40021000 	.word	0x40021000
	...

08000b00 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 8000b00:	b508      	push	{r3, lr}

  /* Reset of all peripherals.*/
  rccResetAHB(0xFFFFFFFF);
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <hal_lld_init+0x68>)
 8000b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <hal_lld_init+0x68>)
 8000b08:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0c:	629a      	str	r2, [r3, #40]	; 0x28
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <hal_lld_init+0x68>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	629a      	str	r2, [r3, #40]	; 0x28
  rccResetAPB1(0xFFFFFFFF);
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <hal_lld_init+0x68>)
 8000b16:	691b      	ldr	r3, [r3, #16]
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <hal_lld_init+0x68>)
 8000b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1e:	611a      	str	r2, [r3, #16]
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <hal_lld_init+0x68>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <hal_lld_init+0x68>)
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <hal_lld_init+0x68>)
 8000b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <hal_lld_init+0x68>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	60da      	str	r2, [r3, #12]

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8000b38:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <hal_lld_init+0x68>)
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <hal_lld_init+0x68>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b42:	61d3      	str	r3, [r2, #28]

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();
 8000b44:	f7ff ffac 	bl	8000aa0 <hal_lld_backup_domain_init>

#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 8000b48:	f7ff ff6a 	bl	8000a20 <dmaInit>
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8000b4c:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <hal_lld_init+0x68>)
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <hal_lld_init+0x68>)
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	6193      	str	r3, [r2, #24]

#if STM32_HAS_USB
  /* USB IRQ relocated to not conflict with CAN.*/
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_USB_IT_RMP;
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <hal_lld_init+0x6c>)
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <hal_lld_init+0x6c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f043 0320 	orr.w	r3, r3, #32
 8000b62:	6013      	str	r3, [r2, #0]
#endif
}
 8000b64:	bd08      	pop	{r3, pc}
 8000b66:	bf00      	nop
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40010000 	.word	0x40010000

08000b70 <stm32_clock_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8000b70:	4a33      	ldr	r2, [pc, #204]	; (8000c40 <stm32_clock_init+0xd0>)
 8000b72:	4b33      	ldr	r3, [pc, #204]	; (8000c40 <stm32_clock_init+0xd0>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8000b7c:	4b30      	ldr	r3, [pc, #192]	; (8000c40 <stm32_clock_init+0xd0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f003 0302 	and.w	r3, r3, #2
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d0f9      	beq.n	8000b7c <stm32_clock_init+0xc>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8000b88:	4a2d      	ldr	r2, [pc, #180]	; (8000c40 <stm32_clock_init+0xd0>)
 8000b8a:	4b2d      	ldr	r3, [pc, #180]	; (8000c40 <stm32_clock_init+0xd0>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f023 0303 	bic.w	r3, r3, #3
 8000b92:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8000b94:	4a2a      	ldr	r2, [pc, #168]	; (8000c40 <stm32_clock_init+0xd0>)
 8000b96:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <stm32_clock_init+0xd0>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8000b9c:	4b28      	ldr	r3, [pc, #160]	; (8000c40 <stm32_clock_init+0xd0>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f003 030c 	and.w	r3, r3, #12
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d1f9      	bne.n	8000b9c <stm32_clock_init+0x2c>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8000ba8:	4a25      	ldr	r2, [pc, #148]	; (8000c40 <stm32_clock_init+0xd0>)
 8000baa:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <stm32_clock_init+0xd0>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 8000bb2:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8000bb4:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <stm32_clock_init+0xd0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	605a      	str	r2, [r3, #4]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 8000bba:	4a21      	ldr	r2, [pc, #132]	; (8000c40 <stm32_clock_init+0xd0>)
 8000bbc:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <stm32_clock_init+0xd0>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc4:	6013      	str	r3, [r2, #0]
#endif
  while (!(RCC->CR & RCC_CR_HSERDY))
 8000bc6:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <stm32_clock_init+0xd0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d0f9      	beq.n	8000bc6 <stm32_clock_init+0x56>
    ;                                       /* Waits until HSE is stable.   */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8000bd2:	4a1b      	ldr	r2, [pc, #108]	; (8000c40 <stm32_clock_init+0xd0>)
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <stm32_clock_init+0xd0>)
 8000bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6253      	str	r3, [r2, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <stm32_clock_init+0xd0>)
 8000be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0f9      	beq.n	8000bde <stm32_clock_init+0x6e>
    ;                                       /* Waits until LSI is stable.   */
#endif

  /* Clock settings.*/
  RCC->CFGR  = STM32_MCOSEL    | STM32_USBPRE    | STM32_PLLMUL   |
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <stm32_clock_init+0xd0>)
 8000bec:	4a15      	ldr	r2, [pc, #84]	; (8000c44 <stm32_clock_init+0xd4>)
 8000bee:	605a      	str	r2, [r3, #4]
               STM32_PLLSRC    | STM32_PPRE1     | STM32_PPRE2    |
               STM32_HPRE;
  RCC->CFGR2 = STM32_ADC34PRES | STM32_ADC12PRES | STM32_PREDIV;
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <stm32_clock_init+0xd0>)
 8000bf2:	f242 1201 	movw	r2, #8449	; 0x2101
 8000bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR3 = STM32_UART5SW   | STM32_UART4SW   | STM32_USART3SW |
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <stm32_clock_init+0xd0>)
 8000bfa:	2230      	movs	r2, #48	; 0x30
 8000bfc:	631a      	str	r2, [r3, #48]	; 0x30
               STM32_USART2SW  | STM32_I2C2SW    | STM32_I2C1SW   |
               STM32_USART1SW;

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR   |= RCC_CR_PLLON;
 8000bfe:	4a10      	ldr	r2, [pc, #64]	; (8000c40 <stm32_clock_init+0xd0>)
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <stm32_clock_init+0xd0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c08:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <stm32_clock_init+0xd0>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d0f9      	beq.n	8000c0a <stm32_clock_init+0x9a>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <stm32_clock_init+0xd8>)
 8000c18:	2212      	movs	r2, #18
 8000c1a:	601a      	str	r2, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8000c1c:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <stm32_clock_init+0xd0>)
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <stm32_clock_init+0xd0>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f043 0302 	orr.w	r3, r3, #2
 8000c26:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <stm32_clock_init+0xd0>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 030c 	and.w	r3, r3, #12
 8000c30:	2b08      	cmp	r3, #8
 8000c32:	d1f9      	bne.n	8000c28 <stm32_clock_init+0xb8>
    ;                                       /* Waits selection complete.    */
#endif

  /* After PLL activation because the special requirements for TIM1 and
     TIM8 bits.*/
  RCC->CFGR3 |= STM32_TIM8SW | STM32_TIM1SW;
 8000c34:	4a02      	ldr	r2, [pc, #8]	; (8000c40 <stm32_clock_init+0xd0>)
 8000c36:	4b02      	ldr	r3, [pc, #8]	; (8000c40 <stm32_clock_init+0xd0>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* !STM32_NO_INIT */
}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000
 8000c44:	001d2d00 	.word	0x001d2d00
 8000c48:	40022000 	.word	0x40022000
 8000c4c:	00000000 	.word	0x00000000

08000c50 <initgpio>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {
 8000c50:	b082      	sub	sp, #8
 8000c52:	9001      	str	r0, [sp, #4]
 8000c54:	9100      	str	r1, [sp, #0]

  gpiop->OTYPER  = config->otyper;
 8000c56:	9b00      	ldr	r3, [sp, #0]
 8000c58:	685a      	ldr	r2, [r3, #4]
 8000c5a:	9b01      	ldr	r3, [sp, #4]
 8000c5c:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000c5e:	9b00      	ldr	r3, [sp, #0]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	9b01      	ldr	r3, [sp, #4]
 8000c64:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8000c66:	9b00      	ldr	r3, [sp, #0]
 8000c68:	68da      	ldr	r2, [r3, #12]
 8000c6a:	9b01      	ldr	r3, [sp, #4]
 8000c6c:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 8000c6e:	9b00      	ldr	r3, [sp, #0]
 8000c70:	691a      	ldr	r2, [r3, #16]
 8000c72:	9b01      	ldr	r3, [sp, #4]
 8000c74:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8000c76:	9b00      	ldr	r3, [sp, #0]
 8000c78:	695a      	ldr	r2, [r3, #20]
 8000c7a:	9b01      	ldr	r3, [sp, #4]
 8000c7c:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8000c7e:	9b00      	ldr	r3, [sp, #0]
 8000c80:	699a      	ldr	r2, [r3, #24]
 8000c82:	9b01      	ldr	r3, [sp, #4]
 8000c84:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000c86:	9b00      	ldr	r3, [sp, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	9b01      	ldr	r3, [sp, #4]
 8000c8c:	601a      	str	r2, [r3, #0]
}
 8000c8e:	b002      	add	sp, #8
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
	...

08000ca0 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
 8000ca0:	b500      	push	{lr}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	9001      	str	r0, [sp, #4]
  rccEnableAHB(AHB_EN_MASK, TRUE);
  RCC->AHBLPENR |= AHB_LPEN_MASK;
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
 8000ca6:	4a1c      	ldr	r2, [pc, #112]	; (8000d18 <_pal_lld_init+0x78>)
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <_pal_lld_init+0x78>)
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000cb0:	6153      	str	r3, [r2, #20]

  /*
   * Initial GPIO setup.
   */
#if STM32_HAS_GPIOA
  initgpio(GPIOA, &config->PAData);
 8000cb2:	9b01      	ldr	r3, [sp, #4]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cba:	f7ff ffc9 	bl	8000c50 <initgpio>
#endif
#if STM32_HAS_GPIOB
  initgpio(GPIOB, &config->PBData);
 8000cbe:	9b01      	ldr	r3, [sp, #4]
 8000cc0:	331c      	adds	r3, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4815      	ldr	r0, [pc, #84]	; (8000d1c <_pal_lld_init+0x7c>)
 8000cc6:	f7ff ffc3 	bl	8000c50 <initgpio>
#endif
#if STM32_HAS_GPIOC
  initgpio(GPIOC, &config->PCData);
 8000cca:	9b01      	ldr	r3, [sp, #4]
 8000ccc:	3338      	adds	r3, #56	; 0x38
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4813      	ldr	r0, [pc, #76]	; (8000d20 <_pal_lld_init+0x80>)
 8000cd2:	f7ff ffbd 	bl	8000c50 <initgpio>
#endif
#if STM32_HAS_GPIOD
  initgpio(GPIOD, &config->PDData);
 8000cd6:	9b01      	ldr	r3, [sp, #4]
 8000cd8:	3354      	adds	r3, #84	; 0x54
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4811      	ldr	r0, [pc, #68]	; (8000d24 <_pal_lld_init+0x84>)
 8000cde:	f7ff ffb7 	bl	8000c50 <initgpio>
#endif
#if STM32_HAS_GPIOE
  initgpio(GPIOE, &config->PEData);
 8000ce2:	9b01      	ldr	r3, [sp, #4]
 8000ce4:	3370      	adds	r3, #112	; 0x70
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480f      	ldr	r0, [pc, #60]	; (8000d28 <_pal_lld_init+0x88>)
 8000cea:	f7ff ffb1 	bl	8000c50 <initgpio>
#endif
#if STM32_HAS_GPIOF
  initgpio(GPIOF, &config->PFData);
 8000cee:	9b01      	ldr	r3, [sp, #4]
 8000cf0:	338c      	adds	r3, #140	; 0x8c
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <_pal_lld_init+0x8c>)
 8000cf6:	f7ff ffab 	bl	8000c50 <initgpio>
#endif
#if STM32_HAS_GPIOG
  initgpio(GPIOG, &config->PGData);
 8000cfa:	9b01      	ldr	r3, [sp, #4]
 8000cfc:	33a8      	adds	r3, #168	; 0xa8
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480b      	ldr	r0, [pc, #44]	; (8000d30 <_pal_lld_init+0x90>)
 8000d02:	f7ff ffa5 	bl	8000c50 <initgpio>
#endif
#if STM32_HAS_GPIOH
  initgpio(GPIOH, &config->PHData);
 8000d06:	9b01      	ldr	r3, [sp, #4]
 8000d08:	33c4      	adds	r3, #196	; 0xc4
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4809      	ldr	r0, [pc, #36]	; (8000d34 <_pal_lld_init+0x94>)
 8000d0e:	f7ff ff9f 	bl	8000c50 <initgpio>
  initgpio(GPIOJ, &config->PJData);
#endif
#if STM32_HAS_GPIOK
  initgpio(GPIOK, &config->PKData);
#endif
}
 8000d12:	b003      	add	sp, #12
 8000d14:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	48000400 	.word	0x48000400
 8000d20:	48000800 	.word	0x48000800
 8000d24:	48000c00 	.word	0x48000c00
 8000d28:	48001000 	.word	0x48001000
 8000d2c:	48001400 	.word	0x48001400
 8000d30:	48001800 	.word	0x48001800
 8000d34:	48001c00 	.word	0x48001c00
	...

08000d40 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8000d40:	b08e      	sub	sp, #56	; 0x38
 8000d42:	9003      	str	r0, [sp, #12]
 8000d44:	9102      	str	r1, [sp, #8]
 8000d46:	9201      	str	r2, [sp, #4]

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000d48:	9b01      	ldr	r3, [sp, #4]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
 8000d4e:	930d      	str	r3, [sp, #52]	; 0x34
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 8000d50:	9b01      	ldr	r3, [sp, #4]
 8000d52:	089b      	lsrs	r3, r3, #2
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	930c      	str	r3, [sp, #48]	; 0x30
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8000d5a:	9b01      	ldr	r3, [sp, #4]
 8000d5c:	08db      	lsrs	r3, r3, #3
 8000d5e:	f003 0303 	and.w	r3, r3, #3
 8000d62:	930b      	str	r3, [sp, #44]	; 0x2c
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8000d64:	9b01      	ldr	r3, [sp, #4]
 8000d66:	095b      	lsrs	r3, r3, #5
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	930a      	str	r3, [sp, #40]	; 0x28
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8000d6e:	9b01      	ldr	r3, [sp, #4]
 8000d70:	09db      	lsrs	r3, r3, #7
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	9308      	str	r3, [sp, #32]
  uint32_t bit     = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	9309      	str	r3, [sp, #36]	; 0x24
  while (true) {
    if ((mask & 1) != 0) {
 8000d7c:	9b02      	ldr	r3, [sp, #8]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d077      	beq.n	8000e76 <_pal_lld_setgroupmode+0x136>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8000d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d88:	f003 0307 	and.w	r3, r3, #7
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	9a08      	ldr	r2, [sp, #32]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	9307      	str	r3, [sp, #28]
      m1 = 1 << bit;
 8000d96:	2201      	movs	r2, #1
 8000d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	9306      	str	r3, [sp, #24]
      m2 = 3 << (bit * 2);
 8000da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2203      	movs	r2, #3
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	9305      	str	r3, [sp, #20]
      m4 = 15 << ((bit & 7) * 4);
 8000dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	220f      	movs	r2, #15
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	9304      	str	r3, [sp, #16]
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000dbc:	9b03      	ldr	r3, [sp, #12]
 8000dbe:	685a      	ldr	r2, [r3, #4]
 8000dc0:	9b06      	ldr	r3, [sp, #24]
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	9b03      	ldr	r3, [sp, #12]
 8000dcc:	605a      	str	r2, [r3, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000dce:	9b03      	ldr	r3, [sp, #12]
 8000dd0:	689a      	ldr	r2, [r3, #8]
 8000dd2:	9b05      	ldr	r3, [sp, #20]
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	9b03      	ldr	r3, [sp, #12]
 8000dde:	609a      	str	r2, [r3, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000de0:	9b03      	ldr	r3, [sp, #12]
 8000de2:	68da      	ldr	r2, [r3, #12]
 8000de4:	9b05      	ldr	r3, [sp, #20]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	401a      	ands	r2, r3
 8000dea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000dec:	431a      	orrs	r2, r3
 8000dee:	9b03      	ldr	r3, [sp, #12]
 8000df0:	60da      	str	r2, [r3, #12]
      if (moder == PAL_STM32_MODE_ALTERNATE) {
 8000df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d11f      	bne.n	8000e38 <_pal_lld_setgroupmode+0xf8>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 8000df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000dfa:	2b07      	cmp	r3, #7
 8000dfc:	d809      	bhi.n	8000e12 <_pal_lld_setgroupmode+0xd2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000dfe:	9b03      	ldr	r3, [sp, #12]
 8000e00:	6a1a      	ldr	r2, [r3, #32]
 8000e02:	9b04      	ldr	r3, [sp, #16]
 8000e04:	43db      	mvns	r3, r3
 8000e06:	401a      	ands	r2, r3
 8000e08:	9b07      	ldr	r3, [sp, #28]
 8000e0a:	431a      	orrs	r2, r3
 8000e0c:	9b03      	ldr	r3, [sp, #12]
 8000e0e:	621a      	str	r2, [r3, #32]
 8000e10:	e008      	b.n	8000e24 <_pal_lld_setgroupmode+0xe4>
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000e12:	9b03      	ldr	r3, [sp, #12]
 8000e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e16:	9b04      	ldr	r3, [sp, #16]
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	9b07      	ldr	r3, [sp, #28]
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	9b03      	ldr	r3, [sp, #12]
 8000e22:	625a      	str	r2, [r3, #36]	; 0x24
        port->MODER   = (port->MODER & ~m2) | moder;
 8000e24:	9b03      	ldr	r3, [sp, #12]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	9b05      	ldr	r3, [sp, #20]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	401a      	ands	r2, r3
 8000e2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000e30:	431a      	orrs	r2, r3
 8000e32:	9b03      	ldr	r3, [sp, #12]
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	e01e      	b.n	8000e76 <_pal_lld_setgroupmode+0x136>
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8000e38:	9b03      	ldr	r3, [sp, #12]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	9b05      	ldr	r3, [sp, #20]
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	401a      	ands	r2, r3
 8000e42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000e44:	431a      	orrs	r2, r3
 8000e46:	9b03      	ldr	r3, [sp, #12]
 8000e48:	601a      	str	r2, [r3, #0]
        if (bit < 8)
 8000e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e4c:	2b07      	cmp	r3, #7
 8000e4e:	d809      	bhi.n	8000e64 <_pal_lld_setgroupmode+0x124>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000e50:	9b03      	ldr	r3, [sp, #12]
 8000e52:	6a1a      	ldr	r2, [r3, #32]
 8000e54:	9b04      	ldr	r3, [sp, #16]
 8000e56:	43db      	mvns	r3, r3
 8000e58:	401a      	ands	r2, r3
 8000e5a:	9b07      	ldr	r3, [sp, #28]
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	9b03      	ldr	r3, [sp, #12]
 8000e60:	621a      	str	r2, [r3, #32]
 8000e62:	e008      	b.n	8000e76 <_pal_lld_setgroupmode+0x136>
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000e64:	9b03      	ldr	r3, [sp, #12]
 8000e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e68:	9b04      	ldr	r3, [sp, #16]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	401a      	ands	r2, r3
 8000e6e:	9b07      	ldr	r3, [sp, #28]
 8000e70:	431a      	orrs	r2, r3
 8000e72:	9b03      	ldr	r3, [sp, #12]
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24
      }
    }
    mask >>= 1;
 8000e76:	9b02      	ldr	r3, [sp, #8]
 8000e78:	085b      	lsrs	r3, r3, #1
 8000e7a:	9302      	str	r3, [sp, #8]
    if (!mask)
 8000e7c:	9b02      	ldr	r3, [sp, #8]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00f      	beq.n	8000ea2 <_pal_lld_setgroupmode+0x162>
      return;
    otyper <<= 1;
 8000e82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	930c      	str	r3, [sp, #48]	; 0x30
    ospeedr <<= 2;
 8000e88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	930b      	str	r3, [sp, #44]	; 0x2c
    pupdr <<= 2;
 8000e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	930a      	str	r3, [sp, #40]	; 0x28
    moder <<= 2;
 8000e94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	930d      	str	r3, [sp, #52]	; 0x34
    bit++;
 8000e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8000ea0:	e76c      	b.n	8000d7c <_pal_lld_setgroupmode+0x3c>
  }
}
 8000ea2:	b00e      	add	sp, #56	; 0x38
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
	...

08000eb0 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
 8000eb0:	b508      	push	{r3, lr}

  st_lld_init();
 8000eb2:	f000 f85d 	bl	8000f70 <st_lld_init>
}
 8000eb6:	bd08      	pop	{r3, pc}
	...

08000ec0 <port_lock.lto_priv.19>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	2320      	movs	r3, #32
 8000ec4:	9301      	str	r3, [sp, #4]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000ec6:	9b01      	ldr	r3, [sp, #4]
 8000ec8:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8000ecc:	b002      	add	sp, #8
 8000ece:	4770      	bx	lr

08000ed0 <port_unlock.lto_priv.16>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	9301      	str	r3, [sp, #4]
 8000ed6:	9b01      	ldr	r3, [sp, #4]
 8000ed8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8000edc:	b002      	add	sp, #8
 8000ede:	4770      	bx	lr

08000ee0 <port_lock_from_isr>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 8000ee0:	b508      	push	{r3, lr}

  port_lock();
 8000ee2:	f7ff ffed 	bl	8000ec0 <port_lock.lto_priv.19>
}
 8000ee6:	bd08      	pop	{r3, pc}
	...

08000ef0 <port_unlock_from_isr>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 8000ef0:	b508      	push	{r3, lr}

  port_unlock();
 8000ef2:	f7ff ffed 	bl	8000ed0 <port_unlock.lto_priv.16>
}
 8000ef6:	bd08      	pop	{r3, pc}
	...

08000f00 <chSysLockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8000f00:	b508      	push	{r3, lr}

  port_lock_from_isr();
 8000f02:	f7ff ffed 	bl	8000ee0 <port_lock_from_isr>
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
}
 8000f06:	bd08      	pop	{r3, pc}
	...

08000f10 <chSysUnlockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8000f10:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
 8000f12:	f7ff ffed 	bl	8000ef0 <port_unlock_from_isr>
}
 8000f16:	bd08      	pop	{r3, pc}
	...

08000f20 <osalSysLockFromISR>:
 * @brief   Enters a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLockFromISR(void) {
 8000f20:	b508      	push	{r3, lr}

  chSysLockFromISR();
 8000f22:	f7ff ffed 	bl	8000f00 <chSysLockFromISR>
}
 8000f26:	bd08      	pop	{r3, pc}
	...

08000f30 <osalSysUnlockFromISR>:
 * @brief   Leaves a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlockFromISR(void) {
 8000f30:	b508      	push	{r3, lr}

  chSysUnlockFromISR();
 8000f32:	f7ff ffed 	bl	8000f10 <chSysUnlockFromISR>
}
 8000f36:	bd08      	pop	{r3, pc}
	...

08000f40 <osalOsTimerHandlerI>:
 * @brief   Systick callback for the underlying OS.
 * @note    This callback is only defined if the OSAL requires such a
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {
 8000f40:	b508      	push	{r3, lr}

  chSysTimerHandlerI();
 8000f42:	f000 fd45 	bl	80019d0 <chSysTimerHandlerI>
}
 8000f46:	bd08      	pop	{r3, pc}
	...

08000f50 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
 8000f50:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  osalSysLockFromISR();
 8000f52:	f7ff ffe5 	bl	8000f20 <osalSysLockFromISR>
  osalOsTimerHandlerI();
 8000f56:	f7ff fff3 	bl	8000f40 <osalOsTimerHandlerI>
  osalSysUnlockFromISR();
 8000f5a:	f7ff ffe9 	bl	8000f30 <osalSysUnlockFromISR>

  OSAL_IRQ_EPILOGUE();
 8000f5e:	f001 fbbf 	bl	80026e0 <_port_irq_epilogue>
}
 8000f62:	bd08      	pop	{r3, pc}
	...

08000f70 <st_lld_init>:
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
 8000f70:	b508      	push	{r3, lr}
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <st_lld_init+0x20>)
 8000f74:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <st_lld_init+0x24>)
 8000f76:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <st_lld_init+0x20>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7e:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <st_lld_init+0x20>)
 8000f80:	2207      	movs	r2, #7
 8000f82:	601a      	str	r2, [r3, #0]
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 8000f84:	2108      	movs	r1, #8
 8000f86:	200b      	movs	r0, #11
 8000f88:	f7ff fa92 	bl	80004b0 <nvicSetSystemHandlerPriority>
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 8000f8c:	bd08      	pop	{r3, pc}
 8000f8e:	bf00      	nop
 8000f90:	e000e010 	.word	0xe000e010
 8000f94:	0001193f 	.word	0x0001193f
	...

08000fa0 <uartInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void uartInit(void) {
 8000fa0:	b508      	push	{r3, lr}

  uart_lld_init();
 8000fa2:	f7ff fa25 	bl	80003f0 <uart_lld_init>
}
 8000fa6:	bd08      	pop	{r3, pc}
	...

08000fb0 <uartObjectInit>:
 *
 * @param[out] uartp    pointer to the @p UARTDriver object
 *
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	9001      	str	r0, [sp, #4]

  uartp->state      = UART_STOP;
 8000fb4:	9b01      	ldr	r3, [sp, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	701a      	strb	r2, [r3, #0]
  uartp->txstate    = UART_TX_IDLE;
 8000fba:	9b01      	ldr	r3, [sp, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	705a      	strb	r2, [r3, #1]
  uartp->rxstate    = UART_RX_IDLE;
 8000fc0:	9b01      	ldr	r3, [sp, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	709a      	strb	r2, [r3, #2]
  uartp->config     = NULL;
 8000fc6:	9b01      	ldr	r3, [sp, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	605a      	str	r2, [r3, #4]

  /* Optional, user-defined initializer.*/
#if defined(UART_DRIVER_EXT_INIT_HOOK)
  UART_DRIVER_EXT_INIT_HOOK(uartp);
#endif
}
 8000fcc:	b002      	add	sp, #8
 8000fce:	4770      	bx	lr

08000fd0 <translate_errors.lto_priv.4>:
 *
 * @param[in] sr        USART SR register value
 *
 * @return  The error flags.
 */
static uartflags_t translate_errors(uint32_t isr) {
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	9001      	str	r0, [sp, #4]
  uartflags_t sts = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	9303      	str	r3, [sp, #12]

  if (isr & USART_ISR_ORE)
 8000fd8:	9b01      	ldr	r3, [sp, #4]
 8000fda:	f003 0308 	and.w	r3, r3, #8
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <translate_errors.lto_priv.4+0x1a>
    sts |= UART_OVERRUN_ERROR;
 8000fe2:	9b03      	ldr	r3, [sp, #12]
 8000fe4:	f043 0310 	orr.w	r3, r3, #16
 8000fe8:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_PE)
 8000fea:	9b01      	ldr	r3, [sp, #4]
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <translate_errors.lto_priv.4+0x2c>
    sts |= UART_PARITY_ERROR;
 8000ff4:	9b03      	ldr	r3, [sp, #12]
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_FE)
 8000ffc:	9b01      	ldr	r3, [sp, #4]
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <translate_errors.lto_priv.4+0x3e>
    sts |= UART_FRAMING_ERROR;
 8001006:	9b03      	ldr	r3, [sp, #12]
 8001008:	f043 0308 	orr.w	r3, r3, #8
 800100c:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_NE)
 800100e:	9b01      	ldr	r3, [sp, #4]
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <translate_errors.lto_priv.4+0x50>
    sts |= UART_NOISE_ERROR;
 8001018:	9b03      	ldr	r3, [sp, #12]
 800101a:	f043 0320 	orr.w	r3, r3, #32
 800101e:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_LBDF)
 8001020:	9b01      	ldr	r3, [sp, #4]
 8001022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <translate_errors.lto_priv.4+0x62>
    sts |= UART_BREAK_DETECTED;
 800102a:	9b03      	ldr	r3, [sp, #12]
 800102c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001030:	9303      	str	r3, [sp, #12]
  return sts;
 8001032:	9b03      	ldr	r3, [sp, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	b004      	add	sp, #16
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	0000      	movs	r0, r0
	...

08001040 <chThdCreateSuspended>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp) {
 8001040:	b500      	push	{lr}
 8001042:	b085      	sub	sp, #20
 8001044:	9001      	str	r0, [sp, #4]
  _thread_memfill((uint8_t *)tdp->wbase,
                  (uint8_t *)tdp->wend,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
 8001046:	f000 fd13 	bl	8001a70 <chSysLock.lto_priv.27>
  tp = chThdCreateSuspendedI(tdp);
 800104a:	9801      	ldr	r0, [sp, #4]
 800104c:	f000 fd68 	bl	8001b20 <chThdCreateSuspendedI>
 8001050:	9003      	str	r0, [sp, #12]
  chSysUnlock();
 8001052:	f000 fd15 	bl	8001a80 <chSysUnlock.lto_priv.25>

  return tp;
 8001056:	9b03      	ldr	r3, [sp, #12]
}
 8001058:	4618      	mov	r0, r3
 800105a:	b005      	add	sp, #20
 800105c:	f85d fb04 	ldr.w	pc, [sp], #4

08001060 <chThdCreate>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 8001060:	b500      	push	{lr}
 8001062:	b085      	sub	sp, #20
 8001064:	9001      	str	r0, [sp, #4]
  _thread_memfill((uint8_t *)tdp->wbase,
                  (uint8_t *)tdp->wend,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
 8001066:	f000 fd03 	bl	8001a70 <chSysLock.lto_priv.27>
  tp = chThdCreateSuspendedI(tdp);
 800106a:	9801      	ldr	r0, [sp, #4]
 800106c:	f000 fd58 	bl	8001b20 <chThdCreateSuspendedI>
 8001070:	9003      	str	r0, [sp, #12]
  chSchWakeupS(tp, MSG_OK);
 8001072:	2100      	movs	r1, #0
 8001074:	9803      	ldr	r0, [sp, #12]
 8001076:	f000 faf3 	bl	8001660 <chSchWakeupS>
  chSysUnlock();
 800107a:	f000 fd01 	bl	8001a80 <chSysUnlock.lto_priv.25>

  return tp;
 800107e:	9b03      	ldr	r3, [sp, #12]
}
 8001080:	4618      	mov	r0, r3
 8001082:	b005      	add	sp, #20
 8001084:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001090 <chThdStart>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdStart(thread_t *tp) {
 8001090:	b500      	push	{lr}
 8001092:	b083      	sub	sp, #12
 8001094:	9001      	str	r0, [sp, #4]

  chSysLock();
 8001096:	f000 fceb 	bl	8001a70 <chSysLock.lto_priv.27>
  tp = chThdStartI(tp);
 800109a:	9801      	ldr	r0, [sp, #4]
 800109c:	f000 fcf8 	bl	8001a90 <chThdStartI.lto_priv.40>
 80010a0:	9001      	str	r0, [sp, #4]
  chSysUnlock();
 80010a2:	f000 fced 	bl	8001a80 <chSysUnlock.lto_priv.25>

  return tp;
 80010a6:	9b01      	ldr	r3, [sp, #4]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	b003      	add	sp, #12
 80010ac:	f85d fb04 	ldr.w	pc, [sp], #4

080010b0 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 80010b0:	b500      	push	{lr}
 80010b2:	b083      	sub	sp, #12
 80010b4:	9001      	str	r0, [sp, #4]

  chSysLock();
 80010b6:	f000 fcdb 	bl	8001a70 <chSysLock.lto_priv.27>
  chThdExitS(msg);
 80010ba:	9801      	ldr	r0, [sp, #4]
 80010bc:	f000 f808 	bl	80010d0 <chThdExitS>
  /* The thread never returns here.*/
}
 80010c0:	b003      	add	sp, #12
 80010c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80010c6:	bf00      	nop
	...

080010d0 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 80010d0:	b500      	push	{lr}
 80010d2:	b085      	sub	sp, #20
 80010d4:	9001      	str	r0, [sp, #4]
  thread_t *tp = currp;
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <chThdExitS+0x44>)
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	9303      	str	r3, [sp, #12]

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 80010dc:	9b03      	ldr	r3, [sp, #12]
 80010de:	9a01      	ldr	r2, [sp, #4]
 80010e0:	615a      	str	r2, [r3, #20]
 80010e2:	e008      	b.n	80010f6 <chThdExitS+0x26>
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
    (void) chSchReadyI(list_remove(&tp->waiting));
 80010e4:	9b03      	ldr	r3, [sp, #12]
 80010e6:	3318      	adds	r3, #24
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 fcb1 	bl	8001a50 <list_remove.lto_priv.39>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 f9c5 	bl	8001480 <chSchReadyI>
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 80010f6:	9b03      	ldr	r3, [sp, #12]
 80010f8:	3318      	adds	r3, #24
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 fc88 	bl	8001a10 <list_notempty.lto_priv.38>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1ee      	bne.n	80010e4 <chThdExitS+0x14>
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 8001106:	200f      	movs	r0, #15
 8001108:	f000 fa0a 	bl	8001520 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 800110c:	b005      	add	sp, #20
 800110e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001112:	bf00      	nop
 8001114:	20001f48 	.word	0x20001f48
	...

08001120 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8001120:	b500      	push	{lr}
 8001122:	b083      	sub	sp, #12
 8001124:	9001      	str	r0, [sp, #4]

  chSysLock();
 8001126:	f000 fca3 	bl	8001a70 <chSysLock.lto_priv.27>
  chThdSleepS(time);
 800112a:	9801      	ldr	r0, [sp, #4]
 800112c:	f000 fcc0 	bl	8001ab0 <chThdSleepS.lto_priv.35>
  chSysUnlock();
 8001130:	f000 fca6 	bl	8001a80 <chSysUnlock.lto_priv.25>
}
 8001134:	b003      	add	sp, #12
 8001136:	f85d fb04 	ldr.w	pc, [sp], #4
 800113a:	bf00      	nop
 800113c:	0000      	movs	r0, r0
	...

08001140 <port_rt_get_counter_value>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8001140:	4b01      	ldr	r3, [pc, #4]	; (8001148 <port_rt_get_counter_value+0x8>)
 8001142:	685b      	ldr	r3, [r3, #4]
}
 8001144:	4618      	mov	r0, r3
 8001146:	4770      	bx	lr
 8001148:	e0001000 	.word	0xe0001000
 800114c:	00000000 	.word	0x00000000

08001150 <tm_stop>:
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {
 8001150:	b410      	push	{r4}
 8001152:	b085      	sub	sp, #20
 8001154:	9003      	str	r0, [sp, #12]
 8001156:	9102      	str	r1, [sp, #8]
 8001158:	9201      	str	r2, [sp, #4]

  tmp->n++;
 800115a:	9b03      	ldr	r3, [sp, #12]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	9b03      	ldr	r3, [sp, #12]
 8001162:	60da      	str	r2, [r3, #12]
  tmp->last = (now - tmp->last) - offset;
 8001164:	9b03      	ldr	r3, [sp, #12]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	9a02      	ldr	r2, [sp, #8]
 800116a:	1ad2      	subs	r2, r2, r3
 800116c:	9b01      	ldr	r3, [sp, #4]
 800116e:	1ad2      	subs	r2, r2, r3
 8001170:	9b03      	ldr	r3, [sp, #12]
 8001172:	609a      	str	r2, [r3, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8001174:	9b03      	ldr	r3, [sp, #12]
 8001176:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 800117a:	9b03      	ldr	r3, [sp, #12]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f04f 0400 	mov.w	r4, #0
 8001182:	185b      	adds	r3, r3, r1
 8001184:	eb44 0402 	adc.w	r4, r4, r2
 8001188:	9a03      	ldr	r2, [sp, #12]
 800118a:	e9c2 3404 	strd	r3, r4, [r2, #16]
  if (tmp->last > tmp->worst) {
 800118e:	9b03      	ldr	r3, [sp, #12]
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	9b03      	ldr	r3, [sp, #12]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	429a      	cmp	r2, r3
 8001198:	d903      	bls.n	80011a2 <tm_stop+0x52>
    tmp->worst = tmp->last;
 800119a:	9b03      	ldr	r3, [sp, #12]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	9b03      	ldr	r3, [sp, #12]
 80011a0:	605a      	str	r2, [r3, #4]
  }
  if (tmp->last < tmp->best) {
 80011a2:	9b03      	ldr	r3, [sp, #12]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	9b03      	ldr	r3, [sp, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d203      	bcs.n	80011b6 <tm_stop+0x66>
    tmp->best = tmp->last;
 80011ae:	9b03      	ldr	r3, [sp, #12]
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	9b03      	ldr	r3, [sp, #12]
 80011b4:	601a      	str	r2, [r3, #0]
  }
}
 80011b6:	b005      	add	sp, #20
 80011b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop

080011c0 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 80011c0:	b500      	push	{lr}
 80011c2:	b087      	sub	sp, #28
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 80011c4:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <_tm_init+0x30>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	661a      	str	r2, [r3, #96]	; 0x60
  chTMObjectInit(&tm);
 80011ca:	466b      	mov	r3, sp
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 f817 	bl	8001200 <chTMObjectInit>
  chTMStartMeasurementX(&tm);
 80011d2:	466b      	mov	r3, sp
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 f833 	bl	8001240 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 80011da:	466b      	mov	r3, sp
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 f83f 	bl	8001260 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 80011e2:	9b02      	ldr	r3, [sp, #8]
 80011e4:	4a02      	ldr	r2, [pc, #8]	; (80011f0 <_tm_init+0x30>)
 80011e6:	6613      	str	r3, [r2, #96]	; 0x60
}
 80011e8:	b007      	add	sp, #28
 80011ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80011ee:	bf00      	nop
 80011f0:	20001f48 	.word	0x20001f48
	...

08001200 <chTMObjectInit>:
 *
 * @param[out] tmp      pointer to a @p TimeMeasurement structure
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {
 8001200:	b410      	push	{r4}
 8001202:	b083      	sub	sp, #12
 8001204:	9001      	str	r0, [sp, #4]

  tmp->best       = (rtcnt_t)-1;
 8001206:	9b01      	ldr	r3, [sp, #4]
 8001208:	f04f 32ff 	mov.w	r2, #4294967295
 800120c:	601a      	str	r2, [r3, #0]
  tmp->worst      = (rtcnt_t)0;
 800120e:	9b01      	ldr	r3, [sp, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	605a      	str	r2, [r3, #4]
  tmp->last       = (rtcnt_t)0;
 8001214:	9b01      	ldr	r3, [sp, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  tmp->n          = (ucnt_t)0;
 800121a:	9b01      	ldr	r3, [sp, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
  tmp->cumulative = (rttime_t)0;
 8001220:	9a01      	ldr	r2, [sp, #4]
 8001222:	f04f 0300 	mov.w	r3, #0
 8001226:	f04f 0400 	mov.w	r4, #0
 800122a:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 800122e:	b003      	add	sp, #12
 8001230:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
	...

08001240 <chTMStartMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p TimeMeasurement structure
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {
 8001240:	b500      	push	{lr}
 8001242:	b083      	sub	sp, #12
 8001244:	9001      	str	r0, [sp, #4]

  tmp->last = chSysGetRealtimeCounterX();
 8001246:	f7ff ff7b 	bl	8001140 <port_rt_get_counter_value>
 800124a:	4602      	mov	r2, r0
 800124c:	9b01      	ldr	r3, [sp, #4]
 800124e:	609a      	str	r2, [r3, #8]
}
 8001250:	b003      	add	sp, #12
 8001252:	f85d fb04 	ldr.w	pc, [sp], #4
 8001256:	bf00      	nop
	...

08001260 <chTMStopMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8001260:	b500      	push	{lr}
 8001262:	b083      	sub	sp, #12
 8001264:	9001      	str	r0, [sp, #4]

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8001266:	f7ff ff6b 	bl	8001140 <port_rt_get_counter_value>
 800126a:	4601      	mov	r1, r0
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <chTMStopMeasurementX+0x20>)
 800126e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001270:	461a      	mov	r2, r3
 8001272:	9801      	ldr	r0, [sp, #4]
 8001274:	f7ff ff6c 	bl	8001150 <tm_stop>
}
 8001278:	b003      	add	sp, #12
 800127a:	f85d fb04 	ldr.w	pc, [sp], #4
 800127e:	bf00      	nop
 8001280:	20001f48 	.word	0x20001f48
	...

08001290 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <_vt_init+0x1c>)
 8001292:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <_vt_init+0x20>)
 8001294:	615a      	str	r2, [r3, #20]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <_vt_init+0x1c>)
 8001298:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <_vt_init+0x20>)
 800129a:	619a      	str	r2, [r3, #24]
  ch.vtlist.delta = (systime_t)-1;
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <_vt_init+0x1c>)
 800129e:	f04f 32ff 	mov.w	r2, #4294967295
 80012a2:	61da      	str	r2, [r3, #28]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
 80012a4:	4b01      	ldr	r3, [pc, #4]	; (80012ac <_vt_init+0x1c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	621a      	str	r2, [r3, #32]
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80012aa:	4770      	bx	lr
 80012ac:	20001f48 	.word	0x20001f48
 80012b0:	20001f5c 	.word	0x20001f5c
	...

080012c0 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 80012c0:	b086      	sub	sp, #24
 80012c2:	9003      	str	r0, [sp, #12]
 80012c4:	9102      	str	r1, [sp, #8]
 80012c6:	9201      	str	r2, [sp, #4]
 80012c8:	9300      	str	r3, [sp, #0]
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 80012ca:	9b03      	ldr	r3, [sp, #12]
 80012cc:	9a00      	ldr	r2, [sp, #0]
 80012ce:	611a      	str	r2, [r3, #16]
  vtp->func = vtfunc;
 80012d0:	9b03      	ldr	r3, [sp, #12]
 80012d2:	9a01      	ldr	r2, [sp, #4]
 80012d4:	60da      	str	r2, [r3, #12]
      port_timer_set_alarm(ch.vtlist.lasttime + delta);
    }
  }
#else /* CH_CFG_ST_TIMEDELTA == 0 */
  /* Delta is initially equal to the specified delay.*/
  delta = delay;
 80012d6:	9b02      	ldr	r3, [sp, #8]
 80012d8:	9304      	str	r3, [sp, #16]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.next;
 80012da:	4b17      	ldr	r3, [pc, #92]	; (8001338 <chVTDoSetI+0x78>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	9305      	str	r3, [sp, #20]
 80012e0:	e007      	b.n	80012f2 <chVTDoSetI+0x32>
  while (p->delta < delta) {
    delta -= p->delta;
 80012e2:	9b05      	ldr	r3, [sp, #20]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	9a04      	ldr	r2, [sp, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	9304      	str	r3, [sp, #16]
    p = p->next;
 80012ec:	9b05      	ldr	r3, [sp, #20]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	9305      	str	r3, [sp, #20]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.next;
  while (p->delta < delta) {
 80012f2:	9b05      	ldr	r3, [sp, #20]
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	9b04      	ldr	r3, [sp, #16]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d3f2      	bcc.n	80012e2 <chVTDoSetI+0x22>
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
 80012fc:	9b03      	ldr	r3, [sp, #12]
 80012fe:	9a05      	ldr	r2, [sp, #20]
 8001300:	601a      	str	r2, [r3, #0]
  vtp->prev = vtp->next->prev;
 8001302:	9b03      	ldr	r3, [sp, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	9b03      	ldr	r3, [sp, #12]
 800130a:	605a      	str	r2, [r3, #4]
  vtp->prev->next = vtp;
 800130c:	9b03      	ldr	r3, [sp, #12]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	9a03      	ldr	r2, [sp, #12]
 8001312:	601a      	str	r2, [r3, #0]
  p->prev = vtp;
 8001314:	9b05      	ldr	r3, [sp, #20]
 8001316:	9a03      	ldr	r2, [sp, #12]
 8001318:	605a      	str	r2, [r3, #4]
  vtp->delta = delta
 800131a:	9b03      	ldr	r3, [sp, #12]
 800131c:	9a04      	ldr	r2, [sp, #16]
 800131e:	609a      	str	r2, [r3, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
 8001320:	9b05      	ldr	r3, [sp, #20]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	9b04      	ldr	r3, [sp, #16]
 8001326:	1ad2      	subs	r2, r2, r3
 8001328:	9b05      	ldr	r3, [sp, #20]
 800132a:	609a      	str	r2, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
 800132c:	4b02      	ldr	r3, [pc, #8]	; (8001338 <chVTDoSetI+0x78>)
 800132e:	f04f 32ff 	mov.w	r2, #4294967295
 8001332:	61da      	str	r2, [r3, #28]
}
 8001334:	b006      	add	sp, #24
 8001336:	4770      	bx	lr
 8001338:	20001f48 	.word	0x20001f48
 800133c:	00000000 	.word	0x00000000

08001340 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8001340:	b082      	sub	sp, #8
 8001342:	9001      	str	r0, [sp, #4]
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->next->delta += vtp->delta;
 8001344:	9b01      	ldr	r3, [sp, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	9a01      	ldr	r2, [sp, #4]
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	6891      	ldr	r1, [r2, #8]
 800134e:	9a01      	ldr	r2, [sp, #4]
 8001350:	6892      	ldr	r2, [r2, #8]
 8001352:	440a      	add	r2, r1
 8001354:	609a      	str	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->prev->next = vtp->next;
 8001356:	9b01      	ldr	r3, [sp, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	9a01      	ldr	r2, [sp, #4]
 800135c:	6812      	ldr	r2, [r2, #0]
 800135e:	601a      	str	r2, [r3, #0]
  vtp->next->prev = vtp->prev;
 8001360:	9b01      	ldr	r3, [sp, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	9a01      	ldr	r2, [sp, #4]
 8001366:	6852      	ldr	r2, [r2, #4]
 8001368:	605a      	str	r2, [r3, #4]
  vtp->func = NULL;
 800136a:	9b01      	ldr	r3, [sp, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	60da      	str	r2, [r3, #12]

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.delta = (systime_t)-1;
 8001370:	4b02      	ldr	r3, [pc, #8]	; (800137c <chVTDoResetI+0x3c>)
 8001372:	f04f 32ff 	mov.w	r2, #4294967295
 8001376:	61da      	str	r2, [r3, #28]
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001378:	b002      	add	sp, #8
 800137a:	4770      	bx	lr
 800137c:	20001f48 	.word	0x20001f48

08001380 <__core_init>:

#if __CORTEX_M == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
	...

08001390 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
	...

080013a0 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 80013a0:	e7fe      	b.n	80013a0 <__default_exit>
 80013a2:	bf00      	nop
	...

080013b0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 80013b0:	b084      	sub	sp, #16
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <__init_ram_areas+0x5c>)
 80013b4:	9303      	str	r3, [sp, #12]

  do {
    uint32_t *tp = rap->init_text_area;
 80013b6:	9b03      	ldr	r3, [sp, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	9302      	str	r3, [sp, #8]
    uint32_t *p = rap->init_area;
 80013bc:	9b03      	ldr	r3, [sp, #12]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	e009      	b.n	80013d8 <__init_ram_areas+0x28>

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
      *p = *tp;
 80013c4:	9b02      	ldr	r3, [sp, #8]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	9b01      	ldr	r3, [sp, #4]
 80013ca:	601a      	str	r2, [r3, #0]
      p++;
 80013cc:	9b01      	ldr	r3, [sp, #4]
 80013ce:	3304      	adds	r3, #4
 80013d0:	9301      	str	r3, [sp, #4]
      tp++;
 80013d2:	9b02      	ldr	r3, [sp, #8]
 80013d4:	3304      	adds	r3, #4
 80013d6:	9302      	str	r3, [sp, #8]
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 80013d8:	9b03      	ldr	r3, [sp, #12]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	9b01      	ldr	r3, [sp, #4]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d8f0      	bhi.n	80013c4 <__init_ram_areas+0x14>
 80013e2:	e005      	b.n	80013f0 <__init_ram_areas+0x40>
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 80013e4:	9b01      	ldr	r3, [sp, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
      p++;
 80013ea:	9b01      	ldr	r3, [sp, #4]
 80013ec:	3304      	adds	r3, #4
 80013ee:	9301      	str	r3, [sp, #4]
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 80013f0:	9b03      	ldr	r3, [sp, #12]
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	9b01      	ldr	r3, [sp, #4]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d8f4      	bhi.n	80013e4 <__init_ram_areas+0x34>
      *p = 0;
      p++;
    }
    rap++;
 80013fa:	9b03      	ldr	r3, [sp, #12]
 80013fc:	3310      	adds	r3, #16
 80013fe:	9303      	str	r3, [sp, #12]
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8001400:	9b03      	ldr	r3, [sp, #12]
 8001402:	4a03      	ldr	r2, [pc, #12]	; (8001410 <__init_ram_areas+0x60>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d3d6      	bcc.n	80013b6 <__init_ram_areas+0x6>
#endif
}
 8001408:	b004      	add	sp, #16
 800140a:	4770      	bx	lr
 800140c:	08002abc 	.word	0x08002abc
 8001410:	08002b3c 	.word	0x08002b3c
	...

08001420 <osalInit>:
 *
 * @api
 */
static inline void osalInit(void) {

}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
	...

08001430 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 8001430:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();
 8001432:	f7ff fff5 	bl	8001420 <osalInit>

  /* Platform low level initializations.*/
  hal_lld_init();
 8001436:	f7ff fb63 	bl	8000b00 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <halInit+0x20>)
 800143c:	f7ff fc30 	bl	8000ca0 <_pal_lld_init>
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
 8001440:	f7ff fdae 	bl	8000fa0 <uartInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 8001444:	f001 f904 	bl	8002650 <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 8001448:	f7ff fd32 	bl	8000eb0 <stInit>
#endif
}
 800144c:	bd08      	pop	{r3, pc}
 800144e:	bf00      	nop
 8001450:	080029c4 	.word	0x080029c4
	...

08001460 <_scheduler_init>:
/**
 * @brief   Scheduler initialization.
 *
 * @notapi
 */
void _scheduler_init(void) {
 8001460:	b508      	push	{r3, lr}

  queue_init(&ch.rlist.queue);
 8001462:	4803      	ldr	r0, [pc, #12]	; (8001470 <_scheduler_init+0x10>)
 8001464:	f001 f9ac 	bl	80027c0 <queue_init.lto_priv.44>
  ch.rlist.prio = NOPRIO;
 8001468:	4b01      	ldr	r3, [pc, #4]	; (8001470 <_scheduler_init+0x10>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.newer = (thread_t *)&ch.rlist;
  ch.rlist.older = (thread_t *)&ch.rlist;
#endif
}
 800146e:	bd08      	pop	{r3, pc}
 8001470:	20001f48 	.word	0x20001f48
	...

08001480 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8001480:	b084      	sub	sp, #16
 8001482:	9001      	str	r0, [sp, #4]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8001484:	9b01      	ldr	r3, [sp, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	741a      	strb	r2, [r3, #16]
  cp = (thread_t *)&ch.rlist.queue;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <chSchReadyI+0x44>)
 800148c:	9303      	str	r3, [sp, #12]
  do {
    cp = cp->queue.next;
 800148e:	9b03      	ldr	r3, [sp, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	9303      	str	r3, [sp, #12]
  } while (cp->prio >= tp->prio);
 8001494:	9b03      	ldr	r3, [sp, #12]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	9b01      	ldr	r3, [sp, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	429a      	cmp	r2, r3
 800149e:	d2f6      	bcs.n	800148e <chSchReadyI+0xe>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 80014a0:	9b01      	ldr	r3, [sp, #4]
 80014a2:	9a03      	ldr	r2, [sp, #12]
 80014a4:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = cp->queue.prev;
 80014a6:	9b03      	ldr	r3, [sp, #12]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	9b01      	ldr	r3, [sp, #4]
 80014ac:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 80014ae:	9b01      	ldr	r3, [sp, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	9a01      	ldr	r2, [sp, #4]
 80014b4:	601a      	str	r2, [r3, #0]
  cp->queue.prev             = tp;
 80014b6:	9b03      	ldr	r3, [sp, #12]
 80014b8:	9a01      	ldr	r2, [sp, #4]
 80014ba:	605a      	str	r2, [r3, #4]

  return tp;
 80014bc:	9b01      	ldr	r3, [sp, #4]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	b004      	add	sp, #16
 80014c2:	4770      	bx	lr
 80014c4:	20001f48 	.word	0x20001f48
	...

080014d0 <chSchReadyAheadI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyAheadI(thread_t *tp) {
 80014d0:	b084      	sub	sp, #16
 80014d2:	9001      	str	r0, [sp, #4]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80014d4:	9b01      	ldr	r3, [sp, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	741a      	strb	r2, [r3, #16]
  cp = (thread_t *)&ch.rlist.queue;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <chSchReadyAheadI+0x44>)
 80014dc:	9303      	str	r3, [sp, #12]
  do {
    cp = cp->queue.next;
 80014de:	9b03      	ldr	r3, [sp, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	9303      	str	r3, [sp, #12]
  } while (cp->prio > tp->prio);
 80014e4:	9b03      	ldr	r3, [sp, #12]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	9b01      	ldr	r3, [sp, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d8f6      	bhi.n	80014de <chSchReadyAheadI+0xe>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 80014f0:	9b01      	ldr	r3, [sp, #4]
 80014f2:	9a03      	ldr	r2, [sp, #12]
 80014f4:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = cp->queue.prev;
 80014f6:	9b03      	ldr	r3, [sp, #12]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	9b01      	ldr	r3, [sp, #4]
 80014fc:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 80014fe:	9b01      	ldr	r3, [sp, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	9a01      	ldr	r2, [sp, #4]
 8001504:	601a      	str	r2, [r3, #0]
  cp->queue.prev             = tp;
 8001506:	9b03      	ldr	r3, [sp, #12]
 8001508:	9a01      	ldr	r2, [sp, #4]
 800150a:	605a      	str	r2, [r3, #4]

  return tp;
 800150c:	9b01      	ldr	r3, [sp, #4]
}
 800150e:	4618      	mov	r0, r3
 8001510:	b004      	add	sp, #16
 8001512:	4770      	bx	lr
 8001514:	20001f48 	.word	0x20001f48
	...

08001520 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8001520:	b500      	push	{lr}
 8001522:	b085      	sub	sp, #20
 8001524:	4603      	mov	r3, r0
 8001526:	f88d 3007 	strb.w	r3, [sp, #7]
  thread_t *otp = currp;
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <chSchGoSleepS+0x40>)
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	9303      	str	r3, [sp, #12]

  chDbgCheckClassS();

  /* New state.*/
  otp->state = newstate;
 8001530:	9b03      	ldr	r3, [sp, #12]
 8001532:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001536:	741a      	strb	r2, [r3, #16]
     time quantum when it will wakeup.*/
  otp->preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8001538:	4809      	ldr	r0, [pc, #36]	; (8001560 <chSchGoSleepS+0x40>)
 800153a:	f001 f951 	bl	80027e0 <queue_fifo_remove.lto_priv.41>
 800153e:	4602      	mov	r2, r0
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <chSchGoSleepS+0x40>)
 8001542:	611a      	str	r2, [r3, #16]
  currp->state = CH_STATE_CURRENT;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <chSchGoSleepS+0x40>)
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	2201      	movs	r2, #1
 800154a:	741a      	strb	r2, [r3, #16]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <chSchGoSleepS+0x40>)
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	9903      	ldr	r1, [sp, #12]
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe fe24 	bl	80001a0 <_port_switch>
}
 8001558:	b005      	add	sp, #20
 800155a:	f85d fb04 	ldr.w	pc, [sp], #4
 800155e:	bf00      	nop
 8001560:	20001f48 	.word	0x20001f48
	...

08001570 <wakeup>:

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8001570:	b500      	push	{lr}
 8001572:	b085      	sub	sp, #20
 8001574:	9001      	str	r0, [sp, #4]
  thread_t *tp = (thread_t *)p;
 8001576:	9b01      	ldr	r3, [sp, #4]
 8001578:	9303      	str	r3, [sp, #12]

  chSysLockFromISR();
 800157a:	f001 f969 	bl	8002850 <chSysLockFromISR.lto_priv.56>
  switch (tp->state) {
 800157e:	9b03      	ldr	r3, [sp, #12]
 8001580:	7c1b      	ldrb	r3, [r3, #16]
 8001582:	2b07      	cmp	r3, #7
 8001584:	d822      	bhi.n	80015cc <wakeup+0x5c>
 8001586:	a201      	add	r2, pc, #4	; (adr r2, 800158c <wakeup+0x1c>)
 8001588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158c:	080015ad 	.word	0x080015ad
 8001590:	080015cd 	.word	0x080015cd
 8001594:	080015cd 	.word	0x080015cd
 8001598:	080015b3 	.word	0x080015b3
 800159c:	080015c7 	.word	0x080015c7
 80015a0:	080015bd 	.word	0x080015bd
 80015a4:	080015cd 	.word	0x080015cd
 80015a8:	080015c7 	.word	0x080015c7
  case CH_STATE_READY:
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
 80015ac:	f001 f958 	bl	8002860 <chSysUnlockFromISR.lto_priv.54>
 80015b0:	e015      	b.n	80015de <wakeup+0x6e>
    return;
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 80015b2:	9b03      	ldr	r3, [sp, #12]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	e007      	b.n	80015cc <wakeup+0x5c>
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 80015bc:	9b03      	ldr	r3, [sp, #12]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f001 f965 	bl	8002890 <chSemFastSignalI.lto_priv.65>
#if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
  case CH_STATE_WTCOND:
#endif
  case CH_STATE_QUEUED:
    /* States requiring dequeuing.*/
    (void) queue_dequeue(tp);
 80015c6:	9803      	ldr	r0, [sp, #12]
 80015c8:	f001 f922 	bl	8002810 <queue_dequeue.lto_priv.64>
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 80015cc:	9b03      	ldr	r3, [sp, #12]
 80015ce:	f04f 32ff 	mov.w	r2, #4294967295
 80015d2:	615a      	str	r2, [r3, #20]
  (void) chSchReadyI(tp);
 80015d4:	9803      	ldr	r0, [sp, #12]
 80015d6:	f7ff ff53 	bl	8001480 <chSchReadyI>
  chSysUnlockFromISR();
 80015da:	f001 f941 	bl	8002860 <chSysUnlockFromISR.lto_priv.54>
}
 80015de:	b005      	add	sp, #20
 80015e0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080015f0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 80015f0:	b500      	push	{lr}
 80015f2:	b089      	sub	sp, #36	; 0x24
 80015f4:	4603      	mov	r3, r0
 80015f6:	9100      	str	r1, [sp, #0]
 80015f8:	f88d 3007 	strb.w	r3, [sp, #7]

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 80015fc:	9b00      	ldr	r3, [sp, #0]
 80015fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001602:	d017      	beq.n	8001634 <chSchGoSleepTimeoutS+0x44>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <chSchGoSleepTimeoutS+0x5c>)
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	a803      	add	r0, sp, #12
 800160a:	4a11      	ldr	r2, [pc, #68]	; (8001650 <chSchGoSleepTimeoutS+0x60>)
 800160c:	9900      	ldr	r1, [sp, #0]
 800160e:	f7ff fe57 	bl	80012c0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8001612:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ff82 	bl	8001520 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800161c:	ab03      	add	r3, sp, #12
 800161e:	4618      	mov	r0, r3
 8001620:	f001 f926 	bl	8002870 <chVTIsArmedI.lto_priv.63>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d009      	beq.n	800163e <chSchGoSleepTimeoutS+0x4e>
      chVTDoResetI(&vt);
 800162a:	ab03      	add	r3, sp, #12
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fe87 	bl	8001340 <chVTDoResetI>
 8001632:	e004      	b.n	800163e <chSchGoSleepTimeoutS+0x4e>
    }
  }
  else {
    chSchGoSleepS(newstate);
 8001634:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff71 	bl	8001520 <chSchGoSleepS>
  }

  return currp->u.rdymsg;
 800163e:	4b03      	ldr	r3, [pc, #12]	; (800164c <chSchGoSleepTimeoutS+0x5c>)
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	695b      	ldr	r3, [r3, #20]
}
 8001644:	4618      	mov	r0, r3
 8001646:	b009      	add	sp, #36	; 0x24
 8001648:	f85d fb04 	ldr.w	pc, [sp], #4
 800164c:	20001f48 	.word	0x20001f48
 8001650:	08001571 	.word	0x08001571
	...

08001660 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001660:	b500      	push	{lr}
 8001662:	b085      	sub	sp, #20
 8001664:	9001      	str	r0, [sp, #4]
 8001666:	9100      	str	r1, [sp, #0]
  thread_t *otp = currp;
 8001668:	4b10      	ldr	r3, [pc, #64]	; (80016ac <chSchWakeupS+0x4c>)
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	9303      	str	r3, [sp, #12]
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 800166e:	9b01      	ldr	r3, [sp, #4]
 8001670:	9a00      	ldr	r2, [sp, #0]
 8001672:	615a      	str	r2, [r3, #20]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8001674:	9b01      	ldr	r3, [sp, #4]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	9b03      	ldr	r3, [sp, #12]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	429a      	cmp	r2, r3
 800167e:	d803      	bhi.n	8001688 <chSchWakeupS+0x28>
    (void) chSchReadyI(ntp);
 8001680:	9801      	ldr	r0, [sp, #4]
 8001682:	f7ff fefd 	bl	8001480 <chSchReadyI>
 8001686:	e00d      	b.n	80016a4 <chSchWakeupS+0x44>
  }
  else {
    otp = chSchReadyI(otp);
 8001688:	9803      	ldr	r0, [sp, #12]
 800168a:	f7ff fef9 	bl	8001480 <chSchReadyI>
 800168e:	9003      	str	r0, [sp, #12]
    if (otp->prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
 8001690:	4a06      	ldr	r2, [pc, #24]	; (80016ac <chSchWakeupS+0x4c>)
 8001692:	9b01      	ldr	r3, [sp, #4]
 8001694:	6113      	str	r3, [r2, #16]
    ntp->state = CH_STATE_CURRENT;
 8001696:	9b01      	ldr	r3, [sp, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	741a      	strb	r2, [r3, #16]

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 800169c:	9903      	ldr	r1, [sp, #12]
 800169e:	9801      	ldr	r0, [sp, #4]
 80016a0:	f7fe fd7e 	bl	80001a0 <_port_switch>
  }
}
 80016a4:	b005      	add	sp, #20
 80016a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80016aa:	bf00      	nop
 80016ac:	20001f48 	.word	0x20001f48

080016b0 <chSchRescheduleS>:
 * @details If a thread with a higher priority than the current thread is in
 *          the ready list then make the higher priority thread running.
 *
 * @sclass
 */
void chSchRescheduleS(void) {
 80016b0:	b508      	push	{r3, lr}

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 80016b2:	f001 f8bd 	bl	8002830 <chSchIsRescRequiredI.lto_priv.62>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <chSchRescheduleS+0x10>
    chSchDoRescheduleAhead();
 80016bc:	f000 f820 	bl	8001700 <chSchDoRescheduleAhead>
  }
}
 80016c0:	bd08      	pop	{r3, pc}
 80016c2:	bf00      	nop
	...

080016d0 <chSchIsPreemptionRequired>:
 *                      immediately.
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
 80016d0:	b082      	sub	sp, #8
  tprio_t p1 = firstprio(&ch.rlist.queue);
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <chSchIsPreemptionRequired+0x28>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	9301      	str	r3, [sp, #4]
  tprio_t p2 = currp->prio;
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <chSchIsPreemptionRequired+0x28>)
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	9300      	str	r3, [sp, #0]
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
 80016e2:	9a01      	ldr	r2, [sp, #4]
 80016e4:	9b00      	ldr	r3, [sp, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	bf8c      	ite	hi
 80016ea:	2301      	movhi	r3, #1
 80016ec:	2300      	movls	r3, #0
 80016ee:	b2db      	uxtb	r3, r3
#endif
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	b002      	add	sp, #8
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20001f48 	.word	0x20001f48
 80016fc:	00000000 	.word	0x00000000

08001700 <chSchDoRescheduleAhead>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8001700:	b500      	push	{lr}
 8001702:	b083      	sub	sp, #12
  thread_t *otp = currp;
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <chSchDoRescheduleAhead+0x38>)
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	9301      	str	r3, [sp, #4]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 800170a:	480b      	ldr	r0, [pc, #44]	; (8001738 <chSchDoRescheduleAhead+0x38>)
 800170c:	f001 f868 	bl	80027e0 <queue_fifo_remove.lto_priv.41>
 8001710:	4602      	mov	r2, r0
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <chSchDoRescheduleAhead+0x38>)
 8001714:	611a      	str	r2, [r3, #16]
  currp->state = CH_STATE_CURRENT;
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <chSchDoRescheduleAhead+0x38>)
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	2201      	movs	r2, #1
 800171c:	741a      	strb	r2, [r3, #16]
  if (otp->prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);
 800171e:	9801      	ldr	r0, [sp, #4]
 8001720:	f7ff fed6 	bl	80014d0 <chSchReadyAheadI>
 8001724:	9001      	str	r0, [sp, #4]

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8001726:	4b04      	ldr	r3, [pc, #16]	; (8001738 <chSchDoRescheduleAhead+0x38>)
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	9901      	ldr	r1, [sp, #4]
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fd37 	bl	80001a0 <_port_switch>
}
 8001732:	b003      	add	sp, #12
 8001734:	f85d fb04 	ldr.w	pc, [sp], #4
 8001738:	20001f48 	.word	0x20001f48
 800173c:	00000000 	.word	0x00000000

08001740 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8001740:	b500      	push	{lr}
 8001742:	b083      	sub	sp, #12
  thread_t *otp = currp;
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <chSchDoReschedule+0x38>)
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	9301      	str	r3, [sp, #4]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 800174a:	480b      	ldr	r0, [pc, #44]	; (8001778 <chSchDoReschedule+0x38>)
 800174c:	f001 f848 	bl	80027e0 <queue_fifo_remove.lto_priv.41>
 8001750:	4602      	mov	r2, r0
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <chSchDoReschedule+0x38>)
 8001754:	611a      	str	r2, [r3, #16]
  currp->state = CH_STATE_CURRENT;
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <chSchDoReschedule+0x38>)
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	2201      	movs	r2, #1
 800175c:	741a      	strb	r2, [r3, #16]
    otp = chSchReadyAheadI(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
 800175e:	9801      	ldr	r0, [sp, #4]
 8001760:	f7ff feb6 	bl	80014d0 <chSchReadyAheadI>
 8001764:	9001      	str	r0, [sp, #4]
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <chSchDoReschedule+0x38>)
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	9901      	ldr	r1, [sp, #4]
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fd17 	bl	80001a0 <_port_switch>
}
 8001772:	b003      	add	sp, #12
 8001774:	f85d fb04 	ldr.w	pc, [sp], #4
 8001778:	20001f48 	.word	0x20001f48
 800177c:	00000000 	.word	0x00000000

08001780 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b084      	sub	sp, #16
 8001782:	9001      	str	r0, [sp, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001784:	9b01      	ldr	r3, [sp, #4]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	9303      	str	r3, [sp, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800178c:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <NVIC_SetPriorityGrouping+0x38>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	9302      	str	r3, [sp, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8001792:	9a02      	ldr	r2, [sp, #8]
 8001794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001798:	4013      	ands	r3, r2
 800179a:	9302      	str	r3, [sp, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
 800179c:	9b03      	ldr	r3, [sp, #12]
 800179e:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a0:	9b02      	ldr	r3, [sp, #8]
 80017a2:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80017a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ac:	9302      	str	r3, [sp, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80017ae:	4a02      	ldr	r2, [pc, #8]	; (80017b8 <NVIC_SetPriorityGrouping+0x38>)
 80017b0:	9b02      	ldr	r3, [sp, #8]
 80017b2:	60d3      	str	r3, [r2, #12]
}
 80017b4:	b004      	add	sp, #16
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00
 80017bc:	00000000 	.word	0x00000000

080017c0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c0:	b082      	sub	sp, #8
 80017c2:	4603      	mov	r3, r0
 80017c4:	9100      	str	r1, [sp, #0]
 80017c6:	f88d 3007 	strb.w	r3, [sp, #7]
  if((int32_t)IRQn < 0) {
 80017ca:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	da0c      	bge.n	80017ec <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d2:	490c      	ldr	r1, [pc, #48]	; (8001804 <NVIC_SetPriority+0x44>)
 80017d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80017d8:	f003 030f 	and.w	r3, r3, #15
 80017dc:	3b04      	subs	r3, #4
 80017de:	9a00      	ldr	r2, [sp, #0]
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	0112      	lsls	r2, r2, #4
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	440b      	add	r3, r1
 80017e8:	761a      	strb	r2, [r3, #24]
 80017ea:	e009      	b.n	8001800 <NVIC_SetPriority+0x40>
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ec:	4906      	ldr	r1, [pc, #24]	; (8001808 <NVIC_SetPriority+0x48>)
 80017ee:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80017f2:	9a00      	ldr	r2, [sp, #0]
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	0112      	lsls	r2, r2, #4
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	440b      	add	r3, r1
 80017fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8001800:	b002      	add	sp, #8
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00
 8001808:	e000e100 	.word	0xe000e100
 800180c:	00000000 	.word	0x00000000

08001810 <port_init>:
/*===========================================================================*/

/**
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {
 8001810:	b508      	push	{r3, lr}

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <port_init+0x3c>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);
 8001818:	2003      	movs	r0, #3
 800181a:	f7ff ffb1 	bl	8001780 <NVIC_SetPriorityGrouping>

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800181e:	4a0c      	ldr	r2, [pc, #48]	; (8001850 <port_init+0x40>)
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <port_init+0x40>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001828:	60d3      	str	r3, [r2, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800182a:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <port_init+0x44>)
 800182c:	4b09      	ldr	r3, [pc, #36]	; (8001854 <port_init+0x44>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6013      	str	r3, [r2, #0]

  /* Initialization of the system vectors used by the port.*/
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  NVIC_SetPriority(SVCall_IRQn, CORTEX_PRIORITY_SVCALL);
 8001836:	2101      	movs	r1, #1
 8001838:	f06f 0004 	mvn.w	r0, #4
 800183c:	f7ff ffc0 	bl	80017c0 <NVIC_SetPriority>
#endif
  NVIC_SetPriority(PendSV_IRQn, CORTEX_PRIORITY_PENDSV);
 8001840:	2102      	movs	r1, #2
 8001842:	f06f 0001 	mvn.w	r0, #1
 8001846:	f7ff ffbb 	bl	80017c0 <NVIC_SetPriority>

    /* MPU is enabled.*/
    mpuEnable(MPU_CTRL_PRIVDEFENA);
  }
#endif
}
 800184a:	bd08      	pop	{r3, pc}
 800184c:	e000ed00 	.word	0xe000ed00
 8001850:	e000edf0 	.word	0xe000edf0
 8001854:	e0001000 	.word	0xe0001000
	...

08001860 <port_lock.lto_priv.51>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8001860:	b082      	sub	sp, #8
 8001862:	2320      	movs	r3, #32
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	9b01      	ldr	r3, [sp, #4]
 8001868:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800186c:	b002      	add	sp, #8
 800186e:	4770      	bx	lr

08001870 <port_unlock.lto_priv.48>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8001870:	b082      	sub	sp, #8
 8001872:	2300      	movs	r3, #0
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	9b01      	ldr	r3, [sp, #4]
 8001878:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800187c:	b002      	add	sp, #8
 800187e:	4770      	bx	lr

08001880 <port_lock_from_isr>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 8001880:	b508      	push	{r3, lr}

  port_lock();
 8001882:	f7ff ffed 	bl	8001860 <port_lock.lto_priv.51>
}
 8001886:	bd08      	pop	{r3, pc}
	...

08001890 <port_unlock_from_isr>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 8001890:	b508      	push	{r3, lr}

  port_unlock();
 8001892:	f7ff ffed 	bl	8001870 <port_unlock.lto_priv.48>
}
 8001896:	bd08      	pop	{r3, pc}
	...

080018a0 <port_enable>:

/**
 * @brief   Enables all the interrupt sources.
 * @note    In this port it lowers the base priority to user level.
 */
static inline void port_enable(void) {
 80018a0:	b082      	sub	sp, #8
 80018a2:	2300      	movs	r3, #0
 80018a4:	9301      	str	r3, [sp, #4]
 80018a6:	9b01      	ldr	r3, [sp, #4]
 80018a8:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80018ac:	b662      	cpsie	i

#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#endif
  __enable_irq();
}
 80018ae:	b002      	add	sp, #8
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
	...

080018c0 <port_wait_for_interrupt>:
static inline void port_wait_for_interrupt(void) {

#if CORTEX_ENABLE_WFI_IDLE == TRUE
  __WFI();
#endif
}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
	...

080018d0 <chSysEnable>:
 * @note    This API is no replacement for @p chSysUnlock(), the
 *          @p chSysUnlock() could do more than just enable the interrupts.
 *
 * @special
 */
static inline void chSysEnable(void) {
 80018d0:	b508      	push	{r3, lr}

  _dbg_check_enable();
  port_enable();
 80018d2:	f7ff ffe5 	bl	80018a0 <port_enable>
}
 80018d6:	bd08      	pop	{r3, pc}
	...

080018e0 <chSysLockFromISR.lto_priv.57>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 80018e0:	b508      	push	{r3, lr}

  port_lock_from_isr();
 80018e2:	f7ff ffcd 	bl	8001880 <port_lock_from_isr>
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
}
 80018e6:	bd08      	pop	{r3, pc}
	...

080018f0 <chSysUnlockFromISR.lto_priv.55>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 80018f0:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
 80018f2:	f7ff ffcd 	bl	8001890 <port_unlock_from_isr>
}
 80018f6:	bd08      	pop	{r3, pc}
	...

08001900 <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {
 8001900:	b500      	push	{lr}
 8001902:	b083      	sub	sp, #12

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <chVTDoTickI+0x68>)
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	3301      	adds	r3, #1
 800190a:	4a17      	ldr	r2, [pc, #92]	; (8001968 <chVTDoTickI+0x68>)
 800190c:	6213      	str	r3, [r2, #32]
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <chVTDoTickI+0x68>)
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	4a16      	ldr	r2, [pc, #88]	; (800196c <chVTDoTickI+0x6c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d024      	beq.n	8001962 <chVTDoTickI+0x62>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
 8001918:	4b13      	ldr	r3, [pc, #76]	; (8001968 <chVTDoTickI+0x68>)
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	3a01      	subs	r2, #1
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	e019      	b.n	8001958 <chVTDoTickI+0x58>
    while (ch.vtlist.next->delta == (systime_t)0) {
      virtual_timer_t *vtp;
      vtfunc_t fn;

      vtp = ch.vtlist.next;
 8001924:	4b10      	ldr	r3, [pc, #64]	; (8001968 <chVTDoTickI+0x68>)
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	9301      	str	r3, [sp, #4]
      fn = vtp->func;
 800192a:	9b01      	ldr	r3, [sp, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	9300      	str	r3, [sp, #0]
      vtp->func = NULL;
 8001930:	9b01      	ldr	r3, [sp, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8001936:	9b01      	ldr	r3, [sp, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a0c      	ldr	r2, [pc, #48]	; (800196c <chVTDoTickI+0x6c>)
 800193c:	605a      	str	r2, [r3, #4]
      ch.vtlist.next = vtp->next;
 800193e:	9b01      	ldr	r3, [sp, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a09      	ldr	r2, [pc, #36]	; (8001968 <chVTDoTickI+0x68>)
 8001944:	6153      	str	r3, [r2, #20]
      chSysUnlockFromISR();
 8001946:	f7ff ffd3 	bl	80018f0 <chSysUnlockFromISR.lto_priv.55>
      fn(vtp->par);
 800194a:	9b01      	ldr	r3, [sp, #4]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	9b00      	ldr	r3, [sp, #0]
 8001950:	4610      	mov	r0, r2
 8001952:	4798      	blx	r3
      chSysLockFromISR();
 8001954:	f7ff ffc4 	bl	80018e0 <chSysLockFromISR.lto_priv.57>
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
    while (ch.vtlist.next->delta == (systime_t)0) {
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <chVTDoTickI+0x68>)
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0e0      	beq.n	8001924 <chVTDoTickI+0x24>

  chDbgAssert((chVTGetSystemTimeX() - ch.vtlist.lasttime) <=
              (now + delta - ch.vtlist.lasttime),
              "exceeding delta");
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001962:	b003      	add	sp, #12
 8001964:	f85d fb04 	ldr.w	pc, [sp], #4
 8001968:	20001f48 	.word	0x20001f48
 800196c:	20001f5c 	.word	0x20001f5c

08001970 <_idle_thread.lto_priv.111>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8001970:	b500      	push	{lr}
 8001972:	b083      	sub	sp, #12
 8001974:	9001      	str	r0, [sp, #4]
  (void)p;

  while (true) {
    /*lint -save -e522 [2.2] Apparently no side effects because it contains
      an asm instruction.*/
    port_wait_for_interrupt();
 8001976:	f7ff ffa3 	bl	80018c0 <port_wait_for_interrupt>
 800197a:	e7fc      	b.n	8001976 <_idle_thread.lto_priv.111+0x6>
 800197c:	0000      	movs	r0, r0
	...

08001980 <chSysInit>:
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8001980:	b508      	push	{r3, lr}

  _scheduler_init();
 8001982:	f7ff fd6d 	bl	8001460 <_scheduler_init>
  _vt_init();
 8001986:	f7ff fc83 	bl	8001290 <_vt_init>
#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  ch.dbg.isr_cnt  = (cnt_t)0;
  ch.dbg.lock_cnt = (cnt_t)0;
#endif
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 800198a:	f7ff fc19 	bl	80011c0 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 800198e:	f000 fee7 	bl	8002760 <_core_init>
#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
#else
  currp = _thread_init(&ch.mainthread, "main", NORMALPRIO);
 8001992:	2280      	movs	r2, #128	; 0x80
 8001994:	4909      	ldr	r1, [pc, #36]	; (80019bc <chSysInit+0x3c>)
 8001996:	480a      	ldr	r0, [pc, #40]	; (80019c0 <chSysInit+0x40>)
 8001998:	f000 f89a 	bl	8001ad0 <_thread_init>
 800199c:	4602      	mov	r2, r0
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <chSysInit+0x44>)
 80019a0:	611a      	str	r2, [r3, #16]
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <chSysInit+0x44>)
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	2201      	movs	r2, #1
 80019a8:	741a      	strb	r2, [r3, #16]

  /* Port layer initialization last because it depend on some of the
     initializations performed before.*/
  port_init();
 80019aa:	f7ff ff31 	bl	8001810 <port_init>
  /* Starting measurement for this thread.*/
  chTMStartMeasurementX(&currp->stats);
#endif

  /* It is alive now.*/
  chSysEnable();
 80019ae:	f7ff ff8f 	bl	80018d0 <chSysEnable>
    };

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdCreate(&idle_descriptor);
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <chSysInit+0x48>)
 80019b4:	f7ff fb54 	bl	8001060 <chThdCreate>
  }
#endif
}
 80019b8:	bd08      	pop	{r3, pc}
 80019ba:	bf00      	nop
 80019bc:	080028e0 	.word	0x080028e0
 80019c0:	20001f70 	.word	0x20001f70
 80019c4:	20001f48 	.word	0x20001f48
 80019c8:	08002aa4 	.word	0x08002aa4
 80019cc:	00000000 	.word	0x00000000

080019d0 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 80019d0:	b508      	push	{r3, lr}
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
 80019d2:	f7ff ff95 	bl	8001900 <chVTDoTickI>
  CH_CFG_SYSTEM_TICK_HOOK();
}
 80019d6:	bd08      	pop	{r3, pc}
	...

080019e0 <port_lock.lto_priv.52>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 80019e0:	b082      	sub	sp, #8
 80019e2:	2320      	movs	r3, #32
 80019e4:	9301      	str	r3, [sp, #4]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80019e6:	9b01      	ldr	r3, [sp, #4]
 80019e8:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80019ec:	b002      	add	sp, #8
 80019ee:	4770      	bx	lr

080019f0 <port_unlock.lto_priv.49>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 80019f0:	b082      	sub	sp, #8
 80019f2:	2300      	movs	r3, #0
 80019f4:	9301      	str	r3, [sp, #4]
 80019f6:	9b01      	ldr	r3, [sp, #4]
 80019f8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80019fc:	b002      	add	sp, #8
 80019fe:	4770      	bx	lr

08001a00 <list_init>:
 *
 * @param[in] tlp       pointer to the threads list object
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {
 8001a00:	b082      	sub	sp, #8
 8001a02:	9001      	str	r0, [sp, #4]

  tlp->next = (thread_t *)tlp;
 8001a04:	9b01      	ldr	r3, [sp, #4]
 8001a06:	9a01      	ldr	r2, [sp, #4]
 8001a08:	601a      	str	r2, [r3, #0]
}
 8001a0a:	b002      	add	sp, #8
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop

08001a10 <list_notempty.lto_priv.38>:
 * @param[in] tlp       pointer to the threads list object
 * @return              The status of the list.
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {
 8001a10:	b082      	sub	sp, #8
 8001a12:	9001      	str	r0, [sp, #4]

  return (bool)(tlp->next != (thread_t *)tlp);
 8001a14:	9b01      	ldr	r3, [sp, #4]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	9b01      	ldr	r3, [sp, #4]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	bf14      	ite	ne
 8001a1e:	2301      	movne	r3, #1
 8001a20:	2300      	moveq	r3, #0
 8001a22:	b2db      	uxtb	r3, r3
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	b002      	add	sp, #8
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	0000      	movs	r0, r0
	...

08001a30 <queue_init.lto_priv.46>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
 8001a30:	b082      	sub	sp, #8
 8001a32:	9001      	str	r0, [sp, #4]

  tqp->next = (thread_t *)tqp;
 8001a34:	9b01      	ldr	r3, [sp, #4]
 8001a36:	9a01      	ldr	r2, [sp, #4]
 8001a38:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8001a3a:	9b01      	ldr	r3, [sp, #4]
 8001a3c:	9a01      	ldr	r2, [sp, #4]
 8001a3e:	605a      	str	r2, [r3, #4]
}
 8001a40:	b002      	add	sp, #8
 8001a42:	4770      	bx	lr
	...

08001a50 <list_remove.lto_priv.39>:

  tp->queue.next = tlp->next;
  tlp->next = tp;
}

static inline thread_t *list_remove(threads_list_t *tlp) {
 8001a50:	b084      	sub	sp, #16
 8001a52:	9001      	str	r0, [sp, #4]

  thread_t *tp = tlp->next;
 8001a54:	9b01      	ldr	r3, [sp, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	9303      	str	r3, [sp, #12]
  tlp->next = tp->queue.next;
 8001a5a:	9b03      	ldr	r3, [sp, #12]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	9b01      	ldr	r3, [sp, #4]
 8001a60:	601a      	str	r2, [r3, #0]

  return tp;
 8001a62:	9b03      	ldr	r3, [sp, #12]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	b004      	add	sp, #16
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	0000      	movs	r0, r0
	...

08001a70 <chSysLock.lto_priv.27>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void) {
 8001a70:	b508      	push	{r3, lr}

  port_lock();
 8001a72:	f7ff ffb5 	bl	80019e0 <port_lock.lto_priv.52>
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
}
 8001a76:	bd08      	pop	{r3, pc}
	...

08001a80 <chSysUnlock.lto_priv.25>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 8001a80:	b508      	push	{r3, lr}
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  port_unlock();
 8001a82:	f7ff ffb5 	bl	80019f0 <port_unlock.lto_priv.49>
}
 8001a86:	bd08      	pop	{r3, pc}
	...

08001a90 <chThdStartI.lto_priv.40>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
static inline thread_t *chThdStartI(thread_t *tp) {
 8001a90:	b500      	push	{lr}
 8001a92:	b083      	sub	sp, #12
 8001a94:	9001      	str	r0, [sp, #4]

  chDbgAssert(tp->state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 8001a96:	9801      	ldr	r0, [sp, #4]
 8001a98:	f7ff fcf2 	bl	8001480 <chSchReadyI>
 8001a9c:	4603      	mov	r3, r0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	b003      	add	sp, #12
 8001aa2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001aa6:	bf00      	nop
	...

08001ab0 <chThdSleepS.lto_priv.35>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @sclass
 */
static inline void chThdSleepS(systime_t time) {
 8001ab0:	b500      	push	{lr}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	9001      	str	r0, [sp, #4]

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8001ab6:	9901      	ldr	r1, [sp, #4]
 8001ab8:	2008      	movs	r0, #8
 8001aba:	f7ff fd99 	bl	80015f0 <chSchGoSleepTimeoutS>
}
 8001abe:	b003      	add	sp, #12
 8001ac0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001ad0 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {
 8001ad0:	b500      	push	{lr}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	9003      	str	r0, [sp, #12]
 8001ad6:	9102      	str	r1, [sp, #8]
 8001ad8:	9201      	str	r2, [sp, #4]

  tp->prio      = prio;
 8001ada:	9b03      	ldr	r3, [sp, #12]
 8001adc:	9a01      	ldr	r2, [sp, #4]
 8001ade:	609a      	str	r2, [r3, #8]
  tp->state     = CH_STATE_WTSTART;
 8001ae0:	9b03      	ldr	r3, [sp, #12]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	741a      	strb	r2, [r3, #16]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001ae6:	9b03      	ldr	r3, [sp, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	745a      	strb	r2, [r3, #17]
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 8001aec:	9b03      	ldr	r3, [sp, #12]
 8001aee:	9a01      	ldr	r2, [sp, #4]
 8001af0:	62da      	str	r2, [r3, #44]	; 0x2c
  tp->mtxlist   = NULL;
 8001af2:	9b03      	ldr	r3, [sp, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 8001af8:	9b03      	ldr	r3, [sp, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	625a      	str	r2, [r3, #36]	; 0x24
  REG_INSERT(tp);
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
 8001afe:	9b03      	ldr	r3, [sp, #12]
 8001b00:	3318      	adds	r3, #24
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff7c 	bl	8001a00 <list_init>
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->msgqueue);
 8001b08:	9b03      	ldr	r3, [sp, #12]
 8001b0a:	331c      	adds	r3, #28
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff8f 	bl	8001a30 <queue_init.lto_priv.46>
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->stats);
#endif
  CH_CFG_THREAD_INIT_HOOK(tp);
  return tp;
 8001b12:	9b03      	ldr	r3, [sp, #12]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	b005      	add	sp, #20
 8001b18:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b1c:	0000      	movs	r0, r0
	...

08001b20 <chThdCreateSuspendedI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8001b20:	b500      	push	{lr}
 8001b22:	b085      	sub	sp, #20
 8001b24:	9001      	str	r0, [sp, #4]
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8001b26:	9b01      	ldr	r3, [sp, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	3b38      	subs	r3, #56	; 0x38
 8001b2c:	9303      	str	r3, [sp, #12]
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001b2e:	9b03      	ldr	r3, [sp, #12]
 8001b30:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001b34:	9b03      	ldr	r3, [sp, #12]
 8001b36:	60da      	str	r2, [r3, #12]
 8001b38:	9b03      	ldr	r3, [sp, #12]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	9a01      	ldr	r2, [sp, #4]
 8001b3e:	6912      	ldr	r2, [r2, #16]
 8001b40:	641a      	str	r2, [r3, #64]	; 0x40
 8001b42:	9b03      	ldr	r3, [sp, #12]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	9a01      	ldr	r2, [sp, #4]
 8001b48:	6952      	ldr	r2, [r2, #20]
 8001b4a:	645a      	str	r2, [r3, #68]	; 0x44
 8001b4c:	9b03      	ldr	r3, [sp, #12]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <chThdCreateSuspendedI+0x50>)
 8001b52:	661a      	str	r2, [r3, #96]	; 0x60

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
 8001b54:	9b01      	ldr	r3, [sp, #4]
 8001b56:	6819      	ldr	r1, [r3, #0]
 8001b58:	9b01      	ldr	r3, [sp, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	9803      	ldr	r0, [sp, #12]
 8001b60:	f7ff ffb6 	bl	8001ad0 <_thread_init>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	b005      	add	sp, #20
 8001b6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b6e:	bf00      	nop
 8001b70:	080001b9 	.word	0x080001b9
	...

08001b80 <Led_Init>:
{
	{heartBeatExec, GPIOA, GPIOA_PIN5, FALSE}
};

void Led_Init(uint32_t rec)
{
 8001b80:	b500      	push	{lr}
 8001b82:	b085      	sub	sp, #20
 8001b84:	9001      	str	r0, [sp, #4]
	uint32_t id = 0u;
 8001b86:	2300      	movs	r3, #0
 8001b88:	9303      	str	r3, [sp, #12]

	memset(&Led_Data, 0u, sizeof(Led_Data));
 8001b8a:	222c      	movs	r2, #44	; 0x2c
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	483d      	ldr	r0, [pc, #244]	; (8001c84 <Led_Init+0x104>)
 8001b90:	f000 fe9e 	bl	80028d0 <memset>
	Led_Data.mainFunctionRec = rec;
 8001b94:	4a3b      	ldr	r2, [pc, #236]	; (8001c84 <Led_Init+0x104>)
 8001b96:	9b01      	ldr	r3, [sp, #4]
 8001b98:	6013      	str	r3, [r2, #0]

	for (id = 0u; id < (uint32_t)LED_ID_UNKNOWN; id++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	9303      	str	r3, [sp, #12]
 8001b9e:	e06b      	b.n	8001c78 <Led_Init+0xf8>
	{
		memcpy(&Led_Data.container[id].config, &Led_Config[id], sizeof(Led_Data.container[id].config));
 8001ba0:	9a03      	ldr	r2, [sp, #12]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4a36      	ldr	r2, [pc, #216]	; (8001c84 <Led_Init+0x104>)
 8001bac:	4413      	add	r3, r2
 8001bae:	1d18      	adds	r0, r3, #4
 8001bb0:	9b03      	ldr	r3, [sp, #12]
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	4a34      	ldr	r2, [pc, #208]	; (8001c88 <Led_Init+0x108>)
 8001bb6:	4413      	add	r3, r2
 8001bb8:	2210      	movs	r2, #16
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f000 fe78 	bl	80028b0 <memcpy>
		setLedInactive(id);
 8001bc0:	9b03      	ldr	r3, [sp, #12]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 f933 	bl	8001e30 <setLedInactive>
		Led_Data.container[id].state = getLedState(id);
 8001bca:	9b03      	ldr	r3, [sp, #12]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 f98e 	bl	8001ef0 <getLedState>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	492a      	ldr	r1, [pc, #168]	; (8001c84 <Led_Init+0x104>)
 8001bda:	9a03      	ldr	r2, [sp, #12]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	440b      	add	r3, r1
 8001be6:	3328      	adds	r3, #40	; 0x28
 8001be8:	4602      	mov	r2, r0
 8001bea:	701a      	strb	r2, [r3, #0]
		Led_Data.container[id].execState = LED_EXEC_STATE_UNKNOWN;
 8001bec:	4925      	ldr	r1, [pc, #148]	; (8001c84 <Led_Init+0x104>)
 8001bee:	9a03      	ldr	r2, [sp, #12]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	440b      	add	r3, r1
 8001bfa:	3329      	adds	r3, #41	; 0x29
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	701a      	strb	r2, [r3, #0]

		if (Led_Data.container[id].config.exec != NULL)
 8001c00:	4920      	ldr	r1, [pc, #128]	; (8001c84 <Led_Init+0x104>)
 8001c02:	9a03      	ldr	r2, [sp, #12]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3304      	adds	r3, #4
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d02d      	beq.n	8001c72 <Led_Init+0xf2>
		{
			switch (Led_Data.container[id].state)
 8001c16:	491b      	ldr	r1, [pc, #108]	; (8001c84 <Led_Init+0x104>)
 8001c18:	9a03      	ldr	r2, [sp, #12]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	440b      	add	r3, r1
 8001c24:	3328      	adds	r3, #40	; 0x28
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d002      	beq.n	8001c32 <Led_Init+0xb2>
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d00b      	beq.n	8001c48 <Led_Init+0xc8>
 8001c30:	e015      	b.n	8001c5e <Led_Init+0xde>
			{
			case LED_STATE_OFF:
				Led_Data.container[id].execState = LED_EXEC_STATE_INACTIVE;
 8001c32:	4914      	ldr	r1, [pc, #80]	; (8001c84 <Led_Init+0x104>)
 8001c34:	9a03      	ldr	r2, [sp, #12]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	440b      	add	r3, r1
 8001c40:	3329      	adds	r3, #41	; 0x29
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
 8001c46:	e014      	b.n	8001c72 <Led_Init+0xf2>
				break;
			case LED_STATE_ON:
				Led_Data.container[id].execState = LED_EXEC_STATE_ACTIVE;
 8001c48:	490e      	ldr	r1, [pc, #56]	; (8001c84 <Led_Init+0x104>)
 8001c4a:	9a03      	ldr	r2, [sp, #12]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	440b      	add	r3, r1
 8001c56:	3329      	adds	r3, #41	; 0x29
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
 8001c5c:	e009      	b.n	8001c72 <Led_Init+0xf2>
				break;
			default:
				Led_Data.container[id].execState = LED_EXEC_STATE_UNKNOWN;
 8001c5e:	4909      	ldr	r1, [pc, #36]	; (8001c84 <Led_Init+0x104>)
 8001c60:	9a03      	ldr	r2, [sp, #12]
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	440b      	add	r3, r1
 8001c6c:	3329      	adds	r3, #41	; 0x29
 8001c6e:	2202      	movs	r2, #2
 8001c70:	701a      	strb	r2, [r3, #0]
	uint32_t id = 0u;

	memset(&Led_Data, 0u, sizeof(Led_Data));
	Led_Data.mainFunctionRec = rec;

	for (id = 0u; id < (uint32_t)LED_ID_UNKNOWN; id++)
 8001c72:	9b03      	ldr	r3, [sp, #12]
 8001c74:	3301      	adds	r3, #1
 8001c76:	9303      	str	r3, [sp, #12]
 8001c78:	9b03      	ldr	r3, [sp, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d090      	beq.n	8001ba0 <Led_Init+0x20>
				Led_Data.container[id].execState = LED_EXEC_STATE_UNKNOWN;
				break;
			}
		}
	}
}
 8001c7e:	b005      	add	sp, #20
 8001c80:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c84:	20000800 	.word	0x20000800
 8001c88:	080028f0 	.word	0x080028f0
 8001c8c:	00000000 	.word	0x00000000

08001c90 <Led_MainFunction>:

void Led_MainFunction(void)
{
 8001c90:	b500      	push	{lr}
 8001c92:	b083      	sub	sp, #12
	uint32_t id = 0u;
 8001c94:	2300      	movs	r3, #0
 8001c96:	9301      	str	r3, [sp, #4]

	for (id = 0u; id < LED_ID_UNKNOWN; id++)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	e01a      	b.n	8001cd4 <Led_MainFunction+0x44>
	{
		if (Led_Data.container[id].config.exec != NULL)
 8001c9e:	4910      	ldr	r1, [pc, #64]	; (8001ce0 <Led_MainFunction+0x50>)
 8001ca0:	9a01      	ldr	r2, [sp, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	440b      	add	r3, r1
 8001cac:	3304      	adds	r3, #4
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00c      	beq.n	8001cce <Led_MainFunction+0x3e>
		{
			Led_Data.container[id].config.exec(id);
 8001cb4:	490a      	ldr	r1, [pc, #40]	; (8001ce0 <Led_MainFunction+0x50>)
 8001cb6:	9a01      	ldr	r2, [sp, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	9a01      	ldr	r2, [sp, #4]
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4798      	blx	r3

void Led_MainFunction(void)
{
	uint32_t id = 0u;

	for (id = 0u; id < LED_ID_UNKNOWN; id++)
 8001cce:	9b01      	ldr	r3, [sp, #4]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	9301      	str	r3, [sp, #4]
 8001cd4:	9b01      	ldr	r3, [sp, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0e1      	beq.n	8001c9e <Led_MainFunction+0xe>
		if (Led_Data.container[id].config.exec != NULL)
		{
			Led_Data.container[id].config.exec(id);
		}
	}
}
 8001cda:	b003      	add	sp, #12
 8001cdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ce0:	20000800 	.word	0x20000800
	...

08001cf0 <Led_HeartBeat>:
		Led_Data.container[id].timer.inactiveReload = idleTime / Led_Data.mainFunctionRec;
	}
}

void Led_HeartBeat(const Led_IdType id, const uint32_t activeTime, const uint8_t activeCycles, const uint32_t idleTime)
{
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	9102      	str	r1, [sp, #8]
 8001cf4:	9301      	str	r3, [sp, #4]
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f88d 300f 	strb.w	r3, [sp, #15]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	f88d 300e 	strb.w	r3, [sp, #14]
	if ((id < LED_ID_UNKNOWN) && (Led_Data.mainFunctionRec != 0u))
 8001d02:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d12d      	bne.n	8001d66 <Led_HeartBeat+0x76>
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <Led_HeartBeat+0x7c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d029      	beq.n	8001d66 <Led_HeartBeat+0x76>
	{
		Led_Data.container[id].timer.activeReload = activeTime / Led_Data.mainFunctionRec;
 8001d12:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <Led_HeartBeat+0x7c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	9902      	ldr	r1, [sp, #8]
 8001d1c:	fbb1 f1f3 	udiv	r1, r1, r3
 8001d20:	4812      	ldr	r0, [pc, #72]	; (8001d6c <Led_HeartBeat+0x7c>)
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4403      	add	r3, r0
 8001d2c:	3318      	adds	r3, #24
 8001d2e:	6019      	str	r1, [r3, #0]
		Led_Data.container[id].timer.activeCyclesReload = activeCycles;
 8001d30:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8001d34:	490d      	ldr	r1, [pc, #52]	; (8001d6c <Led_HeartBeat+0x7c>)
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	440b      	add	r3, r1
 8001d40:	331d      	adds	r3, #29
 8001d42:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8001d46:	701a      	strb	r2, [r3, #0]
		Led_Data.container[id].timer.inactiveReload = idleTime / Led_Data.mainFunctionRec;
 8001d48:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <Led_HeartBeat+0x7c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	9901      	ldr	r1, [sp, #4]
 8001d52:	fbb1 f1f3 	udiv	r1, r1, r3
 8001d56:	4805      	ldr	r0, [pc, #20]	; (8001d6c <Led_HeartBeat+0x7c>)
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4403      	add	r3, r0
 8001d62:	3324      	adds	r3, #36	; 0x24
 8001d64:	6019      	str	r1, [r3, #0]
	}
}
 8001d66:	b004      	add	sp, #16
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000800 	.word	0x20000800

08001d70 <setLedActive>:
	return Led_Data.container[id].state;
}


static void setLedActive(const Led_IdType id)
{
 8001d70:	b510      	push	{r4, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	4603      	mov	r3, r0
 8001d76:	f88d 3007 	strb.w	r3, [sp, #7]
	if (id < LED_ID_UNKNOWN)
 8001d7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d150      	bne.n	8001e24 <setLedActive+0xb4>
	{
		if (Led_Data.container[id].config.isInverted)
 8001d82:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001d86:	4928      	ldr	r1, [pc, #160]	; (8001e28 <setLedActive+0xb8>)
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	440b      	add	r3, r1
 8001d92:	3310      	adds	r3, #16
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d019      	beq.n	8001dce <setLedActive+0x5e>
		{
			palClearPad(Led_Data.container[id].config.portNumber, Led_Data.container[id].config.pinNumber);
 8001d9a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001d9e:	4922      	ldr	r1, [pc, #136]	; (8001e28 <setLedActive+0xb8>)
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	440b      	add	r3, r1
 8001daa:	3308      	adds	r3, #8
 8001dac:	6819      	ldr	r1, [r3, #0]
 8001dae:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001db2:	481d      	ldr	r0, [pc, #116]	; (8001e28 <setLedActive+0xb8>)
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4403      	add	r3, r0
 8001dbe:	330c      	adds	r3, #12
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	834b      	strh	r3, [r1, #26]
 8001dcc:	e018      	b.n	8001e00 <setLedActive+0x90>
		}
		else
		{
			palSetPad(Led_Data.container[id].config.portNumber, Led_Data.container[id].config.pinNumber);
 8001dce:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001dd2:	4915      	ldr	r1, [pc, #84]	; (8001e28 <setLedActive+0xb8>)
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	440b      	add	r3, r1
 8001dde:	3308      	adds	r3, #8
 8001de0:	6819      	ldr	r1, [r3, #0]
 8001de2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001de6:	4810      	ldr	r0, [pc, #64]	; (8001e28 <setLedActive+0xb8>)
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4403      	add	r3, r0
 8001df2:	330c      	adds	r3, #12
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2201      	movs	r2, #1
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	830b      	strh	r3, [r1, #24]
		}
		Led_Data.container[id].state = getLedState(id);
 8001e00:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8001e04:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f000 f871 	bl	8001ef0 <getLedState>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4619      	mov	r1, r3
 8001e12:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <setLedActive+0xb8>)
 8001e14:	4623      	mov	r3, r4
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4423      	add	r3, r4
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3328      	adds	r3, #40	; 0x28
 8001e20:	460a      	mov	r2, r1
 8001e22:	701a      	strb	r2, [r3, #0]
	}
}
 8001e24:	b002      	add	sp, #8
 8001e26:	bd10      	pop	{r4, pc}
 8001e28:	20000800 	.word	0x20000800
 8001e2c:	00000000 	.word	0x00000000

08001e30 <setLedInactive>:

static void setLedInactive(const Led_IdType id)
{
 8001e30:	b510      	push	{r4, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	4603      	mov	r3, r0
 8001e36:	f88d 3007 	strb.w	r3, [sp, #7]
	if (id < LED_ID_UNKNOWN)
 8001e3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d150      	bne.n	8001ee4 <setLedInactive+0xb4>
	{
		if (Led_Data.container[id].config.isInverted)
 8001e42:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001e46:	4928      	ldr	r1, [pc, #160]	; (8001ee8 <setLedInactive+0xb8>)
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	440b      	add	r3, r1
 8001e52:	3310      	adds	r3, #16
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d019      	beq.n	8001e8e <setLedInactive+0x5e>
		{
			palSetPad(Led_Data.container[id].config.portNumber, Led_Data.container[id].config.pinNumber);
 8001e5a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001e5e:	4922      	ldr	r1, [pc, #136]	; (8001ee8 <setLedInactive+0xb8>)
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	440b      	add	r3, r1
 8001e6a:	3308      	adds	r3, #8
 8001e6c:	6819      	ldr	r1, [r3, #0]
 8001e6e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001e72:	481d      	ldr	r0, [pc, #116]	; (8001ee8 <setLedInactive+0xb8>)
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4403      	add	r3, r0
 8001e7e:	330c      	adds	r3, #12
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2201      	movs	r2, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	830b      	strh	r3, [r1, #24]
 8001e8c:	e018      	b.n	8001ec0 <setLedInactive+0x90>
		}
		else
		{
			palClearPad(Led_Data.container[id].config.portNumber, Led_Data.container[id].config.pinNumber);
 8001e8e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001e92:	4915      	ldr	r1, [pc, #84]	; (8001ee8 <setLedInactive+0xb8>)
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	440b      	add	r3, r1
 8001e9e:	3308      	adds	r3, #8
 8001ea0:	6819      	ldr	r1, [r3, #0]
 8001ea2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001ea6:	4810      	ldr	r0, [pc, #64]	; (8001ee8 <setLedInactive+0xb8>)
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4403      	add	r3, r0
 8001eb2:	330c      	adds	r3, #12
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	834b      	strh	r3, [r1, #26]
		}
		Led_Data.container[id].state = getLedState(id);
 8001ec0:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8001ec4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 f811 	bl	8001ef0 <getLedState>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4a05      	ldr	r2, [pc, #20]	; (8001ee8 <setLedInactive+0xb8>)
 8001ed4:	4623      	mov	r3, r4
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4423      	add	r3, r4
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4413      	add	r3, r2
 8001ede:	3328      	adds	r3, #40	; 0x28
 8001ee0:	460a      	mov	r2, r1
 8001ee2:	701a      	strb	r2, [r3, #0]
	}
}
 8001ee4:	b002      	add	sp, #8
 8001ee6:	bd10      	pop	{r4, pc}
 8001ee8:	20000800 	.word	0x20000800
 8001eec:	00000000 	.word	0x00000000

08001ef0 <getLedState>:

static Led_StateType getLedState(const Led_IdType id)
{
 8001ef0:	b084      	sub	sp, #16
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f88d 3007 	strb.w	r3, [sp, #7]
	Led_StateType retVal = LED_STATE_UNKNOWN;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	f88d 300f 	strb.w	r3, [sp, #15]
	if (id < LED_ID_UNKNOWN)
 8001efe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d150      	bne.n	8001fa8 <getLedState+0xb8>
	{
		uint8_t tmp;

		if (Led_Config[id].isInverted)
 8001f06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001f0a:	4a2a      	ldr	r2, [pc, #168]	; (8001fb4 <getLedState+0xc4>)
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	4413      	add	r3, r2
 8001f10:	330c      	adds	r3, #12
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d020      	beq.n	8001f5a <getLedState+0x6a>
		{
			tmp = ((~palReadPad(Led_Data.container[id].config.portNumber, Led_Data.container[id].config.pinNumber)) & 1u);
 8001f18:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001f1c:	4926      	ldr	r1, [pc, #152]	; (8001fb8 <getLedState+0xc8>)
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	440b      	add	r3, r1
 8001f28:	3308      	adds	r3, #8
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6919      	ldr	r1, [r3, #16]
 8001f2e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001f32:	4821      	ldr	r0, [pc, #132]	; (8001fb8 <getLedState+0xc8>)
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4403      	add	r3, r0
 8001f3e:	330c      	adds	r3, #12
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	fa21 f303 	lsr.w	r3, r1, r3
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bf0c      	ite	eq
 8001f4e:	2301      	moveq	r3, #1
 8001f50:	2300      	movne	r3, #0
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	f88d 300e 	strb.w	r3, [sp, #14]
 8001f58:	e01b      	b.n	8001f92 <getLedState+0xa2>
		}
		else
		{
			tmp = ((palReadPad(Led_Data.container[id].config.portNumber, Led_Data.container[id].config.pinNumber)) & 1u);
 8001f5a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001f5e:	4916      	ldr	r1, [pc, #88]	; (8001fb8 <getLedState+0xc8>)
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	440b      	add	r3, r1
 8001f6a:	3308      	adds	r3, #8
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6919      	ldr	r1, [r3, #16]
 8001f70:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001f74:	4810      	ldr	r0, [pc, #64]	; (8001fb8 <getLedState+0xc8>)
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4403      	add	r3, r0
 8001f80:	330c      	adds	r3, #12
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	fa21 f303 	lsr.w	r3, r1, r3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	f88d 300e 	strb.w	r3, [sp, #14]
		}
		if (tmp != 0u)
 8001f92:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <getLedState+0xb2>
		{
			retVal = LED_STATE_ON;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	f88d 300f 	strb.w	r3, [sp, #15]
 8001fa0:	e002      	b.n	8001fa8 <getLedState+0xb8>
		}
		else
		{
			retVal = LED_STATE_OFF;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f88d 300f 	strb.w	r3, [sp, #15]
		}
	}

	return retVal;
 8001fa8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	b004      	add	sp, #16
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	080028f0 	.word	0x080028f0
 8001fb8:	20000800 	.word	0x20000800
 8001fbc:	00000000 	.word	0x00000000

08001fc0 <toggleLed>:

static void toggleLed(const Led_IdType id)
{
 8001fc0:	b510      	push	{r4, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f88d 3007 	strb.w	r3, [sp, #7]
	palTogglePad(Led_Data.container[id].config.portNumber, Led_Data.container[id].config.pinNumber);
 8001fca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001fce:	491b      	ldr	r1, [pc, #108]	; (800203c <toggleLed+0x7c>)
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	440b      	add	r3, r1
 8001fda:	3308      	adds	r3, #8
 8001fdc:	6819      	ldr	r1, [r3, #0]
 8001fde:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001fe2:	4816      	ldr	r0, [pc, #88]	; (800203c <toggleLed+0x7c>)
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4403      	add	r3, r0
 8001fee:	3308      	adds	r3, #8
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6958      	ldr	r0, [r3, #20]
 8001ff4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001ff8:	4c10      	ldr	r4, [pc, #64]	; (800203c <toggleLed+0x7c>)
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4423      	add	r3, r4
 8002004:	330c      	adds	r3, #12
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2201      	movs	r2, #1
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	4043      	eors	r3, r0
 8002010:	614b      	str	r3, [r1, #20]
	Led_Data.container[id].state = getLedState(id);
 8002012:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8002016:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff ff68 	bl	8001ef0 <getLedState>
 8002020:	4603      	mov	r3, r0
 8002022:	4619      	mov	r1, r3
 8002024:	4a05      	ldr	r2, [pc, #20]	; (800203c <toggleLed+0x7c>)
 8002026:	4623      	mov	r3, r4
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4423      	add	r3, r4
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4413      	add	r3, r2
 8002030:	3328      	adds	r3, #40	; 0x28
 8002032:	460a      	mov	r2, r1
 8002034:	701a      	strb	r2, [r3, #0]
}
 8002036:	b002      	add	sp, #8
 8002038:	bd10      	pop	{r4, pc}
 800203a:	bf00      	nop
 800203c:	20000800 	.word	0x20000800

08002040 <heartBeatExec>:
		break;
	}
}

static void heartBeatExec(const Led_IdType id)
{
 8002040:	b500      	push	{lr}
 8002042:	b083      	sub	sp, #12
 8002044:	4603      	mov	r3, r0
 8002046:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (Led_Data.container[id].execState)
 800204a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800204e:	4993      	ldr	r1, [pc, #588]	; (800229c <heartBeatExec+0x25c>)
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	440b      	add	r3, r1
 800205a:	3329      	adds	r3, #41	; 0x29
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <heartBeatExec+0x28>
 8002062:	2b01      	cmp	r3, #1
 8002064:	d066      	beq.n	8002134 <heartBeatExec+0xf4>
 8002066:	e0f0      	b.n	800224a <heartBeatExec+0x20a>
	{
	case LED_EXEC_STATE_INACTIVE:
		if (swTimer_isElapsed(Led_Data.container[id].timer.inactiveElapsed))
 8002068:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800206c:	498b      	ldr	r1, [pc, #556]	; (800229c <heartBeatExec+0x25c>)
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	440b      	add	r3, r1
 8002078:	3320      	adds	r3, #32
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d138      	bne.n	80020f2 <heartBeatExec+0xb2>
		{
			Led_Data.container[id].execState = LED_EXEC_STATE_ACTIVE;
 8002080:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002084:	4985      	ldr	r1, [pc, #532]	; (800229c <heartBeatExec+0x25c>)
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	440b      	add	r3, r1
 8002090:	3329      	adds	r3, #41	; 0x29
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
			swTimer_set(Led_Data.container[id].timer.activeElapsed, Led_Data.container[id].timer.activeReload);
 8002096:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800209a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800209e:	487f      	ldr	r0, [pc, #508]	; (800229c <heartBeatExec+0x25c>)
 80020a0:	460b      	mov	r3, r1
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4403      	add	r3, r0
 80020aa:	3318      	adds	r3, #24
 80020ac:	6819      	ldr	r1, [r3, #0]
 80020ae:	487b      	ldr	r0, [pc, #492]	; (800229c <heartBeatExec+0x25c>)
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4403      	add	r3, r0
 80020ba:	3314      	adds	r3, #20
 80020bc:	6019      	str	r1, [r3, #0]
			Led_Data.container[id].timer.activeCyclesElapsed = Led_Data.container[id].timer.activeCyclesReload;
 80020be:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80020c2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80020c6:	4875      	ldr	r0, [pc, #468]	; (800229c <heartBeatExec+0x25c>)
 80020c8:	460b      	mov	r3, r1
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4403      	add	r3, r0
 80020d2:	331d      	adds	r3, #29
 80020d4:	7818      	ldrb	r0, [r3, #0]
 80020d6:	4971      	ldr	r1, [pc, #452]	; (800229c <heartBeatExec+0x25c>)
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	440b      	add	r3, r1
 80020e2:	331c      	adds	r3, #28
 80020e4:	4602      	mov	r2, r0
 80020e6:	701a      	strb	r2, [r3, #0]
			setLedActive(id);
 80020e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fe3f 	bl	8001d70 <setLedActive>
		}
		swTimer_tick(Led_Data.container[id].timer.inactiveElapsed);
 80020f2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80020f6:	4969      	ldr	r1, [pc, #420]	; (800229c <heartBeatExec+0x25c>)
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	440b      	add	r3, r1
 8002102:	3320      	adds	r3, #32
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 80c5 	beq.w	8002296 <heartBeatExec+0x256>
 800210c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002110:	4962      	ldr	r1, [pc, #392]	; (800229c <heartBeatExec+0x25c>)
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	440b      	add	r3, r1
 800211c:	3320      	adds	r3, #32
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	1e59      	subs	r1, r3, #1
 8002122:	485e      	ldr	r0, [pc, #376]	; (800229c <heartBeatExec+0x25c>)
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4403      	add	r3, r0
 800212e:	3320      	adds	r3, #32
 8002130:	6019      	str	r1, [r3, #0]
 8002132:	e0b0      	b.n	8002296 <heartBeatExec+0x256>
		break;
	case LED_EXEC_STATE_ACTIVE:
		if (swTimer_isElapsed(Led_Data.container[id].timer.activeElapsed))
 8002134:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002138:	4958      	ldr	r1, [pc, #352]	; (800229c <heartBeatExec+0x25c>)
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	440b      	add	r3, r1
 8002144:	3314      	adds	r3, #20
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d15e      	bne.n	800220a <heartBeatExec+0x1ca>
		{
			if (Led_Data.container[id].timer.activeCyclesElapsed == 0u)
 800214c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002150:	4952      	ldr	r1, [pc, #328]	; (800229c <heartBeatExec+0x25c>)
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	440b      	add	r3, r1
 800215c:	331c      	adds	r3, #28
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d124      	bne.n	80021ae <heartBeatExec+0x16e>
			{
				Led_Data.container[id].execState = LED_EXEC_STATE_INACTIVE;
 8002164:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002168:	494c      	ldr	r1, [pc, #304]	; (800229c <heartBeatExec+0x25c>)
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	440b      	add	r3, r1
 8002174:	3329      	adds	r3, #41	; 0x29
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
				swTimer_set(Led_Data.container[id].timer.inactiveElapsed, Led_Data.container[id].timer.inactiveReload);
 800217a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800217e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002182:	4846      	ldr	r0, [pc, #280]	; (800229c <heartBeatExec+0x25c>)
 8002184:	460b      	mov	r3, r1
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4403      	add	r3, r0
 800218e:	3324      	adds	r3, #36	; 0x24
 8002190:	6819      	ldr	r1, [r3, #0]
 8002192:	4842      	ldr	r0, [pc, #264]	; (800229c <heartBeatExec+0x25c>)
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4403      	add	r3, r0
 800219e:	3320      	adds	r3, #32
 80021a0:	6019      	str	r1, [r3, #0]
				setLedInactive(id);
 80021a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fe42 	bl	8001e30 <setLedInactive>
 80021ac:	e02d      	b.n	800220a <heartBeatExec+0x1ca>
			}
			else
			{
				swTimer_set(Led_Data.container[id].timer.activeElapsed, Led_Data.container[id].timer.activeReload);
 80021ae:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80021b2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80021b6:	4839      	ldr	r0, [pc, #228]	; (800229c <heartBeatExec+0x25c>)
 80021b8:	460b      	mov	r3, r1
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4403      	add	r3, r0
 80021c2:	3318      	adds	r3, #24
 80021c4:	6819      	ldr	r1, [r3, #0]
 80021c6:	4835      	ldr	r0, [pc, #212]	; (800229c <heartBeatExec+0x25c>)
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4403      	add	r3, r0
 80021d2:	3314      	adds	r3, #20
 80021d4:	6019      	str	r1, [r3, #0]
				Led_Data.container[id].timer.activeCyclesElapsed--;
 80021d6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80021da:	4930      	ldr	r1, [pc, #192]	; (800229c <heartBeatExec+0x25c>)
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	440b      	add	r3, r1
 80021e6:	331c      	adds	r3, #28
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	b2d8      	uxtb	r0, r3
 80021ee:	492b      	ldr	r1, [pc, #172]	; (800229c <heartBeatExec+0x25c>)
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	440b      	add	r3, r1
 80021fa:	331c      	adds	r3, #28
 80021fc:	4602      	mov	r2, r0
 80021fe:	701a      	strb	r2, [r3, #0]
				toggleLed(id);
 8002200:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fedb 	bl	8001fc0 <toggleLed>
			}
		}
		swTimer_tick(Led_Data.container[id].timer.activeElapsed);
 800220a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800220e:	4923      	ldr	r1, [pc, #140]	; (800229c <heartBeatExec+0x25c>)
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	440b      	add	r3, r1
 800221a:	3314      	adds	r3, #20
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d039      	beq.n	8002296 <heartBeatExec+0x256>
 8002222:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002226:	491d      	ldr	r1, [pc, #116]	; (800229c <heartBeatExec+0x25c>)
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	440b      	add	r3, r1
 8002232:	3314      	adds	r3, #20
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	1e59      	subs	r1, r3, #1
 8002238:	4818      	ldr	r0, [pc, #96]	; (800229c <heartBeatExec+0x25c>)
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4403      	add	r3, r0
 8002244:	3314      	adds	r3, #20
 8002246:	6019      	str	r1, [r3, #0]
 8002248:	e025      	b.n	8002296 <heartBeatExec+0x256>
		break;
	default:
		swTimer_stop(Led_Data.container[id].timer.activeElapsed);
 800224a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800224e:	4913      	ldr	r1, [pc, #76]	; (800229c <heartBeatExec+0x25c>)
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	3314      	adds	r3, #20
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
		swTimer_stop(Led_Data.container[id].timer.inactiveElapsed);
 8002260:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002264:	490d      	ldr	r1, [pc, #52]	; (800229c <heartBeatExec+0x25c>)
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	440b      	add	r3, r1
 8002270:	3320      	adds	r3, #32
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
		Led_Data.container[id].timer.activeCyclesElapsed = 0u;
 8002276:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800227a:	4908      	ldr	r1, [pc, #32]	; (800229c <heartBeatExec+0x25c>)
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	440b      	add	r3, r1
 8002286:	331c      	adds	r3, #28
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
		setLedInactive(id);
 800228c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fdcd 	bl	8001e30 <setLedInactive>
		break;
	}
}
 8002296:	b003      	add	sp, #12
 8002298:	f85d fb04 	ldr.w	pc, [sp], #4
 800229c:	20000800 	.word	0x20000800

080022a0 <port_lock.lto_priv.79>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 80022a0:	b082      	sub	sp, #8
 80022a2:	2320      	movs	r3, #32
 80022a4:	9301      	str	r3, [sp, #4]
 80022a6:	9b01      	ldr	r3, [sp, #4]
 80022a8:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80022ac:	b002      	add	sp, #8
 80022ae:	4770      	bx	lr

080022b0 <port_unlock.lto_priv.70>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 80022b0:	b082      	sub	sp, #8
 80022b2:	2300      	movs	r3, #0
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	9b01      	ldr	r3, [sp, #4]
 80022b8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80022bc:	b002      	add	sp, #8
 80022be:	4770      	bx	lr

080022c0 <chSysLock.lto_priv.95>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void) {
 80022c0:	b508      	push	{r3, lr}

  port_lock();
 80022c2:	f7ff ffed 	bl	80022a0 <port_lock.lto_priv.79>
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
}
 80022c6:	bd08      	pop	{r3, pc}
	...

080022d0 <chSysUnlock.lto_priv.88>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 80022d0:	b508      	push	{r3, lr}
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  port_unlock();
 80022d2:	f7ff ffed 	bl	80022b0 <port_unlock.lto_priv.70>
}
 80022d6:	bd08      	pop	{r3, pc}
	...

080022e0 <chVTGetSystemTimeX>:
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.systime;
 80022e0:	4b01      	ldr	r3, [pc, #4]	; (80022e8 <chVTGetSystemTimeX+0x8>)
 80022e2:	6a1b      	ldr	r3, [r3, #32]
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  return port_timer_get_time();
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	4770      	bx	lr
 80022e8:	20001f48 	.word	0x20001f48
 80022ec:	00000000 	.word	0x00000000

080022f0 <chVTGetSystemTime>:
 *
 * @return              The system time in ticks.
 *
 * @api
 */
static inline systime_t chVTGetSystemTime(void) {
 80022f0:	b500      	push	{lr}
 80022f2:	b083      	sub	sp, #12
  systime_t systime;

  chSysLock();
 80022f4:	f7ff ffe4 	bl	80022c0 <chSysLock.lto_priv.95>
  systime = chVTGetSystemTimeX();
 80022f8:	f7ff fff2 	bl	80022e0 <chVTGetSystemTimeX>
 80022fc:	9001      	str	r0, [sp, #4]
  chSysUnlock();
 80022fe:	f7ff ffe7 	bl	80022d0 <chSysUnlock.lto_priv.88>

  return systime;
 8002302:	9b01      	ldr	r3, [sp, #4]
}
 8002304:	4618      	mov	r0, r3
 8002306:	b003      	add	sp, #12
 8002308:	f85d fb04 	ldr.w	pc, [sp], #4
 800230c:	0000      	movs	r0, r0
	...

08002310 <chVTIsTimeWithinX>:
 *
 * @xclass
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {
 8002310:	b084      	sub	sp, #16
 8002312:	9003      	str	r0, [sp, #12]
 8002314:	9102      	str	r1, [sp, #8]
 8002316:	9201      	str	r2, [sp, #4]

  return (bool)((systime_t)(time - start) < (systime_t)(end - start));
 8002318:	9a03      	ldr	r2, [sp, #12]
 800231a:	9b02      	ldr	r3, [sp, #8]
 800231c:	1ad2      	subs	r2, r2, r3
 800231e:	9901      	ldr	r1, [sp, #4]
 8002320:	9b02      	ldr	r3, [sp, #8]
 8002322:	1acb      	subs	r3, r1, r3
 8002324:	429a      	cmp	r2, r3
 8002326:	bf34      	ite	cc
 8002328:	2301      	movcc	r3, #1
 800232a:	2300      	movcs	r3, #0
 800232c:	b2db      	uxtb	r3, r3
}
 800232e:	4618      	mov	r0, r3
 8002330:	b004      	add	sp, #16
 8002332:	4770      	bx	lr
	...

08002340 <chVTIsSystemTimeWithin>:
 * @retval true         current time within the specified time window.
 * @retval false        current time not within the specified time window.
 *
 * @api
 */
static inline bool chVTIsSystemTimeWithin(systime_t start, systime_t end) {
 8002340:	b500      	push	{lr}
 8002342:	b083      	sub	sp, #12
 8002344:	9001      	str	r0, [sp, #4]
 8002346:	9100      	str	r1, [sp, #0]

  return chVTIsTimeWithinX(chVTGetSystemTime(), start, end);
 8002348:	f7ff ffd2 	bl	80022f0 <chVTGetSystemTime>
 800234c:	4603      	mov	r3, r0
 800234e:	9a00      	ldr	r2, [sp, #0]
 8002350:	9901      	ldr	r1, [sp, #4]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff ffdc 	bl	8002310 <chVTIsTimeWithinX>
 8002358:	4603      	mov	r3, r0
}
 800235a:	4618      	mov	r0, r3
 800235c:	b003      	add	sp, #12
 800235e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002362:	bf00      	nop
	...

08002370 <Os_Init>:
#include "Os.h"

static thread_t *OsCfg_TaskPool[OS_THREAD_NUMBER];

void Os_Init(void)
{
 8002370:	b500      	push	{lr}
 8002372:	b089      	sub	sp, #36	; 0x24
	uint32_t id = 0u;
 8002374:	2300      	movs	r3, #0
 8002376:	9307      	str	r3, [sp, #28]

	chSysInit();
 8002378:	f7ff fb02 	bl	8001980 <chSysInit>

	for (id = 0u; id < OS_THREAD_NUMBER; id ++)
 800237c:	2300      	movs	r3, #0
 800237e:	9307      	str	r3, [sp, #28]
 8002380:	e05a      	b.n	8002438 <Os_Init+0xc8>
	{
		thread_descriptor_t tdp = {NULL,
 8002382:	2300      	movs	r3, #0
 8002384:	9301      	str	r3, [sp, #4]
								   OsCfg_Config[id].pvTaskStackStart,
 8002386:	492f      	ldr	r1, [pc, #188]	; (8002444 <Os_Init+0xd4>)
 8002388:	9a07      	ldr	r2, [sp, #28]
 800238a:	4613      	mov	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	1a9b      	subs	r3, r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	440b      	add	r3, r1
 8002394:	3314      	adds	r3, #20
 8002396:	681b      	ldr	r3, [r3, #0]

	chSysInit();

	for (id = 0u; id < OS_THREAD_NUMBER; id ++)
	{
		thread_descriptor_t tdp = {NULL,
 8002398:	9302      	str	r3, [sp, #8]
								   OsCfg_Config[id].pvTaskStackStart,
								   OsCfg_Config[id].pvTaskStackEnd,
 800239a:	492a      	ldr	r1, [pc, #168]	; (8002444 <Os_Init+0xd4>)
 800239c:	9a07      	ldr	r2, [sp, #28]
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	1a9b      	subs	r3, r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	3318      	adds	r3, #24
 80023aa:	681b      	ldr	r3, [r3, #0]

	chSysInit();

	for (id = 0u; id < OS_THREAD_NUMBER; id ++)
	{
		thread_descriptor_t tdp = {NULL,
 80023ac:	9303      	str	r3, [sp, #12]
								   OsCfg_Config[id].pvTaskStackStart,
								   OsCfg_Config[id].pvTaskStackEnd,
								   OsCfg_Config[id].ulPriority,
 80023ae:	4925      	ldr	r1, [pc, #148]	; (8002444 <Os_Init+0xd4>)
 80023b0:	9a07      	ldr	r2, [sp, #28]
 80023b2:	4613      	mov	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	1a9b      	subs	r3, r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	3308      	adds	r3, #8
 80023be:	681b      	ldr	r3, [r3, #0]

	chSysInit();

	for (id = 0u; id < OS_THREAD_NUMBER; id ++)
	{
		thread_descriptor_t tdp = {NULL,
 80023c0:	9304      	str	r3, [sp, #16]
								   OsCfg_Config[id].pvTaskStackStart,
								   OsCfg_Config[id].pvTaskStackEnd,
								   OsCfg_Config[id].ulPriority,
								   OsCfg_Config[id].pfTaskFunction,
 80023c2:	4920      	ldr	r1, [pc, #128]	; (8002444 <Os_Init+0xd4>)
 80023c4:	9a07      	ldr	r2, [sp, #28]
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	681b      	ldr	r3, [r3, #0]

	chSysInit();

	for (id = 0u; id < OS_THREAD_NUMBER; id ++)
	{
		thread_descriptor_t tdp = {NULL,
 80023d2:	9305      	str	r3, [sp, #20]
								   OsCfg_Config[id].pvTaskStackStart,
								   OsCfg_Config[id].pvTaskStackEnd,
								   OsCfg_Config[id].ulPriority,
								   OsCfg_Config[id].pfTaskFunction,
								   OsCfg_Config[id].pvArguments};
 80023d4:	491b      	ldr	r1, [pc, #108]	; (8002444 <Os_Init+0xd4>)
 80023d6:	9a07      	ldr	r2, [sp, #28]
 80023d8:	4613      	mov	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	3304      	adds	r3, #4
 80023e4:	681b      	ldr	r3, [r3, #0]

	chSysInit();

	for (id = 0u; id < OS_THREAD_NUMBER; id ++)
	{
		thread_descriptor_t tdp = {NULL,
 80023e6:	9306      	str	r3, [sp, #24]
								   OsCfg_Config[id].pvTaskStackStart,
								   OsCfg_Config[id].pvTaskStackEnd,
								   OsCfg_Config[id].ulPriority,
								   OsCfg_Config[id].pfTaskFunction,
								   OsCfg_Config[id].pvArguments};
		OsCfg_TaskPool[id] = chThdCreateSuspended(&tdp);
 80023e8:	ab01      	add	r3, sp, #4
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe fe28 	bl	8001040 <chThdCreateSuspended>
 80023f0:	4601      	mov	r1, r0
 80023f2:	4a15      	ldr	r2, [pc, #84]	; (8002448 <Os_Init+0xd8>)
 80023f4:	9b07      	ldr	r3, [sp, #28]
 80023f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		OsCfg_TaskPool[id]->startoffset = OsCfg_Config[id].ulOffset;
 80023fa:	4a13      	ldr	r2, [pc, #76]	; (8002448 <Os_Init+0xd8>)
 80023fc:	9b07      	ldr	r3, [sp, #28]
 80023fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002402:	4810      	ldr	r0, [pc, #64]	; (8002444 <Os_Init+0xd4>)
 8002404:	9a07      	ldr	r2, [sp, #28]
 8002406:	4613      	mov	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	1a9b      	subs	r3, r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4403      	add	r3, r0
 8002410:	330c      	adds	r3, #12
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	630b      	str	r3, [r1, #48]	; 0x30
		OsCfg_TaskPool[id]->recurrence = OsCfg_Config[id].ulRecurrence;
 8002416:	4a0c      	ldr	r2, [pc, #48]	; (8002448 <Os_Init+0xd8>)
 8002418:	9b07      	ldr	r3, [sp, #28]
 800241a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800241e:	4809      	ldr	r0, [pc, #36]	; (8002444 <Os_Init+0xd4>)
 8002420:	9a07      	ldr	r2, [sp, #28]
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	1a9b      	subs	r3, r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4403      	add	r3, r0
 800242c:	3310      	adds	r3, #16
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	634b      	str	r3, [r1, #52]	; 0x34
{
	uint32_t id = 0u;

	chSysInit();

	for (id = 0u; id < OS_THREAD_NUMBER; id ++)
 8002432:	9b07      	ldr	r3, [sp, #28]
 8002434:	3301      	adds	r3, #1
 8002436:	9307      	str	r3, [sp, #28]
 8002438:	9b07      	ldr	r3, [sp, #28]
 800243a:	2b06      	cmp	r3, #6
 800243c:	d9a1      	bls.n	8002382 <Os_Init+0x12>
								   OsCfg_Config[id].pvArguments};
		OsCfg_TaskPool[id] = chThdCreateSuspended(&tdp);
		OsCfg_TaskPool[id]->startoffset = OsCfg_Config[id].ulOffset;
		OsCfg_TaskPool[id]->recurrence = OsCfg_Config[id].ulRecurrence;
	}
}
 800243e:	b009      	add	sp, #36	; 0x24
 8002440:	f85d fb04 	ldr.w	pc, [sp], #4
 8002444:	08002900 	.word	0x08002900
 8002448:	2000082c 	.word	0x2000082c
 800244c:	00000000 	.word	0x00000000

08002450 <Os_StartTasks>:

void Os_StartTasks(void)
{
 8002450:	b500      	push	{lr}
 8002452:	b085      	sub	sp, #20
	const systime_t startTime = chVTGetSystemTime();
 8002454:	f7ff ff4c 	bl	80022f0 <chVTGetSystemTime>
 8002458:	9001      	str	r0, [sp, #4]
	uint32_t noOfStartedTasks = 0u;
 800245a:	2300      	movs	r3, #0
 800245c:	9303      	str	r3, [sp, #12]
 800245e:	e032      	b.n	80024c6 <Os_StartTasks+0x76>
	while (noOfStartedTasks <= OS_THREAD_NUMBER)
	{
		uint32_t id = 0u;
 8002460:	2300      	movs	r3, #0
 8002462:	9302      	str	r3, [sp, #8]
		for (id = 0u; id < OS_THREAD_NUMBER; id++)
 8002464:	2300      	movs	r3, #0
 8002466:	9302      	str	r3, [sp, #8]
 8002468:	e02a      	b.n	80024c0 <Os_StartTasks+0x70>
		{
			if (!chVTIsSystemTimeWithin(startTime, (startTime + OsCfg_TaskPool[id]->startoffset))
 800246a:	4a1a      	ldr	r2, [pc, #104]	; (80024d4 <Os_StartTasks+0x84>)
 800246c:	9b02      	ldr	r3, [sp, #8]
 800246e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002474:	9b01      	ldr	r3, [sp, #4]
 8002476:	4413      	add	r3, r2
 8002478:	4619      	mov	r1, r3
 800247a:	9801      	ldr	r0, [sp, #4]
 800247c:	f7ff ff60 	bl	8002340 <chVTIsSystemTimeWithin>
 8002480:	4603      	mov	r3, r0
 8002482:	f083 0301 	eor.w	r3, r3, #1
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d016      	beq.n	80024ba <Os_StartTasks+0x6a>
			&& (OsCfg_TaskPool[id]->state == CH_STATE_WTSTART))
 800248c:	4a11      	ldr	r2, [pc, #68]	; (80024d4 <Os_StartTasks+0x84>)
 800248e:	9b02      	ldr	r3, [sp, #8]
 8002490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002494:	7c1b      	ldrb	r3, [r3, #16]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d10f      	bne.n	80024ba <Os_StartTasks+0x6a>
			{
				chThdStart(OsCfg_TaskPool[id]);
 800249a:	4a0e      	ldr	r2, [pc, #56]	; (80024d4 <Os_StartTasks+0x84>)
 800249c:	9b02      	ldr	r3, [sp, #8]
 800249e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe fdf4 	bl	8001090 <chThdStart>
				noOfStartedTasks++;
 80024a8:	9b03      	ldr	r3, [sp, #12]
 80024aa:	3301      	adds	r3, #1
 80024ac:	9303      	str	r3, [sp, #12]
				chSysLock();
 80024ae:	f7ff ff07 	bl	80022c0 <chSysLock.lto_priv.95>
				chSchRescheduleS();
 80024b2:	f7ff f8fd 	bl	80016b0 <chSchRescheduleS>
				chSysUnlock();
 80024b6:	f7ff ff0b 	bl	80022d0 <chSysUnlock.lto_priv.88>
	const systime_t startTime = chVTGetSystemTime();
	uint32_t noOfStartedTasks = 0u;
	while (noOfStartedTasks <= OS_THREAD_NUMBER)
	{
		uint32_t id = 0u;
		for (id = 0u; id < OS_THREAD_NUMBER; id++)
 80024ba:	9b02      	ldr	r3, [sp, #8]
 80024bc:	3301      	adds	r3, #1
 80024be:	9302      	str	r3, [sp, #8]
 80024c0:	9b02      	ldr	r3, [sp, #8]
 80024c2:	2b06      	cmp	r3, #6
 80024c4:	d9d1      	bls.n	800246a <Os_StartTasks+0x1a>

void Os_StartTasks(void)
{
	const systime_t startTime = chVTGetSystemTime();
	uint32_t noOfStartedTasks = 0u;
	while (noOfStartedTasks <= OS_THREAD_NUMBER)
 80024c6:	9b03      	ldr	r3, [sp, #12]
 80024c8:	2b07      	cmp	r3, #7
 80024ca:	d9c9      	bls.n	8002460 <Os_StartTasks+0x10>
				chSchRescheduleS();
				chSysUnlock();
			}
		}
	}
}
 80024cc:	b005      	add	sp, #20
 80024ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80024d2:	bf00      	nop
 80024d4:	2000082c 	.word	0x2000082c
	...

080024e0 <Task_2ms>:
	{	Task_40ms,	NULL,	NORMALPRIO + 30u, 	5u,	40u,	THD_WORKING_AREA_BASE(THREAD_STACK(Task_40ms)),		THD_WORKING_AREA_END(THREAD_STACK(Task_40ms)) },
	{	Task_80ms,	NULL,	NORMALPRIO + 20u,	6u,	80u,	THD_WORKING_AREA_BASE(THREAD_STACK(Task_80ms)),		THD_WORKING_AREA_END(THREAD_STACK(Task_80ms)) },
	{	Task_100ms,	NULL,	NORMALPRIO + 10u,	7u,	100u,	THD_WORKING_AREA_BASE(THREAD_STACK(Task_100ms)),	THD_WORKING_AREA_END(THREAD_STACK(Task_100ms))}
};

TASK(Task_2ms)
 80024e0:	b500      	push	{lr}
 80024e2:	b083      	sub	sp, #12
 80024e4:	9001      	str	r0, [sp, #4]
{

	TerminateTask();
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <Task_2ms+0x28>)
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024f0:	fb02 f303 	mul.w	r3, r2, r3
 80024f4:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80024f8:	4a04      	ldr	r2, [pc, #16]	; (800250c <Task_2ms+0x2c>)
 80024fa:	fba2 2303 	umull	r2, r3, r2, r3
 80024fe:	099b      	lsrs	r3, r3, #6
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe fe0d 	bl	8001120 <chThdSleep>
 8002506:	e7ee      	b.n	80024e6 <Task_2ms+0x6>
 8002508:	20001f48 	.word	0x20001f48
 800250c:	10624dd3 	.word	0x10624dd3

08002510 <Task_5ms>:
}

TASK(Task_5ms)
 8002510:	b500      	push	{lr}
 8002512:	b083      	sub	sp, #12
 8002514:	9001      	str	r0, [sp, #4]
{
	TerminateTask();
 8002516:	4b08      	ldr	r3, [pc, #32]	; (8002538 <Task_5ms+0x28>)
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002520:	fb02 f303 	mul.w	r3, r2, r3
 8002524:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8002528:	4a04      	ldr	r2, [pc, #16]	; (800253c <Task_5ms+0x2c>)
 800252a:	fba2 2303 	umull	r2, r3, r2, r3
 800252e:	099b      	lsrs	r3, r3, #6
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe fdf5 	bl	8001120 <chThdSleep>
 8002536:	e7ee      	b.n	8002516 <Task_5ms+0x6>
 8002538:	20001f48 	.word	0x20001f48
 800253c:	10624dd3 	.word	0x10624dd3

08002540 <Task_10ms>:
}

TASK(Task_10ms)
 8002540:	b500      	push	{lr}
 8002542:	b083      	sub	sp, #12
 8002544:	9001      	str	r0, [sp, #4]
{
	Led_MainFunction();
 8002546:	f7ff fba3 	bl	8001c90 <Led_MainFunction>
	TerminateTask();
 800254a:	4b08      	ldr	r3, [pc, #32]	; (800256c <Task_10ms+0x2c>)
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002550:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002554:	fb02 f303 	mul.w	r3, r2, r3
 8002558:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800255c:	4a04      	ldr	r2, [pc, #16]	; (8002570 <Task_10ms+0x30>)
 800255e:	fba2 2303 	umull	r2, r3, r2, r3
 8002562:	099b      	lsrs	r3, r3, #6
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fddb 	bl	8001120 <chThdSleep>
 800256a:	e7ec      	b.n	8002546 <Task_10ms+0x6>
 800256c:	20001f48 	.word	0x20001f48
 8002570:	10624dd3 	.word	0x10624dd3
	...

08002580 <Task_20ms>:
}

TASK(Task_20ms)
 8002580:	b500      	push	{lr}
 8002582:	b083      	sub	sp, #12
 8002584:	9001      	str	r0, [sp, #4]
{
	TerminateTask();
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <Task_20ms+0x28>)
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002590:	fb02 f303 	mul.w	r3, r2, r3
 8002594:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8002598:	4a04      	ldr	r2, [pc, #16]	; (80025ac <Task_20ms+0x2c>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	099b      	lsrs	r3, r3, #6
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fe fdbd 	bl	8001120 <chThdSleep>
 80025a6:	e7ee      	b.n	8002586 <Task_20ms+0x6>
 80025a8:	20001f48 	.word	0x20001f48
 80025ac:	10624dd3 	.word	0x10624dd3

080025b0 <Task_40ms>:
}
TASK(Task_40ms)
 80025b0:	b500      	push	{lr}
 80025b2:	b083      	sub	sp, #12
 80025b4:	9001      	str	r0, [sp, #4]
{
	TerminateTask();
 80025b6:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <Task_40ms+0x28>)
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025c0:	fb02 f303 	mul.w	r3, r2, r3
 80025c4:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80025c8:	4a04      	ldr	r2, [pc, #16]	; (80025dc <Task_40ms+0x2c>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	099b      	lsrs	r3, r3, #6
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fe fda5 	bl	8001120 <chThdSleep>
 80025d6:	e7ee      	b.n	80025b6 <Task_40ms+0x6>
 80025d8:	20001f48 	.word	0x20001f48
 80025dc:	10624dd3 	.word	0x10624dd3

080025e0 <Task_80ms>:
}

TASK(Task_80ms)
 80025e0:	b500      	push	{lr}
 80025e2:	b083      	sub	sp, #12
 80025e4:	9001      	str	r0, [sp, #4]
{
	TerminateTask();
 80025e6:	4b08      	ldr	r3, [pc, #32]	; (8002608 <Task_80ms+0x28>)
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025f0:	fb02 f303 	mul.w	r3, r2, r3
 80025f4:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80025f8:	4a04      	ldr	r2, [pc, #16]	; (800260c <Task_80ms+0x2c>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	099b      	lsrs	r3, r3, #6
 8002600:	4618      	mov	r0, r3
 8002602:	f7fe fd8d 	bl	8001120 <chThdSleep>
 8002606:	e7ee      	b.n	80025e6 <Task_80ms+0x6>
 8002608:	20001f48 	.word	0x20001f48
 800260c:	10624dd3 	.word	0x10624dd3

08002610 <Task_100ms>:
}

TASK(Task_100ms)
 8002610:	b500      	push	{lr}
 8002612:	b083      	sub	sp, #12
 8002614:	9001      	str	r0, [sp, #4]
{
	TerminateTask();
 8002616:	4b08      	ldr	r3, [pc, #32]	; (8002638 <Task_100ms+0x28>)
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002620:	fb02 f303 	mul.w	r3, r2, r3
 8002624:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8002628:	4a04      	ldr	r2, [pc, #16]	; (800263c <Task_100ms+0x2c>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	099b      	lsrs	r3, r3, #6
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe fd75 	bl	8001120 <chThdSleep>
 8002636:	e7ee      	b.n	8002616 <Task_100ms+0x6>
 8002638:	20001f48 	.word	0x20001f48
 800263c:	10624dd3 	.word	0x10624dd3

08002640 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
 8002640:	b508      	push	{r3, lr}

  stm32_clock_init();
 8002642:	f7fe fa95 	bl	8000b70 <stm32_clock_init>
}
 8002646:	bd08      	pop	{r3, pc}
	...

08002650 <boardInit>:
/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
}
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
	...

08002660 <port_lock.lto_priv.81>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8002660:	b082      	sub	sp, #8
 8002662:	2320      	movs	r3, #32
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	9b01      	ldr	r3, [sp, #4]
 8002668:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800266c:	b002      	add	sp, #8
 800266e:	4770      	bx	lr

08002670 <port_unlock.lto_priv.72>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8002670:	b082      	sub	sp, #8
 8002672:	2300      	movs	r3, #0
 8002674:	9301      	str	r3, [sp, #4]
 8002676:	9b01      	ldr	r3, [sp, #4]
 8002678:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800267c:	b002      	add	sp, #8
 800267e:	4770      	bx	lr

08002680 <port_lock_from_isr.lto_priv.68>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 8002680:	b508      	push	{r3, lr}

  port_lock();
 8002682:	f7ff ffed 	bl	8002660 <port_lock.lto_priv.81>
}
 8002686:	bd08      	pop	{r3, pc}
	...

08002690 <port_unlock_from_isr.lto_priv.66>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 8002690:	b508      	push	{r3, lr}

  port_unlock();
 8002692:	f7ff ffed 	bl	8002670 <port_unlock.lto_priv.72>
}
 8002696:	bd08      	pop	{r3, pc}
	...

080026a0 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 80026a0:	b510      	push	{r4, lr}
 80026a2:	b082      	sub	sp, #8
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 80026a4:	4a0b      	ldr	r2, [pc, #44]	; (80026d4 <SVC_Handler+0x34>)
 80026a6:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <SVC_Handler+0x34>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f023 0301 	bic.w	r3, r3, #1
 80026ae:	6053      	str	r3, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80026b0:	f3ef 8309 	mrs	r3, PSP
 80026b4:	461c      	mov	r4, r3
  return(result);
 80026b6:	4623      	mov	r3, r4
#endif

  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();
 80026b8:	9301      	str	r3, [sp, #4]

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 80026ba:	9b01      	ldr	r3, [sp, #4]
 80026bc:	3368      	adds	r3, #104	; 0x68
 80026be:	9301      	str	r3, [sp, #4]

  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);
 80026c0:	9b01      	ldr	r3, [sp, #4]
 80026c2:	9300      	str	r3, [sp, #0]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80026c4:	9b00      	ldr	r3, [sp, #0]
 80026c6:	f383 8809 	msr	PSP, r3

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
 80026ca:	f7ff ffe1 	bl	8002690 <port_unlock_from_isr.lto_priv.66>
}
 80026ce:	b002      	add	sp, #8
 80026d0:	bd10      	pop	{r4, pc}
 80026d2:	bf00      	nop
 80026d4:	e000ef30 	.word	0xe000ef30
	...

080026e0 <_port_irq_epilogue>:
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 80026e0:	b510      	push	{r4, lr}
 80026e2:	b084      	sub	sp, #16

  port_lock_from_isr();
 80026e4:	f7ff ffcc 	bl	8002680 <port_lock_from_isr.lto_priv.68>
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80026e8:	4b17      	ldr	r3, [pc, #92]	; (8002748 <_port_irq_epilogue+0x68>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d025      	beq.n	8002740 <_port_irq_epilogue+0x60>
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 80026f4:	eef1 3a10 	vmrs	r3, fpscr
 80026f8:	9303      	str	r3, [sp, #12]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80026fa:	f3ef 8309 	mrs	r3, PSP
 80026fe:	461c      	mov	r4, r3
  return(result);
 8002700:	4623      	mov	r3, r4
      /* Enforcing a lazy FPU state save by accessing the FPCSR register.*/
      (void) __get_FPSCR();
#endif

    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();
 8002702:	9302      	str	r3, [sp, #8]

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8002704:	9b02      	ldr	r3, [sp, #8]
 8002706:	3b68      	subs	r3, #104	; 0x68
 8002708:	9302      	str	r3, [sp, #8]

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800270a:	9b02      	ldr	r3, [sp, #8]
 800270c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002710:	61da      	str	r2, [r3, #28]
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <_port_irq_epilogue+0x6c>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	461a      	mov	r2, r3
 8002718:	9b02      	ldr	r3, [sp, #8]
 800271a:	661a      	str	r2, [r3, #96]	; 0x60
#endif

    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);
 800271c:	9b02      	ldr	r3, [sp, #8]
 800271e:	9301      	str	r3, [sp, #4]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8002720:	9b01      	ldr	r3, [sp, #4]
 8002722:	f383 8809 	msr	PSP, r3

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8002726:	f7fe ffd3 	bl	80016d0 <chSchIsPreemptionRequired>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <_port_irq_epilogue+0x58>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8002730:	9b02      	ldr	r3, [sp, #8]
 8002732:	4a07      	ldr	r2, [pc, #28]	; (8002750 <_port_irq_epilogue+0x70>)
 8002734:	619a      	str	r2, [r3, #24]
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8002736:	e005      	b.n	8002744 <_port_irq_epilogue+0x64>
 8002738:	9b02      	ldr	r3, [sp, #8]
 800273a:	4a06      	ldr	r2, [pc, #24]	; (8002754 <_port_irq_epilogue+0x74>)
 800273c:	619a      	str	r2, [r3, #24]
 800273e:	e001      	b.n	8002744 <_port_irq_epilogue+0x64>

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
 8002740:	f7ff ffa6 	bl	8002690 <port_unlock_from_isr.lto_priv.66>
}
 8002744:	b004      	add	sp, #16
 8002746:	bd10      	pop	{r4, pc}
 8002748:	e000ed00 	.word	0xe000ed00
 800274c:	e000ef30 	.word	0xe000ef30
 8002750:	080001c9 	.word	0x080001c9
 8002754:	080001cc 	.word	0x080001cc
	...

08002760 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = __heap_base__;
 8002760:	4b03      	ldr	r3, [pc, #12]	; (8002770 <_core_init+0x10>)
 8002762:	4a04      	ldr	r2, [pc, #16]	; (8002774 <_core_init+0x14>)
 8002764:	601a      	str	r2, [r3, #0]
  endmem  = __heap_end__;
 8002766:	4b04      	ldr	r3, [pc, #16]	; (8002778 <_core_init+0x18>)
 8002768:	4a04      	ldr	r2, [pc, #16]	; (800277c <_core_init+0x1c>)
 800276a:	601a      	str	r2, [r3, #0]
  static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];

  nextmem = &static_heap[0];
  endmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
#endif
}
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	20001f40 	.word	0x20001f40
 8002774:	200021b0 	.word	0x200021b0
 8002778:	20001f44 	.word	0x20001f44
 800277c:	20010000 	.word	0x20010000

08002780 <port_lock.lto_priv.87>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8002780:	b082      	sub	sp, #8
 8002782:	2320      	movs	r3, #32
 8002784:	9301      	str	r3, [sp, #4]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002786:	9b01      	ldr	r3, [sp, #4]
 8002788:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800278c:	b002      	add	sp, #8
 800278e:	4770      	bx	lr

08002790 <port_unlock.lto_priv.78>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8002790:	b082      	sub	sp, #8
 8002792:	2300      	movs	r3, #0
 8002794:	9301      	str	r3, [sp, #4]
 8002796:	9b01      	ldr	r3, [sp, #4]
 8002798:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800279c:	b002      	add	sp, #8
 800279e:	4770      	bx	lr

080027a0 <port_lock_from_isr.lto_priv.69>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 80027a0:	b508      	push	{r3, lr}

  port_lock();
 80027a2:	f7ff ffed 	bl	8002780 <port_lock.lto_priv.87>
}
 80027a6:	bd08      	pop	{r3, pc}
	...

080027b0 <port_unlock_from_isr.lto_priv.67>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 80027b0:	b508      	push	{r3, lr}

  port_unlock();
 80027b2:	f7ff ffed 	bl	8002790 <port_unlock.lto_priv.78>
}
 80027b6:	bd08      	pop	{r3, pc}
	...

080027c0 <queue_init.lto_priv.44>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
 80027c0:	b082      	sub	sp, #8
 80027c2:	9001      	str	r0, [sp, #4]

  tqp->next = (thread_t *)tqp;
 80027c4:	9b01      	ldr	r3, [sp, #4]
 80027c6:	9a01      	ldr	r2, [sp, #4]
 80027c8:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 80027ca:	9b01      	ldr	r3, [sp, #4]
 80027cc:	9a01      	ldr	r2, [sp, #4]
 80027ce:	605a      	str	r2, [r3, #4]
}
 80027d0:	b002      	add	sp, #8
 80027d2:	4770      	bx	lr
	...

080027e0 <queue_fifo_remove.lto_priv.41>:
  tp->queue.prev             = tqp->prev;
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 80027e0:	b084      	sub	sp, #16
 80027e2:	9001      	str	r0, [sp, #4]
  thread_t *tp = tqp->next;
 80027e4:	9b01      	ldr	r3, [sp, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	9303      	str	r3, [sp, #12]

  tqp->next             = tp->queue.next;
 80027ea:	9b03      	ldr	r3, [sp, #12]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	9b01      	ldr	r3, [sp, #4]
 80027f0:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80027f2:	9b01      	ldr	r3, [sp, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	9a01      	ldr	r2, [sp, #4]
 80027f8:	605a      	str	r2, [r3, #4]

  return tp;
 80027fa:	9b03      	ldr	r3, [sp, #12]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	b004      	add	sp, #16
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
	...

08002810 <queue_dequeue.lto_priv.64>:
  tqp->prev->queue.next = (thread_t *)tqp;

  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {
 8002810:	b082      	sub	sp, #8
 8002812:	9001      	str	r0, [sp, #4]

  tp->queue.prev->queue.next = tp->queue.next;
 8002814:	9b01      	ldr	r3, [sp, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	9a01      	ldr	r2, [sp, #4]
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800281e:	9b01      	ldr	r3, [sp, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	9a01      	ldr	r2, [sp, #4]
 8002824:	6852      	ldr	r2, [r2, #4]
 8002826:	605a      	str	r2, [r3, #4]

  return tp;
 8002828:	9b01      	ldr	r3, [sp, #4]
}
 800282a:	4618      	mov	r0, r3
 800282c:	b002      	add	sp, #8
 800282e:	4770      	bx	lr

08002830 <chSchIsRescRequiredI.lto_priv.62>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.queue) > currp->prio;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <chSchIsRescRequiredI.lto_priv.62+0x1c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	4b05      	ldr	r3, [pc, #20]	; (800284c <chSchIsRescRequiredI.lto_priv.62+0x1c>)
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	429a      	cmp	r2, r3
 800283e:	bf8c      	ite	hi
 8002840:	2301      	movhi	r3, #1
 8002842:	2300      	movls	r3, #0
 8002844:	b2db      	uxtb	r3, r3
}
 8002846:	4618      	mov	r0, r3
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	20001f48 	.word	0x20001f48

08002850 <chSysLockFromISR.lto_priv.56>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8002850:	b508      	push	{r3, lr}

  port_lock_from_isr();
 8002852:	f7ff ffa5 	bl	80027a0 <port_lock_from_isr.lto_priv.69>
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
}
 8002856:	bd08      	pop	{r3, pc}
	...

08002860 <chSysUnlockFromISR.lto_priv.54>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8002860:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
 8002862:	f7ff ffa5 	bl	80027b0 <port_unlock_from_isr.lto_priv.67>
}
 8002866:	bd08      	pop	{r3, pc}
	...

08002870 <chVTIsArmedI.lto_priv.63>:
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 * @return              true if the timer is armed.
 *
 * @iclass
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {
 8002870:	b082      	sub	sp, #8
 8002872:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  return (bool)(vtp->func != NULL);
 8002874:	9b01      	ldr	r3, [sp, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf14      	ite	ne
 800287c:	2301      	movne	r3, #1
 800287e:	2300      	moveq	r3, #0
 8002880:	b2db      	uxtb	r3, r3
}
 8002882:	4618      	mov	r0, r3
 8002884:	b002      	add	sp, #8
 8002886:	4770      	bx	lr
	...

08002890 <chSemFastSignalI.lto_priv.65>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {
 8002890:	b082      	sub	sp, #8
 8002892:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  sp->cnt++;
 8002894:	9b01      	ldr	r3, [sp, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	9b01      	ldr	r3, [sp, #4]
 800289c:	609a      	str	r2, [r3, #8]
}
 800289e:	b002      	add	sp, #8
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
	...

080028b0 <memcpy>:
 80028b0:	b510      	push	{r4, lr}
 80028b2:	1e43      	subs	r3, r0, #1
 80028b4:	440a      	add	r2, r1
 80028b6:	4291      	cmp	r1, r2
 80028b8:	d004      	beq.n	80028c4 <memcpy+0x14>
 80028ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028c2:	e7f8      	b.n	80028b6 <memcpy+0x6>
 80028c4:	bd10      	pop	{r4, pc}
	...

080028d0 <memset>:
 80028d0:	4402      	add	r2, r0
 80028d2:	4603      	mov	r3, r0
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d002      	beq.n	80028de <memset+0xe>
 80028d8:	f803 1b01 	strb.w	r1, [r3], #1
 80028dc:	e7fa      	b.n	80028d4 <memset+0x4>
 80028de:	4770      	bx	lr
