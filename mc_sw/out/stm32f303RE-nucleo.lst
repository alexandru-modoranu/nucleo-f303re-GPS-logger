
d:/prg/prj/github/nucleo-f303re-GPS-logger/mc_sw/out/stm32f303RE-nucleo.elf:     file format elf32-littlearm
d:/prg/prj/github/nucleo-f303re-GPS-logger/mc_sw/out/stm32f303RE-nucleo.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001d1

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x00001270 memsz 0x00001270 flags rwx
    LOAD off    0x00020800 vaddr 0x20000800 paddr 0x08001270 align 2**16
         filesz 0x00000000 memsz 0x00001970 flags rw-
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x00010000 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .mstack       00000400  20000000  20000000  00020000  2**0
                  ALLOC
  1 .pstack       00000400  20000400  20000400  00020000  2**0
                  ALLOC
  2 vectors       000001a0  08000000  08000000  00010000  2**7
                  CONTENTS, ALLOC, LOAD, DATA
  3 .text         00000e9c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000234  0800103c  0800103c  0001103c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000000  20000800  20000800  00011270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001970  20000800  08001270  00020800  2**3
                  ALLOC
  7 .ram0_init    00000000  20002170  20002170  00011270  2**2
                  CONTENTS
  8 .ram0         00000000  20002170  20002170  00011270  2**2
                  CONTENTS
  9 .ram1_init    00000000  00000000  00000000  00011270  2**2
                  CONTENTS
 10 .ram1         00000000  00000000  00000000  00011270  2**2
                  CONTENTS
 11 .ram2_init    00000000  00000000  00000000  00011270  2**2
                  CONTENTS
 12 .ram2         00000000  00000000  00000000  00011270  2**2
                  CONTENTS
 13 .ram3_init    00000000  00000000  00000000  00011270  2**2
                  CONTENTS
 14 .ram3         00000000  00000000  00000000  00011270  2**2
                  CONTENTS
 15 .ram4_init    00000000  10000000  10000000  00011270  2**2
                  CONTENTS
 16 .ram4         00000000  10000000  10000000  00011270  2**2
                  CONTENTS
 17 .ram5_init    00000000  00000000  00000000  00011270  2**2
                  CONTENTS
 18 .ram5         00000000  00000000  00000000  00011270  2**2
                  CONTENTS
 19 .ram6_init    00000000  00000000  00000000  00011270  2**2
                  CONTENTS
 20 .ram6         00000000  00000000  00000000  00011270  2**2
                  CONTENTS
 21 .ram7_init    00000000  00000000  00000000  00011270  2**2
                  CONTENTS
 22 .ram7         00000000  00000000  00000000  00011270  2**2
                  CONTENTS
 23 .heap         0000de90  20002170  20002170  00020000  2**0
                  ALLOC
 24 .debug_info   00003590  00000000  00000000  00011270  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_abbrev 00000649  00000000  00000000  00014800  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_loc    00000fbd  00000000  00000000  00014e49  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_aranges 00000160  00000000  00000000  00015e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_ranges 00000a70  00000000  00000000  00015f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_line   0000139f  00000000  00000000  000169d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 30 .debug_str    000011b6  00000000  00000000  00017d77  2**0
                  CONTENTS, READONLY, DEBUGGING
 31 .comment      0000006e  00000000  00000000  00018f2d  2**0
                  CONTENTS, READONLY
 32 .ARM.attributes 00000037  00000000  00000000  00018f9b  2**0
                  CONTENTS, READONLY
 33 .debug_frame  00000430  00000000  00000000  00018fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20000000 l    d  .mstack	00000000 .mstack
20000400 l    d  .pstack	00000000 .pstack
08000000 l    d  vectors	00000000 vectors
080001a0 l    d  .text	00000000 .text
0800103c l    d  .rodata	00000000 .rodata
20000800 l    d  .data	00000000 .data
20000800 l    d  .bss	00000000 .bss
20002170 l    d  .ram0_init	00000000 .ram0_init
20002170 l    d  .ram0	00000000 .ram0
00000000 l    d  .ram1_init	00000000 .ram1_init
00000000 l    d  .ram1	00000000 .ram1
00000000 l    d  .ram2_init	00000000 .ram2_init
00000000 l    d  .ram2	00000000 .ram2
00000000 l    d  .ram3_init	00000000 .ram3_init
00000000 l    d  .ram3	00000000 .ram3
10000000 l    d  .ram4_init	00000000 .ram4_init
10000000 l    d  .ram4	00000000 .ram4
00000000 l    d  .ram5_init	00000000 .ram5_init
00000000 l    d  .ram5	00000000 .ram5
00000000 l    d  .ram6_init	00000000 .ram6_init
00000000 l    d  .ram6	00000000 .ram6
00000000 l    d  .ram7_init	00000000 .ram7_init
00000000 l    d  .ram7	00000000 .ram7
20002170 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 
080002e0 l     F .text	0000000c chTMStartMeasurementX.constprop.5
080002f0 l     F .text	000000a0 _pal_lld_setgroupmode.constprop.0
08000390 l     F .text	00000002 _unhandled_exception
08000390 l     F .text	00000002 Vector48
08000390 l     F .text	00000002 Vector4C
08000390 l     F .text	00000002 Vector50
08000390 l     F .text	00000002 Vector54
08000390 l     F .text	00000002 Vector58
08000390 l     F .text	00000002 Vector5C
08000390 l     F .text	00000002 Vector60
08000390 l     F .text	00000002 Vector64
08000390 l     F .text	00000002 Vector68
08000390 l     F .text	00000002 Vector34
08000390 l     F .text	00000002 DebugMon_Handler
08000390 l     F .text	00000002 Vector44
08000390 l     F .text	00000002 Vector28
08000390 l     F .text	00000002 Vector24
08000390 l     F .text	00000002 Vector20
08000390 l     F .text	00000002 Vector1C
08000390 l     F .text	00000002 Vector88
08000390 l     F .text	00000002 Vector8C
08000390 l     F .text	00000002 Vector90
08000390 l     F .text	00000002 Vector94
08000390 l     F .text	00000002 Vector98
08000390 l     F .text	00000002 Vector9C
08000390 l     F .text	00000002 VectorA0
08000390 l     F .text	00000002 VectorA4
08000390 l     F .text	00000002 VectorA8
08000390 l     F .text	00000002 VectorAC
08000390 l     F .text	00000002 VectorB0
08000390 l     F .text	00000002 VectorB4
08000390 l     F .text	00000002 VectorB8
08000390 l     F .text	00000002 VectorBC
08000390 l     F .text	00000002 VectorC0
08000390 l     F .text	00000002 VectorC4
08000390 l     F .text	00000002 VectorC8
08000390 l     F .text	00000002 VectorCC
08000390 l     F .text	00000002 VectorD0
08000390 l     F .text	00000002 VectorD4
08000390 l     F .text	00000002 Vector40
08000390 l     F .text	00000002 PendSV_Handler
08000390 l     F .text	00000002 VectorE0
08000390 l     F .text	00000002 VectorE4
08000390 l     F .text	00000002 VectorE8
08000390 l     F .text	00000002 VectorEC
08000390 l     F .text	00000002 VectorF0
08000390 l     F .text	00000002 VectorF4
08000390 l     F .text	00000002 VectorF8
08000390 l     F .text	00000002 VectorFC
08000390 l     F .text	00000002 Vector100
08000390 l     F .text	00000002 Vector104
08000390 l     F .text	00000002 Vector108
08000390 l     F .text	00000002 Vector10C
08000390 l     F .text	00000002 Vector110
08000390 l     F .text	00000002 Vector114
08000390 l     F .text	00000002 Vector118
08000390 l     F .text	00000002 Vector11C
08000390 l     F .text	00000002 UsageFault_Handler
08000390 l     F .text	00000002 BusFault_Handler
08000390 l     F .text	00000002 MemManage_Handler
08000390 l     F .text	00000002 HardFault_Handler
08000390 l     F .text	00000002 NMI_Handler
08000390 l     F .text	00000002 Vector134
08000390 l     F .text	00000002 Vector138
08000390 l     F .text	00000002 Vector13C
08000390 l     F .text	00000002 Vector140
08000390 l     F .text	00000002 Vector144
08000390 l     F .text	00000002 Vector148
08000390 l     F .text	00000002 Vector14C
08000390 l     F .text	00000002 Vector150
08000390 l     F .text	00000002 Vector154
08000390 l     F .text	00000002 Vector158
08000390 l     F .text	00000002 Vector15C
08000390 l     F .text	00000002 Vector160
08000390 l     F .text	00000002 Vector164
08000390 l     F .text	00000002 Vector168
08000390 l     F .text	00000002 Vector16C
08000390 l     F .text	00000002 Vector170
08000390 l     F .text	00000002 Vector174
08000390 l     F .text	00000002 Vector178
08000390 l     F .text	00000002 Vector17C
08000390 l     F .text	00000002 Vector180
08000390 l     F .text	00000002 Vector184
08000390 l     F .text	00000002 Vector188
08000390 l     F .text	00000002 Vector18C
08000390 l     F .text	00000002 Vector190
08000390 l     F .text	00000002 Vector194
08000390 l     F .text	00000002 Vector198
08000390 l     F .text	00000002 Vector19C
080003a0 l     F .text	00000096 serve_usart_irq
08000440 l     F .text	00000044 chTMStopMeasurementX
08000490 l     F .text	00000002 _idle_thread
080004a0 l     F .text	00000070 wakeup
08000510 l     F .text	00000064 _port_irq_epilogue
08000580 l     F .text	00000030 Vector130
080005b0 l     F .text	00000030 Vector12C
080005e0 l     F .text	00000030 Vector128
08000610 l     F .text	00000030 Vector124
08000640 l     F .text	00000028 Vector120
08000670 l     F .text	00000030 Vector84
080006a0 l     F .text	00000030 Vector80
080006d0 l     F .text	00000030 Vector7C
08000700 l     F .text	00000030 Vector78
08000730 l     F .text	00000030 Vector74
08000760 l     F .text	00000030 Vector70
08000790 l     F .text	00000028 Vector6C
080007c0 l     F .text	00000014 VectorDC
080007e0 l     F .text	00000014 VectorD8
08000800 l     F .text	00000058 SysTick_Handler
08000860 l     F .text	00000020 SVC_Handler
08000880 l     F .text	00000024 chSchGoSleepS
080008b0 l     F .text	00000090 Task_100ms
08000940 l     F .text	00000006 Task_80ms
08000950 l     F .text	00000006 Task_40ms
08000960 l     F .text	00000006 Task_20ms
08000970 l     F .text	00000006 Task_10ms
08000980 l     F .text	00000006 Task_5ms
08000990 l     F .text	00000006 Task_2ms
08000a90 l     F .text	0000003c chSchDoRescheduleAhead
20000800 l     O .bss	00000060 _stm32_dma_isr_redir
20000860 l     O .bss	00000348 Task_20ms_Stack
20000ba8 l     O .bss	00000348 Task_80ms_Stack
20000ef0 l     O .bss	00000348 Task_5ms_Stack
20001238 l     O .bss	00000064 ch
2000129c l     O .bss	0000001c OsCfg_TaskPool
200012b8 l     O .bss	00000348 Task_100ms_Stack
0800103c l     O .rodata	000000c4 OsCfg_Config
20001640 l     O .bss	00000348 Task_2ms_Stack
20001ae0 l     O .bss	00000348 Task_10ms_Stack
20001e28 l     O .bss	00000348 Task_40ms_Stack
20001600 l     O .bss	00000020 UARTD2
20001620 l     O .bss	00000020 UARTD3
08001100 l     O .rodata	00000080 ram_areas
20001988 l     O .bss	00000158 ch_idle_thread_wa
08001180 l     O .rodata	000000f0 _stm32_dma_streams
00000000 l    df *ABS*	00000000 d:/prg/prj/github/nucleo-f303re-GPS-logger/mc_sw/obj/chcoreasm_v7m.o
e000ed04 l       *ABS*	00000000 SCB_ICSR
10000000 l       *ABS*	00000000 ICSR_PENDSVSET
00000000 l    df *ABS*	00000000 d:/prg/prj/github/nucleo-f303re-GPS-logger/mc_sw/obj/crt0_v7m.o
08000238 l       .text	00000000 msloop
08000246 l       .text	00000000 psloop
08000256 l       .text	00000000 dloop
0800026a l       .text	00000000 bloop
08000280 l       .text	00000000 initloop
0800028c l       .text	00000000 endinitloop
08000294 l       .text	00000000 finiloop
080002a0 l       .text	00000000 endfiniloop
00000000 l    df *ABS*	00000000 
20002170 l       .heap	00000000 __heap_base__
20010000 l       .heap	00000000 __heap_end__
08000a40 g     F .text	00000048 chThdExit
10000000 g       .rodata	00000000 __ram4_start__
00000000 g       .ram5	00000000 __ram5_clear__
20002170 g       .ram0_init	00000000 __ram0_init__
00000000 g       .ram1	00000000 __ram1_free__
00000000 g       .rodata	00000000 __ram6_start__
08000000 g     O vectors	000001a0 _vectors
08001270 g       .rodata	00000000 __exidx_end
20002170 g       .ram0	00000000 __ram0_free__
08001270 g       *ABS*	00000000 __ram3_init_text__
00000000 g       *ABS*	00000000 __ram5_end__
00000000 g       .ram5	00000000 __ram5_noinit__
00000000 g       *ABS*	00000000 __ram5_size__
080001a0 g       vectors	00000000 __fini_array_end
20000800 g       .pstack	00000000 __main_thread_stack_end__
08001270 g       .rodata	00000000 __rodata_end__
20000800 g       .bss	00000000 _bss_start
00000000 g       *ABS*	00000000 __ram1_size__
00000000 g       .ram1	00000000 __ram1_clear__
00000000 g       .ram7	00000000 __ram7_free__
00004000 g       *ABS*	00000000 __ram4_size__
00000000 g       *ABS*	00000000 __ram1_end__
10004000 g       *ABS*	00000000 __ram4_end__
08001270 g       .rodata	00000000 __exidx_start
08001270 g       *ABS*	00000000 __ram0_init_text__
08001270 g       *ABS*	00000000 __ram1_init_text__
00010000 g       *ABS*	00000000 __ram0_size__
08001270 g       *ABS*	00000000 __ram5_init_text__
20002170 g       .bss	00000000 _bss_end
080001d0 g     F .text	00000000 Reset_Handler
10000000 g       .ram4	00000000 __ram4_clear__
00000000 g       .ram5	00000000 __ram5_free__
08001270 g       *ABS*	00000000 __ram6_init_text__
00000000 g       .ram3	00000000 __ram3_clear__
08000a10 g     F .text	00000002 __default_exit
00000000 g       *ABS*	00000000 __ram6_end__
00000000 g       .ram6_init	00000000 __ram6_init__
08000a90 g     F .text	0000003c chSchDoReschedule
00000000 g       .ram7_init	00000000 __ram7_init__
00000000 g       .ram6	00000000 __ram6_free__
00000000 g       .ram2	00000000 __ram2_noinit__
00000000 g       .ram6	00000000 __ram6_noinit__
10000000 g       .ram4_init	00000000 __ram4_init__
00000000 g       .ram7	00000000 __ram7_clear__
20000800 g       .data	00000000 _data_start
00000000 g       *ABS*	00000000 __ram7_size__
080001a0 g     F .text	00000000 _port_switch
08000a30 g     F .text	00000002 __core_init
10000000 g       .ram4	00000000 __ram4_noinit__
08000a20 g     F .text	00000002 __late_init
00000000 g       .rodata	00000000 __ram7_start__
00000000 g       .ram6	00000000 __ram6_clear__
20000800 g       .data	00000000 _data_end
00000000 g       *ABS*	00000000 __ram3_size__
080001a0 g       vectors	00000000 __fini_array_start
00000000 g       .ram2	00000000 __ram2_clear__
00000000 g       *ABS*	00000000 __ram3_end__
00000000 g       *ABS*	00000000 __ram2_size__
00000000 g       .rodata	00000000 __ram1_start__
0800103c g       .rodata	00000000 __rodata_base__
08000ad0 g     F .text	000004d0 main
00000000 g       *ABS*	00000000 __ram6_size__
08001270 g       *ABS*	00000000 __ram2_init_text__
00000000 g       .ram3	00000000 __ram3_free__
080001a0 g       vectors	00000000 __init_array_end
08001270 g       *ABS*	00000000 __ram4_init_text__
00000000 g       .ram1	00000000 __ram1_noinit__
080001b8 g     F .text	00000000 _port_thread_start
00000000 g       .ram2_init	00000000 __ram2_init__
00000000 g       *ABS*	00000000 __ram2_end__
20000400 g       .pstack	00000000 __process_stack_base__
20002170 g       .ram0	00000000 __ram0_clear__
00000000 g       .ram3	00000000 __ram3_noinit__
20002170 g       .ram0	00000000 __ram0_noinit__
080009a0 g     F .text	00000068 __init_ram_areas
00000000 g       .rodata	00000000 __ram2_start__
080001c8 g     F .text	00000000 _port_switch_from_isr
00000000 g       *ABS*	00000000 __ram7_end__
20000400 g       .mstack	00000000 __main_stack_end__
00000000 g       .ram5_init	00000000 __ram5_init__
20000400 g       .pstack	00000000 __main_thread_stack_base__
08001270 g       *ABS*	00000000 __ram7_init_text__
00000000 g       .ram3_init	00000000 __ram3_init__
20000000 g       .rodata	00000000 __ram0_start__
080001cc g       .text	00000000 _port_exit_from_isr
00000000 g       .ram1_init	00000000 __ram1_init__
080001a0 g       vectors	00000000 __init_array_start
08001270 g       *ABS*	00000000 _textdata_start
00000000 g       .rodata	00000000 __ram5_start__
00000000 g       .ram2	00000000 __ram2_free__
10000000 g       .ram4	00000000 __ram4_free__
20010000 g       *ABS*	00000000 __ram0_end__
20000000 g       .mstack	00000000 __main_stack_base__
00000400 g       *ABS*	00000000 __main_stack_size__
00000000 g       .ram7	00000000 __ram7_noinit__
20000800 g       .pstack	00000000 __process_stack_end__
08000fa0 g     F .text	0000009c __early_init
00000000 g       .rodata	00000000 __ram3_start__
00000400 g       *ABS*	00000000 __process_stack_size__



Disassembly of section .text:

080001a0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80001a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
 80001a4:	ed2d 8a10 	vpush	{s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80001a8:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80001ac:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80001ae:	469d      	mov	sp, r3
#else
                ldr     sp, [r0, #CONTEXT_OFFSET]
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
 80001b0:	ecbd 8a10 	vpop	{s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80001b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080001b8 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80001b8:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80001ba:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80001be:	4628      	mov	r0, r5
                blx     r4
 80001c0:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 80001c2:	2000      	movs	r0, #0
                bl      chThdExit
 80001c4:	f000 fc3c 	bl	8000a40 <chThdExit>

080001c8 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 80001c8:	f000 fc62 	bl	8000a90 <chSchDoReschedule>

080001cc <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80001cc:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80001ce:	e7fe      	b.n	80001ce <_port_exit_from_isr+0x2>

080001d0 <Reset_Handler>:
                .align  2
                .thumb_func
                .global Reset_Handler
Reset_Handler:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001d0:	b672      	cpsid	i

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001d2:	4834      	ldr	r0, [pc, #208]	; (80002a4 <endfiniloop+0x4>)
                msr     PSP, r0
 80001d4:	f380 8809 	msr	PSP, r0

#if CRT0_INIT_FPU == TRUE
                /* FPU FPCCR initialization.*/
                movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 80001d8:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_FPCCR_INIT >> 16
 80001dc:	f2cc 0000 	movt	r0, #49152	; 0xc000
                movw    r1, #SCB_FPCCR & 0xFFFF
 80001e0:	f64e 7134 	movw	r1, #61236	; 0xef34
                movt    r1, #SCB_FPCCR >> 16
 80001e4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001e8:	6008      	str	r0, [r1, #0]
                dsb
 80001ea:	f3bf 8f4f 	dsb	sy
                isb
 80001ee:	f3bf 8f6f 	isb	sy

                /* CPACR initialization.*/
                movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 80001f2:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_CPACR_INIT >> 16
 80001f6:	f2c0 00f0 	movt	r0, #240	; 0xf0
                movw    r1, #SCB_CPACR & 0xFFFF
 80001fa:	f64e 5188 	movw	r1, #60808	; 0xed88
                movt    r1, #SCB_CPACR >> 16
 80001fe:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000202:	6008      	str	r0, [r1, #0]
                dsb
 8000204:	f3bf 8f4f 	dsb	sy
                isb
 8000208:	f3bf 8f6f 	isb	sy

                /* FPU FPSCR initially cleared.*/
                mov     r0, #0
 800020c:	f04f 0000 	mov.w	r0, #0
                vmsr    FPSCR, r0
 8000210:	eee1 0a10 	vmsr	fpscr, r0

                /* FPU FPDSCR initially cleared.*/
                movw    r1, #SCB_FPDSCR & 0xFFFF
 8000214:	f64e 713c 	movw	r1, #61244	; 0xef3c
                movt    r1, #SCB_FPDSCR >> 16
 8000218:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 800021c:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA
 800021e:	2006      	movs	r0, #6
#else
                movs    r0, #CRT0_CONTROL_INIT
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 8000220:	f380 8814 	msr	CONTROL, r0
                isb
 8000224:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000228:	f000 fc02 	bl	8000a30 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 800022c:	f000 feb8 	bl	8000fa0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 8000230:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000234:	491c      	ldr	r1, [pc, #112]	; (80002a8 <endfiniloop+0x8>)
                ldr     r2, =__main_stack_end__
 8000236:	4a1d      	ldr	r2, [pc, #116]	; (80002ac <endfiniloop+0xc>)

08000238 <msloop>:
msloop:
                cmp     r1, r2
 8000238:	4291      	cmp	r1, r2
                itt     lo
 800023a:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800023c:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 8000240:	e7fa      	bcc.n	8000238 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 8000242:	491b      	ldr	r1, [pc, #108]	; (80002b0 <endfiniloop+0x10>)
                ldr     r2, =__process_stack_end__
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <endfiniloop+0x4>)

08000246 <psloop>:
psloop:
                cmp     r1, r2
 8000246:	4291      	cmp	r1, r2
                itt     lo
 8000248:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800024a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800024e:	e7fa      	bcc.n	8000246 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 8000250:	4918      	ldr	r1, [pc, #96]	; (80002b4 <endfiniloop+0x14>)
                ldr     r2, =_data_start
 8000252:	4a19      	ldr	r2, [pc, #100]	; (80002b8 <endfiniloop+0x18>)
                ldr     r3, =_data_end
 8000254:	4b19      	ldr	r3, [pc, #100]	; (80002bc <endfiniloop+0x1c>)

08000256 <dloop>:
dloop:
                cmp     r2, r3
 8000256:	429a      	cmp	r2, r3
                ittt    lo
 8000258:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 800025a:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800025e:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 8000262:	e7f8      	bcc.n	8000256 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000264:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000266:	4916      	ldr	r1, [pc, #88]	; (80002c0 <endfiniloop+0x20>)
                ldr     r2, =_bss_end
 8000268:	4a16      	ldr	r2, [pc, #88]	; (80002c4 <endfiniloop+0x24>)

0800026a <bloop>:
bloop:
                cmp     r1, r2
 800026a:	4291      	cmp	r1, r2
                itt     lo
 800026c:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800026e:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 8000272:	e7fa      	bcc.n	800026a <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000274:	f000 fb94 	bl	80009a0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000278:	f000 fbd2 	bl	8000a20 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 800027c:	4c12      	ldr	r4, [pc, #72]	; (80002c8 <endfiniloop+0x28>)
                ldr     r5, =__init_array_end
 800027e:	4d13      	ldr	r5, [pc, #76]	; (80002cc <endfiniloop+0x2c>)

08000280 <initloop>:
initloop:
                cmp     r4, r5
 8000280:	42ac      	cmp	r4, r5
                bge     endinitloop
 8000282:	da03      	bge.n	800028c <endinitloop>
                ldr     r1, [r4], #4
 8000284:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000288:	4788      	blx	r1
                b       initloop
 800028a:	e7f9      	b.n	8000280 <initloop>

0800028c <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 800028c:	f000 fc20 	bl	8000ad0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 8000290:	4c0f      	ldr	r4, [pc, #60]	; (80002d0 <endfiniloop+0x30>)
                ldr     r5, =__fini_array_end
 8000292:	4d10      	ldr	r5, [pc, #64]	; (80002d4 <endfiniloop+0x34>)

08000294 <finiloop>:
finiloop:
                cmp     r4, r5
 8000294:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000296:	da03      	bge.n	80002a0 <endfiniloop>
                ldr     r1, [r4], #4
 8000298:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 800029c:	4788      	blx	r1
                b       finiloop
 800029e:	e7f9      	b.n	8000294 <finiloop>

080002a0 <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80002a0:	f000 bbb6 	b.w	8000a10 <__default_exit>
Reset_Handler:
                /* Interrupts are globally masked initially.*/
                cpsid   i

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80002a4:	20000800 	.word	0x20000800
#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 80002a8:	20000000 	.word	0x20000000
                ldr     r2, =__main_stack_end__
 80002ac:	20000400 	.word	0x20000400
                blo     msloop

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 80002b0:	20000400 	.word	0x20000400
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 80002b4:	08001270 	.word	0x08001270
                ldr     r2, =_data_start
 80002b8:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 80002bc:	20000800 	.word	0x20000800

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
                ldr     r1, =_bss_start
 80002c0:	20000800 	.word	0x20000800
                ldr     r2, =_bss_end
 80002c4:	20002170 	.word	0x20002170
                /* Late initialization..*/
                bl      __late_init

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 80002c8:	080001a0 	.word	0x080001a0
                ldr     r5, =__init_array_end
 80002cc:	080001a0 	.word	0x080001a0
                /* Main program invocation, r0 contains the returned value.*/
                bl      main

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 80002d0:	080001a0 	.word	0x080001a0
                ldr     r5, =__fini_array_end
 80002d4:	080001a0 	.word	0x080001a0
	...

080002e0 <chTMStartMeasurementX.constprop.5>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80002e0:	4b01      	ldr	r3, [pc, #4]	; (80002e8 <chTMStartMeasurementX.constprop.5+0x8>)
 80002e2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80002e4:	6083      	str	r3, [r0, #8]
 80002e6:	4770      	bx	lr
 80002e8:	e0001000 	.word	0xe0001000
 80002ec:	00000000 	.word	0x00000000

080002f0 <_pal_lld_setgroupmode.constprop.0>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 80002f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 80002f2:	2100      	movs	r1, #0
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 80002f4:	2502      	movs	r5, #2
 80002f6:	e008      	b.n	800030a <_pal_lld_setgroupmode.constprop.0+0x1a>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80002f8:	6a1a      	ldr	r2, [r3, #32]
 80002fa:	ea22 0404 	bic.w	r4, r2, r4
 80002fe:	4326      	orrs	r6, r4
 8000300:	621e      	str	r6, [r3, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8000302:	0840      	lsrs	r0, r0, #1
 8000304:	d02d      	beq.n	8000362 <_pal_lld_setgroupmode.constprop.0+0x72>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 8000306:	00ad      	lsls	r5, r5, #2
    bit++;
 8000308:	3101      	adds	r1, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
 800030a:	07c3      	lsls	r3, r0, #31
 800030c:	d5f9      	bpl.n	8000302 <_pal_lld_setgroupmode.constprop.0+0x12>

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800030e:	4b1f      	ldr	r3, [pc, #124]	; (800038c <_pal_lld_setgroupmode.constprop.0+0x9c>)
 8000310:	2201      	movs	r2, #1
 8000312:	685c      	ldr	r4, [r3, #4]
 8000314:	408a      	lsls	r2, r1
 8000316:	ea24 0202 	bic.w	r2, r4, r2
 800031a:	605a      	str	r2, [r3, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800031c:	004e      	lsls	r6, r1, #1
 800031e:	2203      	movs	r2, #3
 8000320:	689c      	ldr	r4, [r3, #8]
 8000322:	40b2      	lsls	r2, r6
 8000324:	43d2      	mvns	r2, r2
 8000326:	4014      	ands	r4, r2
 8000328:	609c      	str	r4, [r3, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800032a:	68de      	ldr	r6, [r3, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800032c:	f001 0407 	and.w	r4, r1, #7
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000330:	4016      	ands	r6, r2
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8000332:	00a4      	lsls	r4, r4, #2
 8000334:	f04f 0e07 	mov.w	lr, #7
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8000338:	270f      	movs	r7, #15
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
 800033a:	2d02      	cmp	r5, #2
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800033c:	60de      	str	r6, [r3, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800033e:	fa0e f604 	lsl.w	r6, lr, r4
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8000342:	fa07 f404 	lsl.w	r4, r7, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
 8000346:	d00d      	beq.n	8000364 <_pal_lld_setgroupmode.constprop.0+0x74>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8000348:	681f      	ldr	r7, [r3, #0]
 800034a:	403a      	ands	r2, r7
 800034c:	432a      	orrs	r2, r5
        if (bit < 8)
 800034e:	2907      	cmp	r1, #7
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8000350:	601a      	str	r2, [r3, #0]
        if (bit < 8)
 8000352:	d9d1      	bls.n	80002f8 <_pal_lld_setgroupmode.constprop.0+0x8>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000356:	ea22 0404 	bic.w	r4, r2, r4
 800035a:	4326      	orrs	r6, r4
      }
    }
    mask >>= 1;
    if (!mask)
 800035c:	0840      	lsrs	r0, r0, #1
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 800035e:	625e      	str	r6, [r3, #36]	; 0x24
      }
    }
    mask >>= 1;
    if (!mask)
 8000360:	d1d1      	bne.n	8000306 <_pal_lld_setgroupmode.constprop.0+0x16>
 8000362:	bdf0      	pop	{r4, r5, r6, r7, pc}
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 8000364:	4571      	cmp	r1, lr
 8000366:	d80b      	bhi.n	8000380 <_pal_lld_setgroupmode.constprop.0+0x90>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000368:	6a1f      	ldr	r7, [r3, #32]
 800036a:	ea27 0404 	bic.w	r4, r7, r4
 800036e:	4326      	orrs	r6, r4
 8000370:	621e      	str	r6, [r3, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 8000372:	4c06      	ldr	r4, [pc, #24]	; (800038c <_pal_lld_setgroupmode.constprop.0+0x9c>)
 8000374:	6823      	ldr	r3, [r4, #0]
 8000376:	401a      	ands	r2, r3
 8000378:	f042 0202 	orr.w	r2, r2, #2
 800037c:	6022      	str	r2, [r4, #0]
 800037e:	e7c0      	b.n	8000302 <_pal_lld_setgroupmode.constprop.0+0x12>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000380:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8000382:	ea27 0404 	bic.w	r4, r7, r4
 8000386:	4326      	orrs	r6, r4
 8000388:	625e      	str	r6, [r3, #36]	; 0x24
 800038a:	e7f2      	b.n	8000372 <_pal_lld_setgroupmode.constprop.0+0x82>
 800038c:	48000800 	.word	0x48000800

08000390 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8000390:	e7fe      	b.n	8000390 <BusFault_Handler>
 8000392:	bf00      	nop
	...

080003a0 <serve_usart_irq>:
/**
 * @brief   USART common service routine.
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void serve_usart_irq(UARTDriver *uartp) {
 80003a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isr;
  USART_TypeDef *u = uartp->usart;
 80003a4:	6886      	ldr	r6, [r0, #8]
  uint32_t cr1 = u->CR1;
 80003a6:	6837      	ldr	r7, [r6, #0]
  
  /* Reading and clearing status.*/
  isr = u->ISR;
 80003a8:	69f4      	ldr	r4, [r6, #28]
  u->ICR = isr;
 80003aa:	6234      	str	r4, [r6, #32]

  if (isr & (USART_ISR_LBDF | USART_ISR_ORE | USART_ISR_NE |
 80003ac:	f240 130f 	movw	r3, #271	; 0x10f
 80003b0:	4023      	ands	r3, r4
/**
 * @brief   USART common service routine.
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void serve_usart_irq(UARTDriver *uartp) {
 80003b2:	4605      	mov	r5, r0
  
  /* Reading and clearing status.*/
  isr = u->ISR;
  u->ICR = isr;

  if (isr & (USART_ISR_LBDF | USART_ISR_ORE | USART_ISR_NE |
 80003b4:	b1cb      	cbz	r3, 80003ea <serve_usart_irq+0x4a>
             USART_ISR_FE   | USART_ISR_PE)) {
    _uart_rx_error_isr_code(uartp, translate_errors(isr));
 80003b6:	6843      	ldr	r3, [r0, #4]
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	b1b3      	cbz	r3, 80003ea <serve_usart_irq+0x4a>
 */
static uartflags_t translate_errors(uint32_t isr) {
  uartflags_t sts = 0;

  if (isr & USART_ISR_ORE)
    sts |= UART_OVERRUN_ERROR;
 80003bc:	f014 0f08 	tst.w	r4, #8
 80003c0:	bf0c      	ite	eq
 80003c2:	2100      	moveq	r1, #0
 80003c4:	2110      	movne	r1, #16
  if (isr & USART_ISR_PE)
 80003c6:	07e2      	lsls	r2, r4, #31
    sts |= UART_PARITY_ERROR;
 80003c8:	bf48      	it	mi
 80003ca:	f041 0104 	orrmi.w	r1, r1, #4
  if (isr & USART_ISR_FE)
 80003ce:	07a0      	lsls	r0, r4, #30
    sts |= UART_FRAMING_ERROR;
 80003d0:	bf48      	it	mi
 80003d2:	f041 0108 	orrmi.w	r1, r1, #8
  if (isr & USART_ISR_NE)
 80003d6:	0762      	lsls	r2, r4, #29
    sts |= UART_NOISE_ERROR;
 80003d8:	bf48      	it	mi
 80003da:	f041 0120 	orrmi.w	r1, r1, #32
  if (isr & USART_ISR_LBDF)
 80003de:	05e0      	lsls	r0, r4, #23
    sts |= UART_BREAK_DETECTED;
 80003e0:	bf48      	it	mi
 80003e2:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  isr = u->ISR;
  u->ICR = isr;

  if (isr & (USART_ISR_LBDF | USART_ISR_ORE | USART_ISR_NE |
             USART_ISR_FE   | USART_ISR_PE)) {
    _uart_rx_error_isr_code(uartp, translate_errors(isr));
 80003e6:	4628      	mov	r0, r5
 80003e8:	4798      	blx	r3
  }

  if ((isr & USART_ISR_TC) && (cr1 & USART_CR1_TCIE)) {
 80003ea:	0662      	lsls	r2, r4, #25
 80003ec:	d501      	bpl.n	80003f2 <serve_usart_irq+0x52>
 80003ee:	067b      	lsls	r3, r7, #25
 80003f0:	d417      	bmi.n	8000422 <serve_usart_irq+0x82>

    /* End of transmission, a callback is generated.*/
    _uart_tx2_isr_code(uartp);
  }

  if ((cr1 & USART_CR1_CMIE) && (isr & USART_ISR_CMF)) {
 80003f2:	0478      	lsls	r0, r7, #17
 80003f4:	d501      	bpl.n	80003fa <serve_usart_irq+0x5a>
 80003f6:	03a1      	lsls	r1, r4, #14
 80003f8:	d40c      	bmi.n	8000414 <serve_usart_irq+0x74>
	if (uartp->config->rxmatch_cb != NULL) {
	  uartp->config->rxmatch_cb(uartp);
	}
  }

  if ((cr1 & USART_CR1_IDLEIE) && (isr & USART_ISR_IDLE)) {
 80003fa:	06fa      	lsls	r2, r7, #27
 80003fc:	d508      	bpl.n	8000410 <serve_usart_irq+0x70>
 80003fe:	06e3      	lsls	r3, r4, #27
 8000400:	d506      	bpl.n	8000410 <serve_usart_irq+0x70>
	/* Receiver in active state, a callback is generated, if enabled, after
	   a completed transfer.*/
	if (uartp->config->rxidle_cb != NULL) {
 8000402:	686b      	ldr	r3, [r5, #4]
 8000404:	68db      	ldr	r3, [r3, #12]
 8000406:	b11b      	cbz	r3, 8000410 <serve_usart_irq+0x70>
	  uartp->config->rxidle_cb(uartp);
 8000408:	4628      	mov	r0, r5
	}
  }
}
 800040a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  if ((cr1 & USART_CR1_IDLEIE) && (isr & USART_ISR_IDLE)) {
	/* Receiver in active state, a callback is generated, if enabled, after
	   a completed transfer.*/
	if (uartp->config->rxidle_cb != NULL) {
	  uartp->config->rxidle_cb(uartp);
 800040e:	4718      	bx	r3
 8000410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    /* End of transmission, a callback is generated.*/
    _uart_tx2_isr_code(uartp);
  }

  if ((cr1 & USART_CR1_CMIE) && (isr & USART_ISR_CMF)) {
	if (uartp->config->rxmatch_cb != NULL) {
 8000414:	686b      	ldr	r3, [r5, #4]
 8000416:	691b      	ldr	r3, [r3, #16]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d0ee      	beq.n	80003fa <serve_usart_irq+0x5a>
	  uartp->config->rxmatch_cb(uartp);
 800041c:	4628      	mov	r0, r5
 800041e:	4798      	blx	r3
 8000420:	e7eb      	b.n	80003fa <serve_usart_irq+0x5a>
  if ((isr & USART_ISR_TC) && (cr1 & USART_CR1_TCIE)) {
    /* TC interrupt disabled.*/
    u->CR1 = cr1 & ~USART_CR1_TCIE;

    /* End of transmission, a callback is generated.*/
    _uart_tx2_isr_code(uartp);
 8000422:	686b      	ldr	r3, [r5, #4]
 8000424:	685b      	ldr	r3, [r3, #4]
    _uart_rx_error_isr_code(uartp, translate_errors(isr));
  }

  if ((isr & USART_ISR_TC) && (cr1 & USART_CR1_TCIE)) {
    /* TC interrupt disabled.*/
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000426:	f027 0240 	bic.w	r2, r7, #64	; 0x40
 800042a:	6032      	str	r2, [r6, #0]

    /* End of transmission, a callback is generated.*/
    _uart_tx2_isr_code(uartp);
 800042c:	2b00      	cmp	r3, #0
 800042e:	d0e0      	beq.n	80003f2 <serve_usart_irq+0x52>
 8000430:	4628      	mov	r0, r5
 8000432:	4798      	blx	r3
 8000434:	e7dd      	b.n	80003f2 <serve_usart_irq+0x52>
 8000436:	bf00      	nop
	...

08000440 <chTMStopMeasurementX>:
 8000440:	4b0e      	ldr	r3, [pc, #56]	; (800047c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000442:	490f      	ldr	r1, [pc, #60]	; (8000480 <chTMStopMeasurementX+0x40>)
 8000444:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000446:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000448:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800044a:	6e0f      	ldr	r7, [r1, #96]	; 0x60
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 800044c:	6841      	ldr	r1, [r0, #4]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800044e:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000450:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000454:	1ad3      	subs	r3, r2, r3
 8000456:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 8000458:	18e4      	adds	r4, r4, r3
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 800045a:	6802      	ldr	r2, [r0, #0]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800045c:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 800045e:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8000462:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000464:	f106 0601 	add.w	r6, r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8000468:	bf88      	it	hi
 800046a:	6043      	strhi	r3, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 800046c:	4293      	cmp	r3, r2

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800046e:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000470:	e9c0 4504 	strd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 8000474:	bf38      	it	cc
 8000476:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8000478:	bcf0      	pop	{r4, r5, r6, r7}
 800047a:	4770      	bx	lr
 800047c:	e0001000 	.word	0xe0001000
 8000480:	20001238 	.word	0x20001238
	...

08000490 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000490:	e7fe      	b.n	8000490 <_idle_thread>
 8000492:	bf00      	nop
	...

080004a0 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 80004a0:	b410      	push	{r4}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80004a2:	2320      	movs	r3, #32
 80004a4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 80004a8:	7c03      	ldrb	r3, [r0, #16]
 80004aa:	2b07      	cmp	r3, #7
 80004ac:	d80e      	bhi.n	80004cc <wakeup+0x2c>
 80004ae:	e8df f003 	tbb	[pc, r3]
 80004b2:	0d27      	.short	0x0d27
 80004b4:	0408230d 	.word	0x0408230d
 80004b8:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 80004ba:	6942      	ldr	r2, [r0, #20]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 80004bc:	6893      	ldr	r3, [r2, #8]
 80004be:	3301      	adds	r3, #1
 80004c0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 80004c2:	e890 000c 	ldmia.w	r0, {r2, r3}
 80004c6:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80004c8:	6802      	ldr	r2, [r0, #0]
 80004ca:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 80004cc:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80004d0:	2200      	movs	r2, #0
 80004d2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80004d4:	4b0d      	ldr	r3, [pc, #52]	; (800050c <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 80004d6:	6144      	str	r4, [r0, #20]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80004d8:	7402      	strb	r2, [r0, #16]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
 80004da:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80004dc:	689a      	ldr	r2, [r3, #8]
 80004de:	428a      	cmp	r2, r1
 80004e0:	d2fb      	bcs.n	80004da <wakeup+0x3a>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 80004e2:	685a      	ldr	r2, [r3, #4]
 80004e4:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 80004e6:	6003      	str	r3, [r0, #0]
 80004e8:	2100      	movs	r1, #0
  tp->queue.prev             = cp->queue.prev;
  tp->queue.prev->queue.next = tp;
 80004ea:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80004ec:	6058      	str	r0, [r3, #4]
 80004ee:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80004f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80004f6:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 80004f8:	6943      	ldr	r3, [r0, #20]
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	e7e5      	b.n	80004cc <wakeup+0x2c>
 8000500:	2300      	movs	r3, #0
 8000502:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000506:	f85d 4b04 	ldr.w	r4, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	20001238 	.word	0x20001238

08000510 <_port_irq_epilogue>:
 8000510:	2320      	movs	r3, #32
 8000512:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000516:	4b12      	ldr	r3, [pc, #72]	; (8000560 <_port_irq_epilogue+0x50>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800051e:	d102      	bne.n	8000526 <_port_irq_epilogue+0x16>
 8000520:	f383 8811 	msr	BASEPRI, r3
 8000524:	4770      	bx	lr
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8000526:	eef1 3a10 	vmrs	r3, fpscr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800052a:	f3ef 8309 	mrs	r3, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 800052e:	4a0d      	ldr	r2, [pc, #52]	; (8000564 <_port_irq_epilogue+0x54>)
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8000530:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8000534:	68d2      	ldr	r2, [r2, #12]
 8000536:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800053a:	f843 1c4c 	str.w	r1, [r3, #-76]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800053e:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 8000542:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8000546:	4a08      	ldr	r2, [pc, #32]	; (8000568 <_port_irq_epilogue+0x58>)
 8000548:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 800054a:	6912      	ldr	r2, [r2, #16]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 800054c:	6889      	ldr	r1, [r1, #8]
 800054e:	6892      	ldr	r2, [r2, #8]
 8000550:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000552:	bf8c      	ite	hi
 8000554:	4a05      	ldrhi	r2, [pc, #20]	; (800056c <_port_irq_epilogue+0x5c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000556:	4a06      	ldrls	r2, [pc, #24]	; (8000570 <_port_irq_epilogue+0x60>)
 8000558:	f843 2c50 	str.w	r2, [r3, #-80]
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	e000ed00 	.word	0xe000ed00
 8000564:	e000ef30 	.word	0xe000ef30
 8000568:	20001238 	.word	0x20001238
 800056c:	080001c9 	.word	0x080001c9
 8000570:	080001cc 	.word	0x080001cc
	...

08000580 <Vector130>:
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM5);
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <Vector130+0x28>)
 8000582:	6819      	ldr	r1, [r3, #0]
 8000584:	f3c1 4103 	ubfx	r1, r1, #16, #4
 8000588:	b159      	cbz	r1, 80005a2 <Vector130+0x22>
 800058a:	4808      	ldr	r0, [pc, #32]	; (80005ac <Vector130+0x2c>)
 800058c:	6d82      	ldr	r2, [r0, #88]	; 0x58
/**
 * @brief   DMA2 stream 5 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 800058e:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM5);
 8000590:	040c      	lsls	r4, r1, #16
 8000592:	605c      	str	r4, [r3, #4]
 8000594:	b10a      	cbz	r2, 800059a <Vector130+0x1a>
 8000596:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8000598:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800059a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM5);

  OSAL_IRQ_EPILOGUE();
 800059e:	f7ff bfb7 	b.w	8000510 <_port_irq_epilogue>
 80005a2:	f7ff bfb5 	b.w	8000510 <_port_irq_epilogue>
 80005a6:	bf00      	nop
 80005a8:	40020400 	.word	0x40020400
 80005ac:	20000800 	.word	0x20000800

080005b0 <Vector12C>:
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM4);
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <Vector12C+0x28>)
 80005b2:	6819      	ldr	r1, [r3, #0]
 80005b4:	f3c1 3103 	ubfx	r1, r1, #12, #4
 80005b8:	b159      	cbz	r1, 80005d2 <Vector12C+0x22>
 80005ba:	4808      	ldr	r0, [pc, #32]	; (80005dc <Vector12C+0x2c>)
 80005bc:	6d02      	ldr	r2, [r0, #80]	; 0x50
/**
 * @brief   DMA2 stream 4 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 80005be:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM4);
 80005c0:	030c      	lsls	r4, r1, #12
 80005c2:	605c      	str	r4, [r3, #4]
 80005c4:	b10a      	cbz	r2, 80005ca <Vector12C+0x1a>
 80005c6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80005c8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80005ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM4);

  OSAL_IRQ_EPILOGUE();
 80005ce:	f7ff bf9f 	b.w	8000510 <_port_irq_epilogue>
 80005d2:	f7ff bf9d 	b.w	8000510 <_port_irq_epilogue>
 80005d6:	bf00      	nop
 80005d8:	40020400 	.word	0x40020400
 80005dc:	20000800 	.word	0x20000800

080005e0 <Vector128>:
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM3);
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <Vector128+0x28>)
 80005e2:	6819      	ldr	r1, [r3, #0]
 80005e4:	f3c1 2103 	ubfx	r1, r1, #8, #4
 80005e8:	b159      	cbz	r1, 8000602 <Vector128+0x22>
 80005ea:	4808      	ldr	r0, [pc, #32]	; (800060c <Vector128+0x2c>)
 80005ec:	6c82      	ldr	r2, [r0, #72]	; 0x48
/**
 * @brief   DMA2 stream 3 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 80005ee:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM3);
 80005f0:	020c      	lsls	r4, r1, #8
 80005f2:	605c      	str	r4, [r3, #4]
 80005f4:	b10a      	cbz	r2, 80005fa <Vector128+0x1a>
 80005f6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80005f8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80005fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM3);

  OSAL_IRQ_EPILOGUE();
 80005fe:	f7ff bf87 	b.w	8000510 <_port_irq_epilogue>
 8000602:	f7ff bf85 	b.w	8000510 <_port_irq_epilogue>
 8000606:	bf00      	nop
 8000608:	40020400 	.word	0x40020400
 800060c:	20000800 	.word	0x20000800

08000610 <Vector124>:
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM2);
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <Vector124+0x28>)
 8000612:	6819      	ldr	r1, [r3, #0]
 8000614:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8000618:	b159      	cbz	r1, 8000632 <Vector124+0x22>
 800061a:	4808      	ldr	r0, [pc, #32]	; (800063c <Vector124+0x2c>)
 800061c:	6c02      	ldr	r2, [r0, #64]	; 0x40
/**
 * @brief   DMA2 stream 2 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 800061e:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM2);
 8000620:	010c      	lsls	r4, r1, #4
 8000622:	605c      	str	r4, [r3, #4]
 8000624:	b10a      	cbz	r2, 800062a <Vector124+0x1a>
 8000626:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000628:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800062a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM2);

  OSAL_IRQ_EPILOGUE();
 800062e:	f7ff bf6f 	b.w	8000510 <_port_irq_epilogue>
 8000632:	f7ff bf6d 	b.w	8000510 <_port_irq_epilogue>
 8000636:	bf00      	nop
 8000638:	40020400 	.word	0x40020400
 800063c:	20000800 	.word	0x20000800

08000640 <Vector120>:
/**
 * @brief   DMA2 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8000640:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM1);
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <Vector120+0x20>)
 8000644:	6819      	ldr	r1, [r3, #0]
 8000646:	f011 010f 	ands.w	r1, r1, #15
 800064a:	d005      	beq.n	8000658 <Vector120+0x18>
 800064c:	4a05      	ldr	r2, [pc, #20]	; (8000664 <Vector120+0x24>)
 800064e:	6059      	str	r1, [r3, #4]
 8000650:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8000652:	b10b      	cbz	r3, 8000658 <Vector120+0x18>
 8000654:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8000656:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8000658:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM1);

  OSAL_IRQ_EPILOGUE();
 800065c:	f7ff bf58 	b.w	8000510 <_port_irq_epilogue>
 8000660:	40020400 	.word	0x40020400
 8000664:	20000800 	.word	0x20000800
	...

08000670 <Vector84>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <Vector84+0x28>)
 8000672:	6819      	ldr	r1, [r3, #0]
 8000674:	f3c1 6103 	ubfx	r1, r1, #24, #4
 8000678:	b159      	cbz	r1, 8000692 <Vector84+0x22>
 800067a:	4808      	ldr	r0, [pc, #32]	; (800069c <Vector84+0x2c>)
 800067c:	6b02      	ldr	r2, [r0, #48]	; 0x30
/**
 * @brief   DMA1 stream 7 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 800067e:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8000680:	060c      	lsls	r4, r1, #24
 8000682:	605c      	str	r4, [r3, #4]
 8000684:	b10a      	cbz	r2, 800068a <Vector84+0x1a>
 8000686:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000688:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800068a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);

  OSAL_IRQ_EPILOGUE();
 800068e:	f7ff bf3f 	b.w	8000510 <_port_irq_epilogue>
 8000692:	f7ff bf3d 	b.w	8000510 <_port_irq_epilogue>
 8000696:	bf00      	nop
 8000698:	40020000 	.word	0x40020000
 800069c:	20000800 	.word	0x20000800

080006a0 <Vector80>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <Vector80+0x28>)
 80006a2:	6819      	ldr	r1, [r3, #0]
 80006a4:	f3c1 5103 	ubfx	r1, r1, #20, #4
 80006a8:	b159      	cbz	r1, 80006c2 <Vector80+0x22>
 80006aa:	4808      	ldr	r0, [pc, #32]	; (80006cc <Vector80+0x2c>)
 80006ac:	6a82      	ldr	r2, [r0, #40]	; 0x28
/**
 * @brief   DMA1 stream 6 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 80006ae:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 80006b0:	050c      	lsls	r4, r1, #20
 80006b2:	605c      	str	r4, [r3, #4]
 80006b4:	b10a      	cbz	r2, 80006ba <Vector80+0x1a>
 80006b6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80006b8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80006ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);

  OSAL_IRQ_EPILOGUE();
 80006be:	f7ff bf27 	b.w	8000510 <_port_irq_epilogue>
 80006c2:	f7ff bf25 	b.w	8000510 <_port_irq_epilogue>
 80006c6:	bf00      	nop
 80006c8:	40020000 	.word	0x40020000
 80006cc:	20000800 	.word	0x20000800

080006d0 <Vector7C>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <Vector7C+0x28>)
 80006d2:	6819      	ldr	r1, [r3, #0]
 80006d4:	f3c1 4103 	ubfx	r1, r1, #16, #4
 80006d8:	b159      	cbz	r1, 80006f2 <Vector7C+0x22>
 80006da:	4808      	ldr	r0, [pc, #32]	; (80006fc <Vector7C+0x2c>)
 80006dc:	6a02      	ldr	r2, [r0, #32]
/**
 * @brief   DMA1 stream 5 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 80006de:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 80006e0:	040c      	lsls	r4, r1, #16
 80006e2:	605c      	str	r4, [r3, #4]
 80006e4:	b10a      	cbz	r2, 80006ea <Vector7C+0x1a>
 80006e6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80006e8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80006ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);

  OSAL_IRQ_EPILOGUE();
 80006ee:	f7ff bf0f 	b.w	8000510 <_port_irq_epilogue>
 80006f2:	f7ff bf0d 	b.w	8000510 <_port_irq_epilogue>
 80006f6:	bf00      	nop
 80006f8:	40020000 	.word	0x40020000
 80006fc:	20000800 	.word	0x20000800

08000700 <Vector78>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <Vector78+0x28>)
 8000702:	6819      	ldr	r1, [r3, #0]
 8000704:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8000708:	b159      	cbz	r1, 8000722 <Vector78+0x22>
 800070a:	4808      	ldr	r0, [pc, #32]	; (800072c <Vector78+0x2c>)
 800070c:	6982      	ldr	r2, [r0, #24]
/**
 * @brief   DMA1 stream 4 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 800070e:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8000710:	030c      	lsls	r4, r1, #12
 8000712:	605c      	str	r4, [r3, #4]
 8000714:	b10a      	cbz	r2, 800071a <Vector78+0x1a>
 8000716:	69c0      	ldr	r0, [r0, #28]
 8000718:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800071a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);

  OSAL_IRQ_EPILOGUE();
 800071e:	f7ff bef7 	b.w	8000510 <_port_irq_epilogue>
 8000722:	f7ff bef5 	b.w	8000510 <_port_irq_epilogue>
 8000726:	bf00      	nop
 8000728:	40020000 	.word	0x40020000
 800072c:	20000800 	.word	0x20000800

08000730 <Vector74>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <Vector74+0x28>)
 8000732:	6819      	ldr	r1, [r3, #0]
 8000734:	f3c1 2103 	ubfx	r1, r1, #8, #4
 8000738:	b159      	cbz	r1, 8000752 <Vector74+0x22>
 800073a:	4808      	ldr	r0, [pc, #32]	; (800075c <Vector74+0x2c>)
 800073c:	6902      	ldr	r2, [r0, #16]
/**
 * @brief   DMA1 stream 3 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 800073e:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8000740:	020c      	lsls	r4, r1, #8
 8000742:	605c      	str	r4, [r3, #4]
 8000744:	b10a      	cbz	r2, 800074a <Vector74+0x1a>
 8000746:	6940      	ldr	r0, [r0, #20]
 8000748:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800074a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);

  OSAL_IRQ_EPILOGUE();
 800074e:	f7ff bedf 	b.w	8000510 <_port_irq_epilogue>
 8000752:	f7ff bedd 	b.w	8000510 <_port_irq_epilogue>
 8000756:	bf00      	nop
 8000758:	40020000 	.word	0x40020000
 800075c:	20000800 	.word	0x20000800

08000760 <Vector70>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <Vector70+0x28>)
 8000762:	6819      	ldr	r1, [r3, #0]
 8000764:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8000768:	b159      	cbz	r1, 8000782 <Vector70+0x22>
 800076a:	4808      	ldr	r0, [pc, #32]	; (800078c <Vector70+0x2c>)
 800076c:	6882      	ldr	r2, [r0, #8]
/**
 * @brief   DMA1 stream 2 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 800076e:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8000770:	010c      	lsls	r4, r1, #4
 8000772:	605c      	str	r4, [r3, #4]
 8000774:	b10a      	cbz	r2, 800077a <Vector70+0x1a>
 8000776:	68c0      	ldr	r0, [r0, #12]
 8000778:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800077a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);

  OSAL_IRQ_EPILOGUE();
 800077e:	f7ff bec7 	b.w	8000510 <_port_irq_epilogue>
 8000782:	f7ff bec5 	b.w	8000510 <_port_irq_epilogue>
 8000786:	bf00      	nop
 8000788:	40020000 	.word	0x40020000
 800078c:	20000800 	.word	0x20000800

08000790 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8000790:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <Vector6C+0x20>)
 8000794:	6819      	ldr	r1, [r3, #0]
 8000796:	f011 010f 	ands.w	r1, r1, #15
 800079a:	d005      	beq.n	80007a8 <Vector6C+0x18>
 800079c:	4a05      	ldr	r2, [pc, #20]	; (80007b4 <Vector6C+0x24>)
 800079e:	6059      	str	r1, [r3, #4]
 80007a0:	6813      	ldr	r3, [r2, #0]
 80007a2:	b10b      	cbz	r3, 80007a8 <Vector6C+0x18>
 80007a4:	6850      	ldr	r0, [r2, #4]
 80007a6:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80007a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);

  OSAL_IRQ_EPILOGUE();
 80007ac:	f7ff beb0 	b.w	8000510 <_port_irq_epilogue>
 80007b0:	40020000 	.word	0x40020000
 80007b4:	20000800 	.word	0x20000800
	...

080007c0 <VectorDC>:
/**
 * @brief   USART3 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 80007c0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD3);
 80007c2:	4803      	ldr	r0, [pc, #12]	; (80007d0 <VectorDC+0x10>)
 80007c4:	f7ff fdec 	bl	80003a0 <serve_usart_irq>

  OSAL_IRQ_EPILOGUE();
}
 80007c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD3);

  OSAL_IRQ_EPILOGUE();
 80007cc:	f7ff bea0 	b.w	8000510 <_port_irq_epilogue>
 80007d0:	20001620 	.word	0x20001620
	...

080007e0 <VectorD8>:
/**
 * @brief   USART2 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80007e0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD2);
 80007e2:	4803      	ldr	r0, [pc, #12]	; (80007f0 <VectorD8+0x10>)
 80007e4:	f7ff fddc 	bl	80003a0 <serve_usart_irq>

  OSAL_IRQ_EPILOGUE();
}
 80007e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD2);

  OSAL_IRQ_EPILOGUE();
 80007ec:	f7ff be90 	b.w	8000510 <_port_irq_epilogue>
 80007f0:	20001600 	.word	0x20001600
	...

08000800 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
 8000800:	b570      	push	{r4, r5, r6, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000802:	2320      	movs	r3, #32
 8000804:	f383 8811 	msr	BASEPRI, r3
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
 8000808:	4c12      	ldr	r4, [pc, #72]	; (8000854 <SysTick_Handler+0x54>)
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
 800080a:	4626      	mov	r6, r4
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
 800080c:	6a22      	ldr	r2, [r4, #32]
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
 800080e:	f856 3f14 	ldr.w	r3, [r6, #20]!
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
 8000812:	3201      	adds	r2, #1
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
 8000814:	42b3      	cmp	r3, r6
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
 8000816:	6222      	str	r2, [r4, #32]
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
 8000818:	d014      	beq.n	8000844 <SysTick_Handler+0x44>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
 800081a:	689a      	ldr	r2, [r3, #8]
 800081c:	3a01      	subs	r2, #1
 800081e:	609a      	str	r2, [r3, #8]
    while (ch.vtlist.next->delta == (systime_t)0) {
 8000820:	b982      	cbnz	r2, 8000844 <SysTick_Handler+0x44>
      vtfunc_t fn;

      vtp = ch.vtlist.next;
      fn = vtp->func;
      vtp->func = NULL;
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8000822:	6819      	ldr	r1, [r3, #0]
    while (ch.vtlist.next->delta == (systime_t)0) {
      virtual_timer_t *vtp;
      vtfunc_t fn;

      vtp = ch.vtlist.next;
      fn = vtp->func;
 8000824:	68dd      	ldr	r5, [r3, #12]
      vtp->func = NULL;
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800082a:	604e      	str	r6, [r1, #4]
      ch.vtlist.next = vtp->next;
 800082c:	6161      	str	r1, [r4, #20]
 800082e:	f382 8811 	msr	BASEPRI, r2
      chSysUnlockFromISR();
      fn(vtp->par);
 8000832:	6918      	ldr	r0, [r3, #16]
 8000834:	47a8      	blx	r5
 8000836:	2320      	movs	r3, #32
 8000838:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
    while (ch.vtlist.next->delta == (systime_t)0) {
 800083c:	6963      	ldr	r3, [r4, #20]
 800083e:	689a      	ldr	r2, [r3, #8]
 8000840:	2a00      	cmp	r2, #0
 8000842:	d0ee      	beq.n	8000822 <SysTick_Handler+0x22>
 8000844:	2300      	movs	r3, #0
 8000846:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
 800084a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 800084e:	f7ff be5f 	b.w	8000510 <_port_irq_epilogue>
 8000852:	bf00      	nop
 8000854:	20001238 	.word	0x20001238
	...

08000860 <SVC_Handler>:
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8000860:	4a06      	ldr	r2, [pc, #24]	; (800087c <SVC_Handler+0x1c>)
 8000862:	6853      	ldr	r3, [r2, #4]
 8000864:	f023 0301 	bic.w	r3, r3, #1
 8000868:	6053      	str	r3, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800086a:	f3ef 8309 	mrs	r3, PSP

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800086e:	3368      	adds	r3, #104	; 0x68
 8000870:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000874:	2300      	movs	r3, #0
 8000876:	f383 8811 	msr	BASEPRI, r3
 800087a:	4770      	bx	lr
 800087c:	e000ef30 	.word	0xe000ef30

08000880 <chSchGoSleepS>:
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp = currp;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <chSchGoSleepS+0x20>)
 8000882:	6919      	ldr	r1, [r3, #16]
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 8000884:	681a      	ldr	r2, [r3, #0]
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8000886:	b410      	push	{r4}
  thread_t *otp = currp;

  chDbgCheckClassS();

  /* New state.*/
  otp->state = newstate;
 8000888:	7408      	strb	r0, [r1, #16]

  tqp->next             = tp->queue.next;
 800088a:	6810      	ldr	r0, [r2, #0]
 800088c:	6018      	str	r0, [r3, #0]
  otp->preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 800088e:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8000890:	6043      	str	r3, [r0, #4]
     time quantum when it will wakeup.*/
  otp->preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000892:	611a      	str	r2, [r3, #16]
  currp->state = CH_STATE_CURRENT;
 8000894:	7414      	strb	r4, [r2, #16]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8000896:	4610      	mov	r0, r2
}
 8000898:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800089c:	f7ff bc80 	b.w	80001a0 <_port_switch>
 80008a0:	20001238 	.word	0x20001238
	...

080008b0 <Task_100ms>:
TASK(Task_80ms)
{
	TerminateTask();
}

TASK(Task_100ms)
 80008b0:	b580      	push	{r7, lr}
 80008b2:	4d20      	ldr	r5, [pc, #128]	; (8000934 <Task_100ms+0x84>)
 80008b4:	4c20      	ldr	r4, [pc, #128]	; (8000938 <Task_100ms+0x88>)
 80008b6:	b086      	sub	sp, #24
 80008b8:	ae01      	add	r6, sp, #4
{
	TerminateTask();
 80008ba:	692b      	ldr	r3, [r5, #16]
 80008bc:	491f      	ldr	r1, [pc, #124]	; (800093c <Task_100ms+0x8c>)
 80008be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008c4:	fb02 f303 	mul.w	r3, r2, r3
 80008c8:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80008cc:	fba1 2303 	umull	r2, r3, r1, r3
 80008d0:	099b      	lsrs	r3, r3, #6
 80008d2:	2220      	movs	r2, #32
 80008d4:	f382 8811 	msr	BASEPRI, r2
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.next;
 80008d8:	696a      	ldr	r2, [r5, #20]
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 80008da:	6928      	ldr	r0, [r5, #16]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.next;
  while (p->delta < delta) {
 80008dc:	6891      	ldr	r1, [r2, #8]

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 80008de:	9404      	str	r4, [sp, #16]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.next;
  while (p->delta < delta) {
 80008e0:	428b      	cmp	r3, r1
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 80008e2:	9005      	str	r0, [sp, #20]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.next;
  while (p->delta < delta) {
 80008e4:	d904      	bls.n	80008f0 <Task_100ms+0x40>
    delta -= p->delta;
    p = p->next;
 80008e6:	6812      	ldr	r2, [r2, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.next;
  while (p->delta < delta) {
    delta -= p->delta;
 80008e8:	1a5b      	subs	r3, r3, r1
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.next;
  while (p->delta < delta) {
 80008ea:	6891      	ldr	r1, [r2, #8]
 80008ec:	4299      	cmp	r1, r3
 80008ee:	d3fa      	bcc.n	80008e6 <Task_100ms+0x36>
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 80008f0:	6851      	ldr	r1, [r2, #4]
 80008f2:	9102      	str	r1, [sp, #8]
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
 80008f4:	9201      	str	r2, [sp, #4]
  vtp->prev = vtp->next->prev;
  vtp->prev->next = vtp;
 80008f6:	600e      	str	r6, [r1, #0]
  p->prev = vtp;
 80008f8:	6056      	str	r6, [r2, #4]
  vtp->delta = delta
 80008fa:	9303      	str	r3, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
 80008fc:	6891      	ldr	r1, [r2, #8]
  ch.vtlist.delta = (systime_t)-1;
 80008fe:	4f0d      	ldr	r7, [pc, #52]	; (8000934 <Task_100ms+0x84>)
  p->prev = vtp;
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
 8000900:	1acb      	subs	r3, r1, r3
 8000902:	6093      	str	r3, [r2, #8]
  ch.vtlist.delta = (systime_t)-1;
 8000904:	f04f 38ff 	mov.w	r8, #4294967295

  if (TIME_INFINITE != time) {
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
    chSchGoSleepS(newstate);
 8000908:	2008      	movs	r0, #8
 800090a:	f8c5 801c 	str.w	r8, [r5, #28]
 800090e:	f7ff ffb7 	bl	8000880 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8000912:	9b04      	ldr	r3, [sp, #16]
 8000914:	b153      	cbz	r3, 800092c <Task_100ms+0x7c>
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->next->delta += vtp->delta;
 8000916:	9b01      	ldr	r3, [sp, #4]
 8000918:	9a03      	ldr	r2, [sp, #12]
 800091a:	6899      	ldr	r1, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->prev->next = vtp->next;
 800091c:	9802      	ldr	r0, [sp, #8]
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->next->delta += vtp->delta;
 800091e:	440a      	add	r2, r1
 8000920:	609a      	str	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->prev->next = vtp->next;
 8000922:	6003      	str	r3, [r0, #0]
  vtp->next->prev = vtp->prev;
 8000924:	9b01      	ldr	r3, [sp, #4]
 8000926:	6058      	str	r0, [r3, #4]
  vtp->func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.delta = (systime_t)-1;
 8000928:	f8c7 801c 	str.w	r8, [r7, #28]
 800092c:	2300      	movs	r3, #0
 800092e:	f383 8811 	msr	BASEPRI, r3
 8000932:	e7c2      	b.n	80008ba <Task_100ms+0xa>
 8000934:	20001238 	.word	0x20001238
 8000938:	080004a1 	.word	0x080004a1
 800093c:	10624dd3 	.word	0x10624dd3

08000940 <Task_80ms>:
 8000940:	b508      	push	{r3, lr}
 8000942:	f7ff ffb5 	bl	80008b0 <Task_100ms>
 8000946:	bf00      	nop
	...

08000950 <Task_40ms>:
 8000950:	b508      	push	{r3, lr}
 8000952:	f7ff ffad 	bl	80008b0 <Task_100ms>
 8000956:	bf00      	nop
	...

08000960 <Task_20ms>:
 8000960:	b508      	push	{r3, lr}
 8000962:	f7ff ffa5 	bl	80008b0 <Task_100ms>
 8000966:	bf00      	nop
	...

08000970 <Task_10ms>:
 8000970:	b508      	push	{r3, lr}
 8000972:	f7ff ff9d 	bl	80008b0 <Task_100ms>
 8000976:	bf00      	nop
	...

08000980 <Task_5ms>:
 8000980:	b508      	push	{r3, lr}
 8000982:	f7ff ff95 	bl	80008b0 <Task_100ms>
 8000986:	bf00      	nop
	...

08000990 <Task_2ms>:
 8000990:	b508      	push	{r3, lr}
 8000992:	f7ff ff8d 	bl	80008b0 <Task_100ms>
 8000996:	bf00      	nop
	...

080009a0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 80009a0:	b4f0      	push	{r4, r5, r6, r7}
 80009a2:	4e14      	ldr	r6, [pc, #80]	; (80009f4 <__init_ram_areas+0x54>)
 80009a4:	4d14      	ldr	r5, [pc, #80]	; (80009f8 <__init_ram_areas+0x58>)
 80009a6:	4c15      	ldr	r4, [pc, #84]	; (80009fc <__init_ram_areas+0x5c>)
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <__init_ram_areas+0x60>)
 80009aa:	4916      	ldr	r1, [pc, #88]	; (8000a04 <__init_ram_areas+0x64>)
 80009ac:	f106 0770 	add.w	r7, r6, #112	; 0x70
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 80009b0:	429c      	cmp	r4, r3
 80009b2:	d912      	bls.n	80009da <__init_ram_areas+0x3a>
 80009b4:	3904      	subs	r1, #4
 80009b6:	461a      	mov	r2, r3
      *p = *tp;
 80009b8:	f851 0f04 	ldr.w	r0, [r1, #4]!
 80009bc:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 80009c0:	4294      	cmp	r4, r2
 80009c2:	d8f9      	bhi.n	80009b8 <__init_ram_areas+0x18>
 80009c4:	43da      	mvns	r2, r3
 80009c6:	4414      	add	r4, r2
 80009c8:	f024 0403 	bic.w	r4, r4, #3
 80009cc:	3404      	adds	r4, #4
 80009ce:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 80009d0:	429d      	cmp	r5, r3
 80009d2:	d904      	bls.n	80009de <__init_ram_areas+0x3e>
      *p = 0;
 80009d4:	2200      	movs	r2, #0
 80009d6:	f843 2b04 	str.w	r2, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 80009da:	429d      	cmp	r5, r3
 80009dc:	d8fa      	bhi.n	80009d4 <__init_ram_areas+0x34>
      *p = 0;
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80009de:	42be      	cmp	r6, r7
 80009e0:	d005      	beq.n	80009ee <__init_ram_areas+0x4e>
 80009e2:	6931      	ldr	r1, [r6, #16]
 80009e4:	6973      	ldr	r3, [r6, #20]
 80009e6:	69b4      	ldr	r4, [r6, #24]
 80009e8:	69f5      	ldr	r5, [r6, #28]
 80009ea:	3610      	adds	r6, #16
 80009ec:	e7e0      	b.n	80009b0 <__init_ram_areas+0x10>
#endif
}
 80009ee:	bcf0      	pop	{r4, r5, r6, r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	08001100 	.word	0x08001100
 80009f8:	20002170 	.word	0x20002170
 80009fc:	20002170 	.word	0x20002170
 8000a00:	20002170 	.word	0x20002170
 8000a04:	08001270 	.word	0x08001270
	...

08000a10 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8000a10:	e7fe      	b.n	8000a10 <__default_exit>
 8000a12:	bf00      	nop
	...

08000a20 <__late_init>:
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
	...

08000a30 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
	...

08000a40 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8000a40:	b430      	push	{r4, r5}
 8000a42:	2320      	movs	r3, #32
 8000a44:	f383 8811 	msr	BASEPRI, r3
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <chThdExit+0x44>)
 8000a4a:	691d      	ldr	r5, [r3, #16]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->next != (thread_t *)tlp);
 8000a4c:	69ac      	ldr	r4, [r5, #24]

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 8000a4e:	6168      	str	r0, [r5, #20]
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 8000a50:	f105 0018 	add.w	r0, r5, #24
 8000a54:	4284      	cmp	r4, r0
 8000a56:	d011      	beq.n	8000a7c <chThdExit+0x3c>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->next;
  tlp->next = tp->queue.next;
 8000a58:	6822      	ldr	r2, [r4, #0]
 8000a5a:	68a1      	ldr	r1, [r4, #8]
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.queue;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <chThdExit+0x44>)
 8000a5e:	61aa      	str	r2, [r5, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8000a60:	2200      	movs	r2, #0
 8000a62:	7422      	strb	r2, [r4, #16]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
 8000a64:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000a66:	689a      	ldr	r2, [r3, #8]
 8000a68:	428a      	cmp	r2, r1
 8000a6a:	d2fb      	bcs.n	8000a64 <chThdExit+0x24>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8000a70:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  tp->queue.prev->queue.next = tp;
 8000a72:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000a74:	605c      	str	r4, [r3, #4]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->next != (thread_t *)tlp);
 8000a76:	69ac      	ldr	r4, [r5, #24]
 8000a78:	4284      	cmp	r4, r0
 8000a7a:	d1ed      	bne.n	8000a58 <chThdExit+0x18>
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 8000a7c:	200f      	movs	r0, #15
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
  /* The thread never returns here.*/
}
 8000a7e:	bc30      	pop	{r4, r5}
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 8000a80:	f7ff befe 	b.w	8000880 <chSchGoSleepS>
 8000a84:	20001238 	.word	0x20001238
	...

08000a90 <chSchDoReschedule>:
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;
 8000a90:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <chSchDoReschedule+0x38>)
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 8000a92:	6810      	ldr	r0, [r2, #0]

  tqp->next             = tp->queue.next;
 8000a94:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8000a96:	b410      	push	{r4}
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8000a98:	2101      	movs	r1, #1
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;
 8000a9a:	6914      	ldr	r4, [r2, #16]
 8000a9c:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000a9e:	605a      	str	r2, [r3, #4]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000aa0:	6110      	str	r0, [r2, #16]
  currp->state = CH_STATE_CURRENT;
 8000aa2:	7401      	strb	r1, [r0, #16]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	68a1      	ldr	r1, [r4, #8]
 8000aa8:	7422      	strb	r2, [r4, #16]
 8000aaa:	e000      	b.n	8000aae <chSchDoReschedule+0x1e>
 8000aac:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
 8000aae:	689a      	ldr	r2, [r3, #8]
 8000ab0:	428a      	cmp	r2, r1
 8000ab2:	d8fb      	bhi.n	8000aac <chSchDoReschedule+0x1c>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8000ab8:	6023      	str	r3, [r4, #0]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8000aba:	4621      	mov	r1, r4
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
  tp->queue.prev->queue.next = tp;
 8000abc:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000abe:	605c      	str	r4, [r3, #4]
  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 8000ac0:	f85d 4b04 	ldr.w	r4, [sp], #4

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8000ac4:	f7ff bb6c 	b.w	80001a0 <_port_switch>
 8000ac8:	20001238 	.word	0x20001238
 8000acc:	00000000 	.word	0x00000000

08000ad0 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAHB(0xFFFFFFFF);
 8000ad0:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <main+0x68>)
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000ad2:	481a      	ldr	r0, [pc, #104]	; (8000b3c <main+0x6c>)
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAHB(0xFFFFFFFF);
 8000ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ad6:	f04f 31ff 	mov.w	r1, #4294967295
 8000ada:	2200      	movs	r2, #0
#include "hal.h"

/*
 * Application entry point.
 */
void main(void) {
 8000adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ae0:	6299      	str	r1, [r3, #40]	; 0x28
 8000ae2:	629a      	str	r2, [r3, #40]	; 0x28
  rccResetAPB1(0xFFFFFFFF);
 8000ae4:	691c      	ldr	r4, [r3, #16]
 8000ae6:	6119      	str	r1, [r3, #16]
 8000ae8:	611a      	str	r2, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8000aea:	68dc      	ldr	r4, [r3, #12]
 8000aec:	60d9      	str	r1, [r3, #12]
 8000aee:	60da      	str	r2, [r3, #12]

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8000af0:	69d9      	ldr	r1, [r3, #28]
 8000af2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000af6:	61d9      	str	r1, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000af8:	6801      	ldr	r1, [r0, #0]
 8000afa:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000afe:	6001      	str	r1, [r0, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL){
 8000b00:	6a19      	ldr	r1, [r3, #32]
 8000b02:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8000b06:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000b0a:	b087      	sub	sp, #28
 8000b0c:	d003      	beq.n	8000b16 <main+0x46>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8000b0e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000b12:	6219      	str	r1, [r3, #32]
    RCC->BDCR = 0;
 8000b14:	621a      	str	r2, [r3, #32]
#endif

#if STM32_RTCSEL != STM32_RTCSEL_NOCLOCK
  /* If the backup domain hasn't been initialized yet then proceed with
     initialization.*/
  if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <main+0x68>)
 8000b18:	6a1a      	ldr	r2, [r3, #32]
 8000b1a:	0412      	lsls	r2, r2, #16
 8000b1c:	d407      	bmi.n	8000b2e <main+0x5e>
    /* Selects clock source.*/
    RCC->BDCR |= STM32_RTCSEL;
 8000b1e:	6a1a      	ldr	r2, [r3, #32]
 8000b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b24:	621a      	str	r2, [r3, #32]

    /* RTC clock enabled.*/
    RCC->BDCR |= RCC_BDCR_RTCEN;
 8000b26:	6a1a      	ldr	r2, [r3, #32]
 8000b28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b2c:	621a      	str	r2, [r3, #32]
 8000b2e:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <main+0x70>)
 8000b30:	4904      	ldr	r1, [pc, #16]	; (8000b44 <main+0x74>)
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <main+0x78>)
 8000b34:	2300      	movs	r3, #0
 8000b36:	e00a      	b.n	8000b4e <main+0x7e>
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40007000 	.word	0x40007000
 8000b40:	08001180 	.word	0x08001180
 8000b44:	40020008 	.word	0x40020008
 8000b48:	20000800 	.word	0x20000800
 8000b4c:	6851      	ldr	r1, [r2, #4]
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0U;
 8000b4e:	2400      	movs	r4, #0
 8000b50:	600c      	str	r4, [r1, #0]
    _stm32_dma_isr_redir[i].dma_func = NULL;
 8000b52:	f840 4033 	str.w	r4, [r0, r3, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8000b56:	3301      	adds	r3, #1
 8000b58:	2b0c      	cmp	r3, #12
 8000b5a:	f102 0214 	add.w	r2, r2, #20
 8000b5e:	d1f5      	bne.n	8000b4c <main+0x7c>
    _stm32_dma_streams[i].channel->CCR = 0U;
    _stm32_dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFFU;
 8000b60:	4fa8      	ldr	r7, [pc, #672]	; (8000e04 <main+0x334>)
#if STM32_DMA2_NUM_CHANNELS > 0
  DMA2->IFCR = 0xFFFFFFFFU;
 8000b62:	49a9      	ldr	r1, [pc, #676]	; (8000e08 <main+0x338>)
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8000b64:	48a9      	ldr	r0, [pc, #676]	; (8000e0c <main+0x33c>)

#if STM32_HAS_USB
  /* USB IRQ relocated to not conflict with CAN.*/
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_USB_IT_RMP;
 8000b66:	4daa      	ldr	r5, [pc, #680]	; (8000e10 <main+0x340>)

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000b68:	f8df 9300 	ldr.w	r9, [pc, #768]	; 8000e6c <main+0x39c>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000b6c:	f8df c300 	ldr.w	ip, [pc, #768]	; 8000e70 <main+0x3a0>
 8000b70:	4aa8      	ldr	r2, [pc, #672]	; (8000e14 <main+0x344>)
 8000b72:	f8df e300 	ldr.w	lr, [pc, #768]	; 8000e74 <main+0x3a4>
 8000b76:	4ba8      	ldr	r3, [pc, #672]	; (8000e18 <main+0x348>)
  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0U;
    _stm32_dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFFU;
 8000b78:	f04f 36ff 	mov.w	r6, #4294967295
 8000b7c:	607e      	str	r6, [r7, #4]
#if STM32_DMA2_NUM_CHANNELS > 0
  DMA2->IFCR = 0xFFFFFFFFU;
 8000b7e:	604e      	str	r6, [r1, #4]
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8000b80:	6981      	ldr	r1, [r0, #24]
 8000b82:	4fa6      	ldr	r7, [pc, #664]	; (8000e1c <main+0x34c>)
 8000b84:	f041 0101 	orr.w	r1, r1, #1
 8000b88:	6181      	str	r1, [r0, #24]

#if STM32_HAS_USB
  /* USB IRQ relocated to not conflict with CAN.*/
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_USB_IT_RMP;
 8000b8a:	6829      	ldr	r1, [r5, #0]
 8000b8c:	f041 0120 	orr.w	r1, r1, #32
 8000b90:	6029      	str	r1, [r5, #0]
  rccEnableAHB(AHB_EN_MASK, TRUE);
  RCC->AHBLPENR |= AHB_LPEN_MASK;
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
 8000b92:	f8d0 8014 	ldr.w	r8, [r0, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000b96:	4da2      	ldr	r5, [pc, #648]	; (8000e20 <main+0x350>)
 8000b98:	49a2      	ldr	r1, [pc, #648]	; (8000e24 <main+0x354>)
  rccEnableAHB(AHB_EN_MASK, TRUE);
  RCC->AHBLPENR |= AHB_LPEN_MASK;
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
 8000b9a:	f448 087f 	orr.w	r8, r8, #16711680	; 0xff0000
 8000b9e:	f8c0 8014 	str.w	r8, [r0, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  gpiop->OSPEEDR = config->ospeedr;
 8000ba6:	f46f 680a 	mvn.w	r8, #2208	; 0x8a0
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000baa:	6044      	str	r4, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000bac:	f8c0 8008 	str.w	r8, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8000bb0:	f64f 78df 	movw	r8, #65503	; 0xffdf

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000bb4:	f8c0 900c 	str.w	r9, [r0, #12]
  gpiop->ODR     = config->odr;
 8000bb8:	f8c0 8014 	str.w	r8, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8000bbc:	f44f 49ee 	mov.w	r9, #30464	; 0x7700
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000bc0:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8000e78 <main+0x3a8>

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8000bc4:	f8c0 9020 	str.w	r9, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8000bc8:	6244      	str	r4, [r0, #36]	; 0x24

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000bca:	f04f 3955 	mov.w	r9, #1431655765	; 0x55555555
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000bce:	f8c0 8000 	str.w	r8, [r0]
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8000bd2:	f64f 70ff 	movw	r0, #65535	; 0xffff
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000bd6:	f04f 0880 	mov.w	r8, #128	; 0x80
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000bda:	f8cc 4004 	str.w	r4, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000bde:	f8cc 6008 	str.w	r6, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 8000be2:	f8cc 900c 	str.w	r9, [ip, #12]
  gpiop->ODR     = config->odr;
 8000be6:	f8cc 0014 	str.w	r0, [ip, #20]
  gpiop->AFRL    = config->afrl;
 8000bea:	f8cc 4020 	str.w	r4, [ip, #32]
  gpiop->AFRH    = config->afrh;
 8000bee:	f8cc 4024 	str.w	r4, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000bf2:	f8cc 8000 	str.w	r8, [ip]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000bf6:	f8df c284 	ldr.w	ip, [pc, #644]	; 8000e7c <main+0x3ac>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000bfa:	6054      	str	r4, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000bfc:	6096      	str	r6, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8000bfe:	f8c2 c00c 	str.w	ip, [r2, #12]
  gpiop->ODR     = config->odr;
 8000c02:	6150      	str	r0, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8000c04:	6214      	str	r4, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8000c06:	6254      	str	r4, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000c08:	6014      	str	r4, [r2, #0]
 *
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state      = UART_STOP;
 8000c0a:	4a87      	ldr	r2, [pc, #540]	; (8000e28 <main+0x358>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000c0c:	f8ce 4004 	str.w	r4, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000c10:	f8ce 6008 	str.w	r6, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 8000c14:	f8ce 900c 	str.w	r9, [lr, #12]
  gpiop->ODR     = config->odr;
 8000c18:	f8ce 0014 	str.w	r0, [lr, #20]
  gpiop->AFRL    = config->afrl;
 8000c1c:	f8ce 4020 	str.w	r4, [lr, #32]
  gpiop->AFRH    = config->afrh;
 8000c20:	f8ce 4024 	str.w	r4, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000c24:	f8ce 4000 	str.w	r4, [lr]
#if STM32_UART_USE_USART2
  uartObjectInit(&UARTD2);
  UARTD2.usart   = USART2;
  UARTD2.clock   = STM32_USART2CLK;
  UARTD2.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD2.dmarx   = STM32_DMA_STREAM(STM32_UART_USART2_RX_DMA_STREAM);
 8000c28:	f8df e254 	ldr.w	lr, [pc, #596]	; 8000e80 <main+0x3b0>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000c2c:	605c      	str	r4, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000c2e:	609e      	str	r6, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8000c30:	f8c3 900c 	str.w	r9, [r3, #12]
  gpiop->ODR     = config->odr;
 8000c34:	6158      	str	r0, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8000c36:	621c      	str	r4, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8000c38:	625c      	str	r4, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000c3a:	601c      	str	r4, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000c3c:	607c      	str	r4, [r7, #4]
 8000c3e:	4b7b      	ldr	r3, [pc, #492]	; (8000e2c <main+0x35c>)
  gpiop->OSPEEDR = config->ospeedr;
 8000c40:	60be      	str	r6, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8000c42:	f8c7 900c 	str.w	r9, [r7, #12]
  gpiop->ODR     = config->odr;
 8000c46:	6178      	str	r0, [r7, #20]
  gpiop->AFRL    = config->afrl;
 8000c48:	623c      	str	r4, [r7, #32]
  gpiop->AFRH    = config->afrh;
 8000c4a:	627c      	str	r4, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000c4c:	603c      	str	r4, [r7, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000c4e:	606c      	str	r4, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000c50:	60ac      	str	r4, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8000c52:	f8c5 900c 	str.w	r9, [r5, #12]
  gpiop->ODR     = config->odr;
 8000c56:	6168      	str	r0, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8000c58:	622c      	str	r4, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8000c5a:	626c      	str	r4, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000c5c:	602c      	str	r4, [r5, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000c5e:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000c60:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8000c62:	f8c1 900c 	str.w	r9, [r1, #12]
  gpiop->ODR     = config->odr;
 8000c66:	6148      	str	r0, [r1, #20]
 8000c68:	f04f 0901 	mov.w	r9, #1
  gpiop->AFRL    = config->afrl;
 8000c6c:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8000c6e:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000c70:	600c      	str	r4, [r1, #0]
  UARTD1.dmatx   = STM32_DMA_STREAM(STM32_UART_USART1_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART2
  uartObjectInit(&UARTD2);
  UARTD2.usart   = USART2;
 8000c72:	496f      	ldr	r1, [pc, #444]	; (8000e30 <main+0x360>)
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 8000c74:	f8df c20c 	ldr.w	ip, [pc, #524]	; 8000e84 <main+0x3b4>
 8000c78:	f882 9000 	strb.w	r9, [r2]
#if STM32_UART_USE_USART3
  uartObjectInit(&UARTD3);
  UARTD3.usart   = USART3;
  UARTD3.clock   = STM32_USART3CLK;
  UARTD3.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD3.dmarx   = STM32_DMA_STREAM(STM32_UART_USART3_RX_DMA_STREAM);
 8000c7c:	f1ae 003c 	sub.w	r0, lr, #60	; 0x3c
  uartp->txstate    = UART_TX_IDLE;
 8000c80:	7054      	strb	r4, [r2, #1]
  UARTD1.dmatx   = STM32_DMA_STREAM(STM32_UART_USART1_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART2
  uartObjectInit(&UARTD2);
  UARTD2.usart   = USART2;
 8000c82:	6091      	str	r1, [r2, #8]
  UARTD2.clock   = STM32_USART2CLK;
  UARTD2.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD2.dmarx   = STM32_DMA_STREAM(STM32_UART_USART2_RX_DMA_STREAM);
  UARTD2.dmatx   = STM32_DMA_STREAM(STM32_UART_USART2_TX_DMA_STREAM);
 8000c84:	f10e 0114 	add.w	r1, lr, #20
 8000c88:	6191      	str	r1, [r2, #24]
#if STM32_UART_USE_USART3
  uartObjectInit(&UARTD3);
  UARTD3.usart   = USART3;
  UARTD3.clock   = STM32_USART3CLK;
  UARTD3.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD3.dmarx   = STM32_DMA_STREAM(STM32_UART_USART3_RX_DMA_STREAM);
 8000c8a:	6158      	str	r0, [r3, #20]
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
#else
  SCB->SHP[handler] = NVIC_PRIORITY_MASK(prio);
 8000c8c:	4f69      	ldr	r7, [pc, #420]	; (8000e34 <main+0x364>)
  UARTD2.dmatx   = STM32_DMA_STREAM(STM32_UART_USART2_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART3
  uartObjectInit(&UARTD3);
  UARTD3.usart   = USART3;
 8000c8e:	496a      	ldr	r1, [pc, #424]	; (8000e38 <main+0x368>)
 8000c90:	486a      	ldr	r0, [pc, #424]	; (8000e3c <main+0x36c>)
  uartp->rxstate    = UART_RX_IDLE;
 8000c92:	7094      	strb	r4, [r2, #2]
 *
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state      = UART_STOP;
 8000c94:	f883 9000 	strb.w	r9, [r3]
  uartp->txstate    = UART_TX_IDLE;
 8000c98:	705c      	strb	r4, [r3, #1]
  uartp->rxstate    = UART_RX_IDLE;
 8000c9a:	709c      	strb	r4, [r3, #2]
  uartp->config     = NULL;
 8000c9c:	6054      	str	r4, [r2, #4]
#if STM32_UART_USE_USART2
  uartObjectInit(&UARTD2);
  UARTD2.usart   = USART2;
  UARTD2.clock   = STM32_USART2CLK;
  UARTD2.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD2.dmarx   = STM32_DMA_STREAM(STM32_UART_USART2_RX_DMA_STREAM);
 8000c9e:	f8c2 e014 	str.w	lr, [r2, #20]
 8000ca2:	605c      	str	r4, [r3, #4]
  UARTD2.dmatx   = STM32_DMA_STREAM(STM32_UART_USART2_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART3
  uartObjectInit(&UARTD3);
  UARTD3.usart   = USART3;
 8000ca4:	6099      	str	r1, [r3, #8]
#endif

#if STM32_UART_USE_USART2
  uartObjectInit(&UARTD2);
  UARTD2.usart   = USART2;
  UARTD2.clock   = STM32_USART2CLK;
 8000ca6:	4d66      	ldr	r5, [pc, #408]	; (8000e40 <main+0x370>)
 8000ca8:	f8cc 0004 	str.w	r0, [ip, #4]
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8000cac:	2007      	movs	r0, #7

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  SysTick->VAL = 0;
 8000cae:	f8cc 4008 	str.w	r4, [ip, #8]
  uartObjectInit(&UARTD3);
  UARTD3.usart   = USART3;
  UARTD3.clock   = STM32_USART3CLK;
  UARTD3.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD3.dmarx   = STM32_DMA_STREAM(STM32_UART_USART3_RX_DMA_STREAM);
  UARTD3.dmatx   = STM32_DMA_STREAM(STM32_UART_USART3_TX_DMA_STREAM);
 8000cb2:	f1ae 0150 	sub.w	r1, lr, #80	; 0x50
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb6:	f8cc 0000 	str.w	r0, [ip]

#if STM32_UART_USE_USART2
  uartObjectInit(&UARTD2);
  UARTD2.usart   = USART2;
  UARTD2.clock   = STM32_USART2CLK;
  UARTD2.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8000cba:	f04f 0e08 	mov.w	lr, #8
 8000cbe:	f887 8023 	strb.w	r8, [r7, #35]	; 0x23
  halInit();

  /*
     * Activates the serial driver 2 using the driver default configuration.
     */
  palSetPadMode(GPIOC, 10, PAL_MODE_ALTERNATE(7));	/* USART3_TX */
 8000cc2:	f44f 6080 	mov.w	r0, #1024	; 0x400
#endif

#if STM32_UART_USE_USART2
  uartObjectInit(&UARTD2);
  UARTD2.usart   = USART2;
  UARTD2.clock   = STM32_USART2CLK;
 8000cc6:	60d5      	str	r5, [r2, #12]
#endif

#if STM32_UART_USE_USART3
  uartObjectInit(&UARTD3);
  UARTD3.usart   = USART3;
  UARTD3.clock   = STM32_USART3CLK;
 8000cc8:	60dd      	str	r5, [r3, #12]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8000cca:	4d5e      	ldr	r5, [pc, #376]	; (8000e44 <main+0x374>)

#if STM32_UART_USE_USART2
  uartObjectInit(&UARTD2);
  UARTD2.usart   = USART2;
  UARTD2.clock   = STM32_USART2CLK;
  UARTD2.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8000ccc:	f8c2 e010 	str.w	lr, [r2, #16]

#if STM32_UART_USE_USART3
  uartObjectInit(&UARTD3);
  UARTD3.usart   = USART3;
  UARTD3.clock   = STM32_USART3CLK;
  UARTD3.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8000cd0:	f8c3 e010 	str.w	lr, [r3, #16]
  UARTD3.dmarx   = STM32_DMA_STREAM(STM32_UART_USART3_RX_DMA_STREAM);
  UARTD3.dmatx   = STM32_DMA_STREAM(STM32_UART_USART3_TX_DMA_STREAM);
 8000cd4:	6199      	str	r1, [r3, #24]
 8000cd6:	f7ff fb0b 	bl	80002f0 <_pal_lld_setgroupmode.constprop.0>
  palSetPadMode(GPIOC, 11, PAL_MODE_ALTERNATE(7));	/* USART3_RX */
 8000cda:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000cde:	f7ff fb07 	bl	80002f0 <_pal_lld_setgroupmode.constprop.0>
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8000ce2:	f105 0114 	add.w	r1, r5, #20

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2300      	movs	r3, #0
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8000cea:	4668      	mov	r0, sp
 8000cec:	602d      	str	r5, [r5, #0]
  tqp->prev = (thread_t *)tqp;
 8000cee:	606d      	str	r5, [r5, #4]

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000cf0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000cf4:	6169      	str	r1, [r5, #20]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8000cf6:	61a9      	str	r1, [r5, #24]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000cf8:	9600      	str	r6, [sp, #0]
  ch.vtlist.delta = (systime_t)-1;
 8000cfa:	61ee      	str	r6, [r5, #28]
  tmp->worst      = (rtcnt_t)0;
 8000cfc:	9401      	str	r4, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 8000cfe:	9402      	str	r4, [sp, #8]
  tmp->n          = (ucnt_t)0;
 8000d00:	9403      	str	r4, [sp, #12]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.queue);
  ch.rlist.prio = NOPRIO;
 8000d02:	60ac      	str	r4, [r5, #8]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
 8000d04:	622c      	str	r4, [r5, #32]
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8000d06:	662c      	str	r4, [r5, #96]	; 0x60
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8000d08:	f7ff faea 	bl	80002e0 <chTMStartMeasurementX.constprop.5>
  chTMStopMeasurementX(&tm);
 8000d0c:	4668      	mov	r0, sp
 8000d0e:	f7ff fb97 	bl	8000440 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 8000d12:	9b02      	ldr	r3, [sp, #8]
 8000d14:	662b      	str	r3, [r5, #96]	; 0x60
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000d16:	60bc      	str	r4, [r7, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	68fa      	ldr	r2, [r7, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000d1a:	4b4b      	ldr	r3, [pc, #300]	; (8000e48 <main+0x378>)

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000d1c:	4e4b      	ldr	r6, [pc, #300]	; (8000e4c <main+0x37c>)
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 8000d1e:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8000d22:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000d26:	4011      	ands	r1, r2
  reg_value  =  (reg_value                                   |
 8000d28:	430b      	orrs	r3, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68f3      	ldr	r3, [r6, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000d2e:	4848      	ldr	r0, [pc, #288]	; (8000e50 <main+0x380>)
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000d30:	f885 4039 	strb.w	r4, [r5, #57]	; 0x39

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000d34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d38:	60f3      	str	r3, [r6, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000d3a:	6803      	ldr	r3, [r0, #0]
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 8000d3c:	f8c5 8054 	str.w	r8, [r5, #84]	; 0x54
 8000d40:	ea43 0309 	orr.w	r3, r3, r9
  tp->mtxlist   = NULL;
 8000d44:	652c      	str	r4, [r5, #80]	; 0x50
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 8000d46:	64ec      	str	r4, [r5, #76]	; 0x4c
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 8000d48:	f885 9038 	strb.w	r9, [r5, #56]	; 0x38
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4c:	f04f 0e10 	mov.w	lr, #16
 8000d50:	6003      	str	r3, [r0, #0]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 8000d52:	f105 0640 	add.w	r6, r5, #64	; 0x40
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8000d56:	f105 0344 	add.w	r3, r5, #68	; 0x44
#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
#else
  currp = _thread_init(&ch.mainthread, "main", NORMALPRIO);
 8000d5a:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8000d5e:	2220      	movs	r2, #32
 8000d60:	f887 e01f 	strb.w	lr, [r7, #31]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 8000d64:	642e      	str	r6, [r5, #64]	; 0x40
 8000d66:	6129      	str	r1, [r5, #16]
 8000d68:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8000d6c:	646b      	str	r3, [r5, #68]	; 0x44
  tqp->prev = (thread_t *)tqp;
 8000d6e:	64ab      	str	r3, [r5, #72]	; 0x48
 8000d70:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000d74:	b662      	cpsie	i

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000d76:	f382 8811 	msr	BASEPRI, r2
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000d7a:	4a36      	ldr	r2, [pc, #216]	; (8000e54 <main+0x384>)
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  thread_t *otp = currp;
 8000d7c:	6929      	ldr	r1, [r5, #16]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 8000d7e:	f8c2 9128 	str.w	r9, [r2, #296]	; 0x128
  tp->state     = CH_STATE_WTSTART;
 8000d82:	2302      	movs	r3, #2
 8000d84:	f882 3130 	strb.w	r3, [r2, #304]	; 0x130
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000d88:	f882 4131 	strb.w	r4, [r2, #305]	; 0x131
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 8000d8c:	f8c2 914c 	str.w	r9, [r2, #332]	; 0x14c
  tp->mtxlist   = NULL;
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 8000d90:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8000d94:	f8c2 4134 	str.w	r4, [r2, #308]	; 0x134

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8000d98:	6888      	ldr	r0, [r1, #8]
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000d9a:	4f2f      	ldr	r7, [pc, #188]	; (8000e58 <main+0x388>)
 8000d9c:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8000e88 <main+0x3b8>
 8000da0:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8000da4:	f502 739e 	add.w	r3, r2, #316	; 0x13c
 8000da8:	f102 0ebc 	add.w	lr, r2, #188	; 0xbc
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 8000dac:	f502 769c 	add.w	r6, r2, #312	; 0x138
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 8000db0:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000db4:	f8c2 e12c 	str.w	lr, [r2, #300]	; 0x12c
 8000db8:	f8c2 70fc 	str.w	r7, [r2, #252]	; 0xfc
 8000dbc:	f8c2 6138 	str.w	r6, [r2, #312]	; 0x138
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8000dc0:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
  tqp->prev = (thread_t *)tqp;
 8000dc4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dc8:	f8c2 c11c 	str.w	ip, [r2, #284]	; 0x11c
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	f000 80e1 	beq.w	8000f94 <main+0x4c4>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8000dd2:	f882 4130 	strb.w	r4, [r2, #304]	; 0x130
  cp = (thread_t *)&ch.rlist.queue;
 8000dd6:	462b      	mov	r3, r5
  do {
    cp = cp->queue.next;
 8000dd8:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000dda:	6898      	ldr	r0, [r3, #8]
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	d1fb      	bne.n	8000dd8 <main+0x308>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8000de0:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
  tp->queue.prev             = cp->queue.prev;
 8000de4:	685c      	ldr	r4, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8000de6:	491d      	ldr	r1, [pc, #116]	; (8000e5c <main+0x38c>)
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8000de8:	f8c2 4124 	str.w	r4, [r2, #292]	; 0x124
  tp->queue.prev->queue.next = tp;
 8000dec:	6021      	str	r1, [r4, #0]
  cp->queue.prev             = tp;
 8000dee:	6059      	str	r1, [r3, #4]
 8000df0:	f380 8811 	msr	BASEPRI, r0
 8000df4:	4a1a      	ldr	r2, [pc, #104]	; (8000e60 <main+0x390>)
 8000df6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8000e8c <main+0x3bc>
 8000dfa:	491a      	ldr	r1, [pc, #104]	; (8000e64 <main+0x394>)
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <main+0x398>)
{
	uint32_t id = 0u;

	chSysInit();

	for (id = 0u; id < OS_THREAD_NUMBER; id ++)
 8000dfe:	4604      	mov	r4, r0
 8000e00:	26c6      	movs	r6, #198	; 0xc6
 8000e02:	e04a      	b.n	8000e9a <main+0x3ca>
 8000e04:	40020000 	.word	0x40020000
 8000e08:	40020400 	.word	0x40020400
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010000 	.word	0x40010000
 8000e14:	48000800 	.word	0x48000800
 8000e18:	48001000 	.word	0x48001000
 8000e1c:	48001400 	.word	0x48001400
 8000e20:	48001800 	.word	0x48001800
 8000e24:	48001c00 	.word	0x48001c00
 8000e28:	20001600 	.word	0x20001600
 8000e2c:	20001620 	.word	0x20001620
 8000e30:	40004400 	.word	0x40004400
 8000e34:	e000ed00 	.word	0xe000ed00
 8000e38:	40004800 	.word	0x40004800
 8000e3c:	0001193f 	.word	0x0001193f
 8000e40:	0112a880 	.word	0x0112a880
 8000e44:	20001238 	.word	0x20001238
 8000e48:	05fa0300 	.word	0x05fa0300
 8000e4c:	e000edf0 	.word	0xe000edf0
 8000e50:	e0001000 	.word	0xe0001000
 8000e54:	20001988 	.word	0x20001988
 8000e58:	08000491 	.word	0x08000491
 8000e5c:	20001aa8 	.word	0x20001aa8
 8000e60:	0800103c 	.word	0x0800103c
 8000e64:	08000991 	.word	0x08000991
 8000e68:	20001988 	.word	0x20001988
 8000e6c:	65555105 	.word	0x65555105
 8000e70:	48000400 	.word	0x48000400
 8000e74:	48000c00 	.word	0x48000c00
 8000e78:	280004a0 	.word	0x280004a0
 8000e7c:	51555555 	.word	0x51555555
 8000e80:	080011e4 	.word	0x080011e4
 8000e84:	e000e010 	.word	0xe000e010
 8000e88:	080001b9 	.word	0x080001b9
 8000e8c:	20001298 	.word	0x20001298
 8000e90:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000e92:	6a56      	ldr	r6, [r2, #36]	; 0x24
 8000e94:	69d1      	ldr	r1, [r2, #28]
 8000e96:	6a10      	ldr	r0, [r2, #32]
 8000e98:	321c      	adds	r2, #28
 8000e9a:	f04f 0e20 	mov.w	lr, #32
 8000e9e:	f38e 8811 	msr	BASEPRI, lr
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 8000ea2:	f04f 0a02 	mov.w	sl, #2
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->msgqueue);
 8000ea6:	f1a3 071c 	sub.w	r7, r3, #28
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000eaa:	f1a3 0b9c 	sub.w	fp, r3, #156	; 0x9c
  REG_INSERT(tp);
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
 8000eae:	f1a3 0920 	sub.w	r9, r3, #32
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000eb2:	f843 1c5c 	str.w	r1, [r3, #-92]
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000eb6:	2100      	movs	r1, #0
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 8000eb8:	f843 6c30 	str.w	r6, [r3, #-48]
  tp->flags     = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 8000ebc:	f843 6c0c 	str.w	r6, [r3, #-12]
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000ec0:	f843 0c58 	str.w	r0, [r3, #-88]
 8000ec4:	f843 cc3c 	str.w	ip, [r3, #-60]
 8000ec8:	f843 bc2c 	str.w	fp, [r3, #-44]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 8000ecc:	f803 ac28 	strb.w	sl, [r3, #-40]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 8000ed0:	f843 9c20 	str.w	r9, [r3, #-32]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8000ed4:	f843 7c1c 	str.w	r7, [r3, #-28]
  tqp->prev = (thread_t *)tqp;
 8000ed8:	f843 7c18 	str.w	r7, [r3, #-24]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000edc:	f803 1c27 	strb.w	r1, [r3, #-39]
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 8000ee0:	f843 1c10 	str.w	r1, [r3, #-16]
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 8000ee4:	f843 1c14 	str.w	r1, [r3, #-20]
  REG_INSERT(tp);
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
 8000ee8:	f1a3 0638 	sub.w	r6, r3, #56	; 0x38
 8000eec:	f381 8811 	msr	BASEPRI, r1
								   OsCfg_Config[id].pvTaskStackEnd,
								   OsCfg_Config[id].ulPriority,
								   OsCfg_Config[id].pfTaskFunction,
								   OsCfg_Config[id].pvArguments};
		OsCfg_TaskPool[id] = chThdCreateSuspended(&tdp);
		OsCfg_TaskPool[id]->startoffset = OsCfg_Config[id].ulOffset;
 8000ef0:	68d0      	ldr	r0, [r2, #12]
								   OsCfg_Config[id].pvTaskStackStart,
								   OsCfg_Config[id].pvTaskStackEnd,
								   OsCfg_Config[id].ulPriority,
								   OsCfg_Config[id].pfTaskFunction,
								   OsCfg_Config[id].pvArguments};
		OsCfg_TaskPool[id] = chThdCreateSuspended(&tdp);
 8000ef2:	f848 6f04 	str.w	r6, [r8, #4]!
{
	uint32_t id = 0u;

	chSysInit();

	for (id = 0u; id < OS_THREAD_NUMBER; id ++)
 8000ef6:	3401      	adds	r4, #1
								   OsCfg_Config[id].pvTaskStackEnd,
								   OsCfg_Config[id].ulPriority,
								   OsCfg_Config[id].pfTaskFunction,
								   OsCfg_Config[id].pvArguments};
		OsCfg_TaskPool[id] = chThdCreateSuspended(&tdp);
		OsCfg_TaskPool[id]->startoffset = OsCfg_Config[id].ulOffset;
 8000ef8:	f843 0c08 	str.w	r0, [r3, #-8]
		OsCfg_TaskPool[id]->recurrence = OsCfg_Config[id].ulRecurrence;
 8000efc:	6910      	ldr	r0, [r2, #16]
 8000efe:	f843 0c04 	str.w	r0, [r3, #-4]
{
	uint32_t id = 0u;

	chSysInit();

	for (id = 0u; id < OS_THREAD_NUMBER; id ++)
 8000f02:	2c07      	cmp	r4, #7
 8000f04:	d1c4      	bne.n	8000e90 <main+0x3c0>
 8000f06:	f38e 8811 	msr	BASEPRI, lr
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.systime;
 8000f0a:	6a2f      	ldr	r7, [r5, #32]
 8000f0c:	f381 8811 	msr	BASEPRI, r1
}

void Os_StartTasks(void)
{
	const systime_t startTime = chVTGetSystemTime();
	uint32_t noOfStartedTasks = 0u;
 8000f10:	4688      	mov	r8, r1
 8000f12:	4e21      	ldr	r6, [pc, #132]	; (8000f98 <main+0x4c8>)
{
	uint32_t id = 0u;

	chSysInit();

	for (id = 0u; id < OS_THREAD_NUMBER; id ++)
 8000f14:	f1a6 041c 	sub.w	r4, r6, #28
	while (noOfStartedTasks <= OS_THREAD_NUMBER)
	{
		uint32_t id = 0u;
		for (id = 0u; id < OS_THREAD_NUMBER; id++)
		{
			if (!chVTIsSystemTimeWithin(startTime, (startTime + OsCfg_TaskPool[id]->startoffset))
 8000f18:	f854 3f04 	ldr.w	r3, [r4, #4]!
 8000f1c:	2120      	movs	r1, #32
 8000f1e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000f20:	f381 8811 	msr	BASEPRI, r1
 8000f24:	2200      	movs	r2, #0
 8000f26:	6a2b      	ldr	r3, [r5, #32]
 8000f28:	f382 8811 	msr	BASEPRI, r2
 8000f2c:	1bdb      	subs	r3, r3, r7
 8000f2e:	4298      	cmp	r0, r3
 8000f30:	d803      	bhi.n	8000f3a <main+0x46a>
			&& (OsCfg_TaskPool[id]->state == CH_STATE_WTSTART))
 8000f32:	6820      	ldr	r0, [r4, #0]
 8000f34:	7c03      	ldrb	r3, [r0, #16]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d00a      	beq.n	8000f50 <main+0x480>
	const systime_t startTime = chVTGetSystemTime();
	uint32_t noOfStartedTasks = 0u;
	while (noOfStartedTasks <= OS_THREAD_NUMBER)
	{
		uint32_t id = 0u;
		for (id = 0u; id < OS_THREAD_NUMBER; id++)
 8000f3a:	42a6      	cmp	r6, r4
 8000f3c:	d1ec      	bne.n	8000f18 <main+0x448>

void Os_StartTasks(void)
{
	const systime_t startTime = chVTGetSystemTime();
	uint32_t noOfStartedTasks = 0u;
	while (noOfStartedTasks <= OS_THREAD_NUMBER)
 8000f3e:	f1b8 0f07 	cmp.w	r8, #7
 8000f42:	d9e6      	bls.n	8000f12 <main+0x442>
   * Creates the threads.
   */
  Os_Init();
  Os_StartTasks();

  chThdExit(0);
 8000f44:	2000      	movs	r0, #0
 8000f46:	f7ff fd7b 	bl	8000a40 <chThdExit>
}
 8000f4a:	b007      	add	sp, #28
 8000f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f50:	f381 8811 	msr	BASEPRI, r1
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.queue;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <main+0x4cc>)
 8000f56:	6881      	ldr	r1, [r0, #8]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8000f58:	7402      	strb	r2, [r0, #16]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
 8000f5a:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	4291      	cmp	r1, r2
 8000f60:	d9fb      	bls.n	8000f5a <main+0x48a>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8000f66:	6003      	str	r3, [r0, #0]
 8000f68:	2100      	movs	r1, #0
  tp->queue.prev             = cp->queue.prev;
  tp->queue.prev->queue.next = tp;
 8000f6a:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000f6c:	6058      	str	r0, [r3, #4]
 8000f6e:	f381 8811 	msr	BASEPRI, r1
 8000f72:	2320      	movs	r3, #32
		{
			if (!chVTIsSystemTimeWithin(startTime, (startTime + OsCfg_TaskPool[id]->startoffset))
			&& (OsCfg_TaskPool[id]->state == CH_STATE_WTSTART))
			{
				chThdStart(OsCfg_TaskPool[id]);
				noOfStartedTasks++;
 8000f74:	f108 0801 	add.w	r8, r8, #1
 8000f78:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.queue) > currp->prio;
 8000f7c:	682a      	ldr	r2, [r5, #0]
 8000f7e:	692b      	ldr	r3, [r5, #16]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 8000f80:	6892      	ldr	r2, [r2, #8]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d901      	bls.n	8000f8c <main+0x4bc>
    chSchDoRescheduleAhead();
 8000f88:	f7ff fd82 	bl	8000a90 <chSchDoReschedule>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f383 8811 	msr	BASEPRI, r3
 8000f92:	e7d2      	b.n	8000f3a <main+0x46a>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8000f94:	7408      	strb	r0, [r1, #16]
 8000f96:	e7fe      	b.n	8000f96 <main+0x4c6>
 8000f98:	200012b4 	.word	0x200012b4
 8000f9c:	20001238 	.word	0x20001238

08000fa0 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8000fa0:	4a23      	ldr	r2, [pc, #140]	; (8001030 <__early_init+0x90>)
 8000fa2:	6813      	ldr	r3, [r2, #0]
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <__early_init+0x90>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	0792      	lsls	r2, r2, #30
 8000fb0:	d5fb      	bpl.n	8000faa <__early_init+0xa>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	f022 0203 	bic.w	r2, r2, #3
 8000fb8:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8000fbe:	4a1c      	ldr	r2, [pc, #112]	; (8001030 <__early_init+0x90>)
 8000fc0:	6853      	ldr	r3, [r2, #4]
 8000fc2:	f013 030c 	ands.w	r3, r3, #12
 8000fc6:	d1fa      	bne.n	8000fbe <__early_init+0x1e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8000fc8:	6811      	ldr	r1, [r2, #0]
 8000fca:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 8000fce:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8000fd0:	6053      	str	r3, [r2, #4]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 8000fd2:	6813      	ldr	r3, [r2, #0]
 8000fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd8:	6013      	str	r3, [r2, #0]
#endif
  while (!(RCC->CR & RCC_CR_HSERDY))
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <__early_init+0x90>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	0390      	lsls	r0, r2, #14
 8000fe0:	d5fb      	bpl.n	8000fda <__early_init+0x3a>
    ;                                       /* Waits until HSE is stable.   */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8000fe2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fe4:	f042 0201 	orr.w	r2, r2, #1
 8000fe8:	625a      	str	r2, [r3, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <__early_init+0x90>)
 8000fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fee:	0791      	lsls	r1, r2, #30
 8000ff0:	d5fb      	bpl.n	8000fea <__early_init+0x4a>
    ;                                       /* Waits until LSI is stable.   */
#endif

  /* Clock settings.*/
  RCC->CFGR  = STM32_MCOSEL    | STM32_USBPRE    | STM32_PLLMUL   |
 8000ff2:	4a10      	ldr	r2, [pc, #64]	; (8001034 <__early_init+0x94>)
 8000ff4:	605a      	str	r2, [r3, #4]
               STM32_PLLSRC    | STM32_PPRE1     | STM32_PPRE2    |
               STM32_HPRE;
  RCC->CFGR2 = STM32_ADC34PRES | STM32_ADC12PRES | STM32_PREDIV;
 8000ff6:	f242 1101 	movw	r1, #8449	; 0x2101
  RCC->CFGR3 = STM32_UART5SW   | STM32_UART4SW   | STM32_USART3SW |
 8000ffa:	2230      	movs	r2, #48	; 0x30

  /* Clock settings.*/
  RCC->CFGR  = STM32_MCOSEL    | STM32_USBPRE    | STM32_PLLMUL   |
               STM32_PLLSRC    | STM32_PPRE1     | STM32_PPRE2    |
               STM32_HPRE;
  RCC->CFGR2 = STM32_ADC34PRES | STM32_ADC12PRES | STM32_PREDIV;
 8000ffc:	62d9      	str	r1, [r3, #44]	; 0x2c
  RCC->CFGR3 = STM32_UART5SW   | STM32_UART4SW   | STM32_USART3SW |
 8000ffe:	631a      	str	r2, [r3, #48]	; 0x30
               STM32_USART2SW  | STM32_I2C2SW    | STM32_I2C1SW   |
               STM32_USART1SW;

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR   |= RCC_CR_PLLON;
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001006:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <__early_init+0x90>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	0192      	lsls	r2, r2, #6
 800100e:	d5fb      	bpl.n	8001008 <__early_init+0x68>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8001010:	4a09      	ldr	r2, [pc, #36]	; (8001038 <__early_init+0x98>)
 8001012:	2112      	movs	r1, #18
 8001014:	6011      	str	r1, [r2, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	f042 0202 	orr.w	r2, r2, #2
 800101c:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800101e:	4a04      	ldr	r2, [pc, #16]	; (8001030 <__early_init+0x90>)
 8001020:	6853      	ldr	r3, [r2, #4]
 8001022:	f003 030c 	and.w	r3, r3, #12
 8001026:	2b08      	cmp	r3, #8
 8001028:	d1f9      	bne.n	800101e <__early_init+0x7e>
    ;                                       /* Waits selection complete.    */
#endif

  /* After PLL activation because the special requirements for TIM1 and
     TIM8 bits.*/
  RCC->CFGR3 |= STM32_TIM8SW | STM32_TIM1SW;
 800102a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4770      	bx	lr
 8001030:	40021000 	.word	0x40021000
 8001034:	001d2d00 	.word	0x001d2d00
 8001038:	40022000 	.word	0x40022000
